(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5610],{75251:function(n,e,o){"use strict";var t=o(73203);e.Z=void 0;var a=t(o(19124)),i=o(24246),s=(0,a.default)((0,i.jsx)("path",{d:"m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward");e.Z=s},44065:function(n,e,o){"use strict";var t=o(73203);e.Z=void 0;var a=t(o(19124)),i=o(24246),s=(0,a.default)((0,i.jsx)("path",{d:"m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}),"ArrowUpward");e.Z=s},71916:function(n,e,o){"use strict";o.d(e,{Z:function(){return w}});var t=o(95649),a=o(9118),i=o(54165),s=o(56351),r=o(40564);var d=o(27378),l=o(26582),p=o(76352),c=o(24246);function w(){var n=(0,p.PT)({dataSet:"Commodity",rowLength:100,maxColumns:20}).data,e=d.useMemo((function(){if(!n.rows||0===n.rows.length)return{rows:n.rows};var e,o=(e=n.rows,(0,a.Z)(e)||(0,i.Z)(e)||(0,s.Z)(e)||(0,r.Z)()),t=o[0],d=o[1],l=o[2];return{rows:o.slice(3),pinnedRows:{top:[t],bottom:[d,l]}}}),[n.rows]);return(0,c.jsx)("div",{style:{height:500,width:"100%"},children:(0,c.jsx)(l.s,(0,t.Z)((0,t.Z)({},n),{},{rows:e.rows,pinnedRows:e.pinnedRows,initialState:{pagination:{pageSize:25}},pagination:!0,rowsPerPageOptions:[5,10,25,50,100],experimentalFeatures:{rowPinning:!0}}))})}},11173:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return C}});var t=o(27378),a=o(86767),i=o(26582),s=o(43783),r=o(24246),d=[{field:"name",headerName:"Name",width:150},{field:"city",headerName:"City",width:150},{field:"username",headerName:"Username"},{field:"email",headerName:"Email",width:200},{field:"age",type:"number",headerName:"Age"}],l=[];function p(){return{id:(0,s.kb)(),name:(0,s.He)(),city:(0,s.JD)(),username:(0,s.yS)(),email:(0,s.FU)(),age:(0,s.Iy)(10,80)}}for(var c=0;c<10;c+=1)l.push(p());var w={top:[p(),p()],bottom:[p()]};var u=o(23315),m=o(95649),h=o(25778),g=o(29966),f=o(44065),R=o(75251),P=o(66327),b=[];for(var v=0;v<20;v+=1)b.push({id:(0,s.kb)(),name:(0,s.He)(),city:(0,s.JD)(),username:(0,s.yS)(),email:(0,s.FU)()});var k=o(71916);const x={en:{description:"Pin rows to keep them visible at all times.",location:"/docs/data/data-grid/row-pinning/row-pinning.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Data grid - Row pinning <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a></h1><p class="description">Pin rows to keep them visible at all times.</p>\n\n<p>Pinned (or frozen, locked or floating) rows are those visible at all times while the user scrolls the grid vertically.</p>\n<aside class="MuiCallout-root MuiCallout-warning"><p>This feature is experimental, it needs to be explicitly activated using the <code>rowPinning</code> experimental feature flag.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">experimentalFeatures</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> rowPinning<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>otherProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n\n</aside><p>You can pin rows at the top or bottom of the grid by passing pinned rows data through the <code>pinnedRows</code> prop:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> pinnedRows<span class="token operator">:</span> GridPinnedRowsProp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  top<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> brand<span class="token operator">:</span> <span class="token string">\'Nike\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  bottom<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> brand<span class="token operator">:</span> <span class="token string">\'Adidas\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> brand<span class="token operator">:</span> <span class="token string">\'Puma\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">pinnedRows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>pinnedRows<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The data format for pinned rows is the same as for the <code>rows</code> prop (see <a href="/x/react-data-grid/row-definition/#feeding-data">Feeding data</a>).</p>\n<p>Pinned rows data should also meet <a href="/x/react-data-grid/row-definition/#row-identifier">Row identifier</a> requirements.</p>\n',{demo:"RowPinning.js",disableAd:!0,bg:"inline"},'<aside class="MuiCallout-root MuiCallout-warning"><p>Just like the <code>rows</code> prop, <code>pinnedRows</code> prop should keep the same reference between two renders.\nOtherwise, the grid will re-apply heavy work like sorting and filtering.</p>\n\n</aside><h2 id="controlling-pinned-rows">Controlling pinned rows<a aria-labelledby="controlling-pinned-rows" class="anchor-link-style" href="#controlling-pinned-rows" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can control which rows are pinned by changing <code>pinnedRows</code>.</p>\n<p>In the demo below we use <code>actions</code> column type to add buttons to pin a row either at the top or bottom and change <code>pinnedRows</code> prop dynamically.</p>\n',{demo:"RowPinningWithActions.js",disableAd:!0,bg:"inline",defaultCodeOpen:!1},'<h2 id="usage-with-other-features">Usage with other features<a aria-labelledby="usage-with-other-features" class="anchor-link-style" href="#usage-with-other-features" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Pinned rows are not affected by sorting and filtering.</p>\n<p>Pagination does not impact pinned rows as well - they stay pinned regardless the page number or page size.</p>\n',{demo:"RowPinningWithPagination.js",disableAd:!0,bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-info"><p>Pinned rows do not support the following features:</p>\n<ul>\n<li>editing (<a href="https://github.com/mui/mui-x/issues/5591">issue #5591</a>)</li>\n<li>selection</li>\n<li>row grouping</li>\n<li>tree data</li>\n<li>row reordering</li>\n<li>master detail</li>\n</ul>\n\n</aside><h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/x/api/data-grid/data-grid/">DataGrid</a></li>\n<li><a href="/x/api/data-grid/data-grid-pro/">DataGridPro</a></li>\n<li><a href="/x/api/data-grid/data-grid-premium/">DataGridPremium</a></li>\n</ul>\n'],toc:[{text:"Controlling pinned rows",level:2,hash:"controlling-pinned-rows",children:[]},{text:"Usage with other features",level:2,hash:"usage-with-other-features",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Data Grid - Row pinning",headers:{title:"Data Grid - Row pinning",components:[]}}},I={"RowPinning.js":{module:"./RowPinning.js",raw:"import * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport {\n  randomCity,\n  randomEmail,\n  randomId,\n  randomInt,\n  randomTraderName,\n  randomUserName,\n} from '@mui/x-data-grid-generator';\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 150 },\n  { field: 'city', headerName: 'City', width: 150 },\n  { field: 'username', headerName: 'Username' },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'age', type: 'number', headerName: 'Age' },\n];\n\nconst rows = [];\n\nfunction getRow() {\n  return {\n    id: randomId(),\n    name: randomTraderName(),\n    city: randomCity(),\n    username: randomUserName(),\n    email: randomEmail(),\n    age: randomInt(10, 80),\n  };\n}\n\nfor (let i = 0; i < 10; i += 1) {\n  rows.push(getRow());\n}\n\nconst pinnedRows = {\n  top: [getRow(), getRow()],\n  bottom: [getRow()],\n};\n\nexport default function RowPinning() {\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        pinnedRows={pinnedRows}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  rows={rows}\n  pinnedRows={pinnedRows}\n  experimentalFeatures={{ rowPinning: true }}\n/>",moduleTS:"./RowPinning.js",rawTS:"import * as React from 'react';\nimport { DataGridPro, GridPinnedRowsProp } from '@mui/x-data-grid-pro';\nimport {\n  randomCity,\n  randomEmail,\n  randomId,\n  randomInt,\n  randomTraderName,\n  randomUserName,\n} from '@mui/x-data-grid-generator';\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 150 },\n  { field: 'city', headerName: 'City', width: 150 },\n  { field: 'username', headerName: 'Username' },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'age', type: 'number', headerName: 'Age' },\n];\n\nconst rows: object[] = [];\n\nfunction getRow() {\n  return {\n    id: randomId(),\n    name: randomTraderName(),\n    city: randomCity(),\n    username: randomUserName(),\n    email: randomEmail(),\n    age: randomInt(10, 80),\n  };\n}\n\nfor (let i = 0; i < 10; i += 1) {\n  rows.push(getRow());\n}\n\nconst pinnedRows: GridPinnedRowsProp = {\n  top: [getRow(), getRow()],\n  bottom: [getRow()],\n};\n\nexport default function RowPinning() {\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        pinnedRows={pinnedRows}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n"},"RowPinningWithActions.js":{module:"./RowPinningWithActions.js",raw:"import * as React from 'react';\nimport { DataGridPro, GridActionsCellItem } from '@mui/x-data-grid-pro';\nimport ArrowUpIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownIcon from '@mui/icons-material/ArrowDownward';\nimport Tooltip from '@mui/material/Tooltip';\nimport {\n  randomId,\n  randomTraderName,\n  randomCity,\n  randomUserName,\n  randomEmail,\n} from '@mui/x-data-grid-generator';\n\nconst data = [];\n\nfunction getRow() {\n  return {\n    id: randomId(),\n    name: randomTraderName(),\n    city: randomCity(),\n    username: randomUserName(),\n    email: randomEmail(),\n  };\n}\n\nfor (let i = 0; i < 20; i += 1) {\n  data.push(getRow());\n}\n\nexport default function RowPinningWithActions() {\n  const [pinnedRowsIds, setPinnedRowsIds] = React.useState({\n    top: [],\n    bottom: [],\n  });\n\n  const { rows, pinnedRows } = React.useMemo(() => {\n    const rowsData = [];\n    const pinnedRowsData = {\n      top: [],\n      bottom: [],\n    };\n\n    data.forEach((row) => {\n      if (pinnedRowsIds.top.includes(row.id)) {\n        pinnedRowsData.top.push(row);\n      } else if (pinnedRowsIds.bottom.includes(row.id)) {\n        pinnedRowsData.bottom.push(row);\n      } else {\n        rowsData.push(row);\n      }\n    });\n\n    return {\n      rows: rowsData,\n      pinnedRows: pinnedRowsData,\n    };\n  }, [pinnedRowsIds]);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        field: 'actions',\n        type: 'actions',\n        width: 100,\n        getActions: (params) => {\n          const isPinnedTop = pinnedRowsIds.top.includes(params.id);\n          const isPinnedBottom = pinnedRowsIds.bottom.includes(params.id);\n          if (isPinnedTop || isPinnedBottom) {\n            return [\n              <GridActionsCellItem\n                label=\"Unpin\"\n                icon={\n                  <Tooltip title=\"Unpin\">\n                    {isPinnedTop ? <ArrowDownIcon /> : <ArrowUpIcon />}\n                  </Tooltip>\n                }\n                onClick={() =>\n                  setPinnedRowsIds((prevPinnedRowsIds) => ({\n                    top: prevPinnedRowsIds.top.filter(\n                      (rowId) => rowId !== params.id,\n                    ),\n                    bottom: prevPinnedRowsIds.bottom.filter(\n                      (rowId) => rowId !== params.id,\n                    ),\n                  }))\n                }\n              />,\n            ];\n          }\n          return [\n            <GridActionsCellItem\n              icon={\n                <Tooltip title=\"Pin at the top\">\n                  <ArrowUpIcon />\n                </Tooltip>\n              }\n              label=\"Pin at the top\"\n              onClick={() =>\n                setPinnedRowsIds((prevPinnedRowsIds) => ({\n                  ...prevPinnedRowsIds,\n                  top: [...prevPinnedRowsIds.top, params.id],\n                }))\n              }\n            />,\n            <GridActionsCellItem\n              icon={\n                <Tooltip title=\"Pin at the bottom\">\n                  <ArrowDownIcon />\n                </Tooltip>\n              }\n              label=\"Pin at the bottom\"\n              onClick={() =>\n                setPinnedRowsIds((prevPinnedRowsIds) => ({\n                  ...prevPinnedRowsIds,\n                  bottom: [...prevPinnedRowsIds.bottom, params.id],\n                }))\n              }\n            />,\n          ];\n        },\n      },\n      { field: 'name', headerName: 'Name', width: 150 },\n      { field: 'city', headerName: 'City', width: 150 },\n      { field: 'username', headerName: 'Username' },\n      { field: 'email', headerName: 'Email', width: 200 },\n    ],\n    [pinnedRowsIds],\n  );\n\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        pinnedRows={pinnedRows}\n        rows={rows}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  pinnedRows={pinnedRows}\n  rows={rows}\n  experimentalFeatures={{ rowPinning: true }}\n/>",moduleTS:"./RowPinningWithActions.js",rawTS:"import * as React from 'react';\nimport {\n  DataGridPro,\n  GridRowModel,\n  GridActionsCellItem,\n  GridColumns,\n  GridRowId,\n} from '@mui/x-data-grid-pro';\nimport ArrowUpIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownIcon from '@mui/icons-material/ArrowDownward';\nimport Tooltip from '@mui/material/Tooltip';\nimport {\n  randomId,\n  randomTraderName,\n  randomCity,\n  randomUserName,\n  randomEmail,\n} from '@mui/x-data-grid-generator';\n\nconst data: GridRowModel[] = [];\n\nfunction getRow() {\n  return {\n    id: randomId(),\n    name: randomTraderName(),\n    city: randomCity(),\n    username: randomUserName(),\n    email: randomEmail(),\n  };\n}\n\nfor (let i = 0; i < 20; i += 1) {\n  data.push(getRow());\n}\n\nexport default function RowPinningWithActions() {\n  const [pinnedRowsIds, setPinnedRowsIds] = React.useState<{\n    top: GridRowId[];\n    bottom: GridRowId[];\n  }>({\n    top: [],\n    bottom: [],\n  });\n\n  const { rows, pinnedRows } = React.useMemo(() => {\n    const rowsData: GridRowModel[] = [];\n    const pinnedRowsData: { top: GridRowModel[]; bottom: GridRowModel[] } = {\n      top: [],\n      bottom: [],\n    };\n\n    data.forEach((row) => {\n      if (pinnedRowsIds.top.includes(row.id)) {\n        pinnedRowsData.top.push(row);\n      } else if (pinnedRowsIds.bottom.includes(row.id)) {\n        pinnedRowsData.bottom.push(row);\n      } else {\n        rowsData.push(row);\n      }\n    });\n\n    return {\n      rows: rowsData,\n      pinnedRows: pinnedRowsData,\n    };\n  }, [pinnedRowsIds]);\n\n  const columns = React.useMemo<GridColumns<typeof data[number]>>(\n    () => [\n      {\n        field: 'actions',\n        type: 'actions',\n        width: 100,\n        getActions: (params) => {\n          const isPinnedTop = pinnedRowsIds.top.includes(params.id);\n          const isPinnedBottom = pinnedRowsIds.bottom.includes(params.id);\n          if (isPinnedTop || isPinnedBottom) {\n            return [\n              <GridActionsCellItem\n                label=\"Unpin\"\n                icon={\n                  <Tooltip title=\"Unpin\">\n                    {isPinnedTop ? <ArrowDownIcon /> : <ArrowUpIcon />}\n                  </Tooltip>\n                }\n                onClick={() =>\n                  setPinnedRowsIds((prevPinnedRowsIds) => ({\n                    top: prevPinnedRowsIds.top.filter(\n                      (rowId) => rowId !== params.id,\n                    ),\n                    bottom: prevPinnedRowsIds.bottom.filter(\n                      (rowId) => rowId !== params.id,\n                    ),\n                  }))\n                }\n              />,\n            ];\n          }\n          return [\n            <GridActionsCellItem\n              icon={\n                <Tooltip title=\"Pin at the top\">\n                  <ArrowUpIcon />\n                </Tooltip>\n              }\n              label=\"Pin at the top\"\n              onClick={() =>\n                setPinnedRowsIds((prevPinnedRowsIds) => ({\n                  ...prevPinnedRowsIds,\n                  top: [...prevPinnedRowsIds.top, params.id],\n                }))\n              }\n            />,\n            <GridActionsCellItem\n              icon={\n                <Tooltip title=\"Pin at the bottom\">\n                  <ArrowDownIcon />\n                </Tooltip>\n              }\n              label=\"Pin at the bottom\"\n              onClick={() =>\n                setPinnedRowsIds((prevPinnedRowsIds) => ({\n                  ...prevPinnedRowsIds,\n                  bottom: [...prevPinnedRowsIds.bottom, params.id],\n                }))\n              }\n            />,\n          ];\n        },\n      },\n      { field: 'name', headerName: 'Name', width: 150 },\n      { field: 'city', headerName: 'City', width: 150 },\n      { field: 'username', headerName: 'Username' },\n      { field: 'email', headerName: 'Email', width: 200 },\n    ],\n    [pinnedRowsIds],\n  );\n\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        pinnedRows={pinnedRows}\n        rows={rows}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n"},"RowPinningWithPagination.js":{module:"./RowPinningWithPagination.js",raw:"import * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { useDemoData } from '@mui/x-data-grid-generator/';\n\nexport default function RowPinningWithPagination() {\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 20,\n  });\n\n  const rowsData = React.useMemo(() => {\n    if (!data.rows || data.rows.length === 0) {\n      return { rows: data.rows };\n    }\n    const [firstRow, secondRow, thirdRow, ...rows] = data.rows;\n    return {\n      rows,\n      pinnedRows: {\n        top: [firstRow],\n        bottom: [secondRow, thirdRow],\n      },\n    };\n  }, [data.rows]);\n\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        {...data}\n        rows={rowsData.rows}\n        pinnedRows={rowsData.pinnedRows}\n        initialState={{\n          pagination: {\n            pageSize: 25,\n          },\n        }}\n        pagination\n        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n",jsxPreview:"<DataGridPro\n  {...data}\n  rows={rowsData.rows}\n  pinnedRows={rowsData.pinnedRows}\n  initialState={{\n    pagination: {\n      pageSize: 25,\n    },\n  }}\n  pagination\n  rowsPerPageOptions={[5, 10, 25, 50, 100]}\n  experimentalFeatures={{ rowPinning: true }}\n/>",moduleTS:"./RowPinningWithPagination.js",rawTS:"import * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { useDemoData } from '@mui/x-data-grid-generator/';\n\nexport default function RowPinningWithPagination() {\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 100,\n    maxColumns: 20,\n  });\n\n  const rowsData = React.useMemo(() => {\n    if (!data.rows || data.rows.length === 0) {\n      return { rows: data.rows };\n    }\n    const [firstRow, secondRow, thirdRow, ...rows] = data.rows;\n    return {\n      rows,\n      pinnedRows: {\n        top: [firstRow],\n        bottom: [secondRow, thirdRow],\n      },\n    };\n  }, [data.rows]);\n\n  return (\n    <div style={{ height: 500, width: '100%' }}>\n      <DataGridPro\n        {...data}\n        rows={rowsData.rows}\n        pinnedRows={rowsData.pinnedRows}\n        initialState={{\n          pagination: {\n            pageSize: 25,\n          },\n        }}\n        pagination\n        rowsPerPageOptions={[5, 10, 25, 50, 100]}\n        experimentalFeatures={{ rowPinning: true }}\n      />\n    </div>\n  );\n}\n"}},y={"./RowPinning.js":function(){return(0,r.jsx)("div",{style:{height:500,width:"100%"},children:(0,r.jsx)(i.s,{columns:d,rows:l,pinnedRows:w,experimentalFeatures:{rowPinning:!0}})})},"./RowPinningWithActions.js":function(){var n=t.useState({top:[],bottom:[]}),e=(0,h.Z)(n,2),o=e[0],a=e[1],s=t.useMemo((function(){var n=[],e={top:[],bottom:[]};return b.forEach((function(t){o.top.includes(t.id)?e.top.push(t):o.bottom.includes(t.id)?e.bottom.push(t):n.push(t)})),{rows:n,pinnedRows:e}}),[o]),d=s.rows,l=s.pinnedRows,p=t.useMemo((function(){return[{field:"actions",type:"actions",width:100,getActions:function(n){var e=o.top.includes(n.id),t=o.bottom.includes(n.id);return e||t?[(0,r.jsx)(g.u,{label:"Unpin",icon:(0,r.jsx)(P.Z,{title:"Unpin",children:e?(0,r.jsx)(R.Z,{}):(0,r.jsx)(f.Z,{})}),onClick:function(){return a((function(e){return{top:e.top.filter((function(e){return e!==n.id})),bottom:e.bottom.filter((function(e){return e!==n.id}))}}))}})]:[(0,r.jsx)(g.u,{icon:(0,r.jsx)(P.Z,{title:"Pin at the top",children:(0,r.jsx)(f.Z,{})}),label:"Pin at the top",onClick:function(){return a((function(e){return(0,m.Z)((0,m.Z)({},e),{},{top:[].concat((0,u.Z)(e.top),[n.id])})}))}}),(0,r.jsx)(g.u,{icon:(0,r.jsx)(P.Z,{title:"Pin at the bottom",children:(0,r.jsx)(R.Z,{})}),label:"Pin at the bottom",onClick:function(){return a((function(e){return(0,m.Z)((0,m.Z)({},e),{},{bottom:[].concat((0,u.Z)(e.bottom),[n.id])})}))}})]}},{field:"name",headerName:"Name",width:150},{field:"city",headerName:"City",width:150},{field:"username",headerName:"Username"},{field:"email",headerName:"Email",width:200}]}),[o]);return(0,r.jsx)("div",{style:{height:500,width:"100%"},children:(0,r.jsx)(i.s,{columns:p,pinnedRows:l,rows:d,experimentalFeatures:{rowPinning:!0}})})},"./RowPinningWithPagination.js":k.Z};function C(){return(0,r.jsx)(a.Z,{demos:I,docs:x,demoComponents:y,disableAd:!0})}},26582:function(n,e,o){"use strict";o.d(e,{s:function(){return Rn}});var t=o(27378),a=o(12482),i=o(37919),s=o(9563),r=o(61354),d=o(2944),l=o(34535),p=o(87199),c=o(12986),w=o(97244),u=o(87495),m=o(50507),h=o(15805),g=o(81746),f=o(12084),R=o(89621),P=o(48715),b=o(69789),v=o(91676),k=o(83864),x=o(89446),I=o(23752),y=o(94053),C=o(47786),D=o(68753),T=o(95158),N=o(29136),M=o(8679),A=o(62430),j=o(61598),G=o(18327),Z=o(92666),U=o(38177),F=o(82060),S=o(31813),E=o(95088),L=o(18117),z=o(93652),_=o(98610),W=o(6569),O=o(66931),B=o(92356),H=o(44305),V=o(27298),J=o(69863),K=o(86278),X=o(694),q=o(86329),Q=o(45933),$=o(25778),Y=o(22755),nn=o(73259),en=o(42225),on=o(94675),tn=o(59694);function an(n){var e=n.lazyLoadingFeatureFlag,o=n.rowsLoadingMode,t=n.gridDimensions;return!e||!t||o!==Y.GridFeatureModeConstant.server}var sn=o(95649),rn=o(23315),dn=o(75912),ln=o(18318),pn=o(78110),cn=function(n,e){var o,a,i=(0,w.S)(n,e);return(0,u.m)(i,e),(0,m.e)(i,e),(0,Q._)(i,e),(0,H.z)(i,e),function(n,e){var o,a=(null!==(o=e.experimentalFeatures)&&void 0!==o?o:{}).lazyLoading,i=t.useCallback((function(n){if(!a||e.rowsLoadingMode!==Y.GridFeatureModeConstant.server||!e.rowCount||n.ids.length>=e.rowCount)return n;for(var o,t=(0,rn.Z)(n.ids),i=0;i<e.rowCount-n.ids.length;i+=1){var s=(o=i,"".concat("auto-generated-skeleton-row-root","-").concat(o));t.push(s)}return(0,sn.Z)((0,sn.Z)({},n),{},{ids:t})}),[e.rowCount,e.rowsLoadingMode,a]);(0,dn.Z)(n,"hydrateRows",i)}(i,e),(0,pn.$)(i),(0,X.N)(i,e),(0,J.P)(i,e),(0,h.Q)(i),(0,g.l)(f.k,i,e),(0,g.l)(K.g,i,e),(0,g.l)(V.l,i,e),(0,g.l)(R.P,i,e),(0,g.l)(ln.a,i,e),(0,g.l)(P.F,i,e),(0,g.l)(null!==(o=e.experimentalFeatures)&&void 0!==o&&o.newEditingApi?b.U:v.U,i,e),(0,g.l)(k.W,i,e),(0,g.l)(x.Q,i,e),(0,g.l)(I.Z,i,e),(0,g.l)(y.B,i,e),(0,g.l)(C.ce,i,e),(0,g.l)(W.b,i,e),(0,g.l)(O.D,i,e),(0,g.l)(D.I,i,e),(0,g.l)(T.Q,i,e),(0,g.l)(N.V,i,e),(0,g.l)(M.u4,i,e),(0,B.H)(i),(0,A.D)(i,e),(0,f.r)(i,e),(0,V.X)(i,e),(0,ln.d)(i,e),(0,R.C)(i,e),(0,P.K)(i,e),(0,j.G)(i),(0,K.k)(i,e),(0,G.n)(i),(0,M.ap)(i,e),(null!==(a=e.experimentalFeatures)&&void 0!==a&&a.newEditingApi?b.s:v.s)(i,e),(0,k.z)(i,e),(0,I.M)(i,e),(0,y.L)(i,e),(0,x.G)(i,e),(0,C.km)(i,e),(0,W.T)(i,e),(0,O.p)(i,e),(0,D.e)(i,e),(0,T.y)(i,e),(0,q.p)(i,e),(0,Z.K)(i,e),(0,_.A)(i,e),function(n,e){var o,a=(0,on.y)(n,e),i=(0,nn.P)(n,Y.gridSortModelSelector),s=(0,nn.P)(n,Y.gridFilterModelSelector),r=t.useRef({firstRowToRender:0,lastRowToRender:0}),d=(null!==(o=e.experimentalFeatures)&&void 0!==o?o:{}).lazyLoading,l=t.useCallback((function(){var o=n.current.unstable_getRenderContext(),t=(0,tn.sn)({firstIndex:o.firstRowIndex,lastIndex:o.lastRowIndex,minFirstIndex:0,maxLastIndex:a.rows.length,buffer:e.rowBuffer}),i=(0,$.Z)(t,2);return{firstRowToRender:i[0],lastRowToRender:i[1]}}),[n,e.rowBuffer,a.rows.length]),p=t.useCallback((function(o){var t=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:d,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:t})){var l={firstRowToRender:o.firstRowToRender,lastRowToRender:o.lastRowToRender,sortModel:i,filterModel:s};if(r.current.firstRowToRender!==o.firstRowToRender||r.current.lastRowToRender!==o.lastRowToRender){if(0===i.length&&0===s.items.length){var p=function(n,e){for(var o=e.firstRowIndex,t=e.lastRowIndex,a=n.slice(e.firstRowIndex,e.lastRowIndex),i=0,s=a.length-1,r=!1;!r&&o<t;)a[i].model||a[s].model||(r=!0),a[i].model&&(i+=1,o+=1),a[s].model&&(s-=1,t-=1);return r?{firstRowIndex:o,lastRowIndex:t}:void 0}(a.rows,{firstRowIndex:o.firstRowToRender,lastRowIndex:o.lastRowToRender});if(!p)return;l.firstRowToRender=p.firstRowIndex,l.lastRowToRender=p.lastRowIndex}r.current=o,n.current.publishEvent("fetchRows",l)}}}),[n,e.rowsLoadingMode,i,s,a.rows,d]),c=t.useCallback((function(o){var t=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:d,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:t})){n.current.unstable_requestPipeProcessorsApplication("hydrateRows");var a=l(),i={firstRowToRender:a.firstRowToRender,lastRowToRender:a.lastRowToRender,sortModel:o,filterModel:s};n.current.publishEvent("fetchRows",i)}}),[n,e.rowsLoadingMode,s,d,l]),w=t.useCallback((function(o){var t=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:d,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:t})){n.current.unstable_requestPipeProcessorsApplication("hydrateRows");var a=l(),s={firstRowToRender:a.firstRowToRender,lastRowToRender:a.lastRowToRender,sortModel:i,filterModel:o};n.current.publishEvent("fetchRows",s)}}),[n,e.rowsLoadingMode,i,d,l]);(0,en.zn)(n,"renderedRowsIntervalChange",p),(0,en.zn)(n,"sortModelChange",c),(0,en.zn)(n,"filterModelChange",w),(0,en.x3)(n,"fetchRows",e.onFetchRows)}(i,e),(0,N.p)(i),(0,U._)(i),(0,F.d)(i,e),(0,S.D)(i),(0,E.J)(i,e),(0,L.I)(i,e),(0,z.s)(i),i},wn=o(38041),un=o(94239),mn=o(27016),hn=o(24246),gn="MTU5NjMxOTIwMDAwMA==",fn=t.forwardRef((function(n,e){var o=(0,wn.d)(n),t=cn(o.apiRef,o);return(0,a.O)("x-data-grid-pro",gn),(0,hn.jsx)(s.d,{apiRef:t,props:o,children:(0,hn.jsx)(r.n,{className:o.className,style:o.style,sx:o.sx,ref:e,children:(0,hn.jsxs)(d.C,{children:[(0,hn.jsx)(l.f,{}),(0,hn.jsx)(p.U,{ColumnHeadersComponent:mn.r,VirtualScrollerComponent:un.X,children:(0,hn.jsx)(i.l,{packageName:"x-data-grid-pro",releaseInfo:gn})}),(0,hn.jsx)(c.B,{})]})})})})),Rn=t.memo(fn)},29966:function(n,e,o){"use strict";o.d(e,{u:function(){return c}});var t=o(95649),a=o(81936),i=o(27378),s=o(7687),r=o(50577),d=o(20518),l=o(24246),p=["label","icon","showInMenu","onClick"],c=i.forwardRef((function(n,e){var o=n.label,c=n.icon,w=n.showInMenu,u=n.onClick,m=(0,a.Z)(n,p);return w?(0,l.jsxs)(r.Z,(0,t.Z)((0,t.Z)({ref:e},m),{},{onClick:u,children:[c&&(0,l.jsx)(d.Z,{children:c}),o]})):(0,l.jsx)(s.Z,(0,t.Z)((0,t.Z)({ref:e,size:"small",role:"menuitem","aria-label":o},m),{},{onClick:function(n){u&&u(n)},children:i.cloneElement(c,{fontSize:"small"})}))}))},19948:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/x/react-data-grid/row-pinning",function(){return o(11173)}])}},function(n){n.O(0,[7178,6047,6767,9332,5312,3397,5699,9007,3783,8496,6352,9774,2888,179],(function(){return e=19948,n(n.s=e);var e}));var e=n.O();_N_E=e}]);