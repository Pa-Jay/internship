(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2696],{52518:function(n,e,t){"use strict";t.d(e,{Z:function(){return f}});var r=t(23315),a=t(27378),o=t(20922),i=t(269),d=t(29277),s=t(80252),l=t(78153),c=t(26582),u=t(43783),p=t(24246);function m(n){var e=n.row;return(0,p.jsx)(l.Z,{sx:{py:2,height:"100%",boxSizing:"border-box"},direction:"column",children:(0,p.jsx)(s.Z,{sx:{flex:1,mx:"auto",width:"90%",p:1},children:(0,p.jsxs)(l.Z,{direction:"column",spacing:1,sx:{height:1},children:[(0,p.jsx)(d.Z,{variant:"h6",children:"Order #".concat(e.id)}),(0,p.jsxs)(i.ZP,{container:!0,children:[(0,p.jsxs)(i.ZP,{item:!0,md:6,children:[(0,p.jsx)(d.Z,{variant:"body2",color:"textSecondary",children:"Customer information"}),(0,p.jsx)(d.Z,{variant:"body1",children:e.customer}),(0,p.jsx)(d.Z,{variant:"body1",children:e.email})]}),(0,p.jsxs)(i.ZP,{item:!0,md:6,children:[(0,p.jsx)(d.Z,{variant:"body2",align:"right",color:"textSecondary",children:"Shipping address"}),(0,p.jsx)(d.Z,{variant:"body1",align:"right",children:e.address}),(0,p.jsx)(d.Z,{variant:"body1",align:"right",children:"".concat(e.city,", ").concat(e.country.label)})]})]}),(0,p.jsx)(c.s,{density:"compact",columns:[{field:"name",headerName:"Product",flex:1},{field:"quantity",headerName:"Quantity",align:"center",type:"number"},{field:"unitPrice",headerName:"Unit Price",type:"number"},{field:"total",headerName:"Total",type:"number",valueGetter:function(n){var e=n.row;return e.quantity*e.unitPrice}}],rows:e.products,sx:{flex:1},hideFooter:!0})]})})})}var g=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"date",type:"date",headerName:"Placed at"},{field:"currency",headerName:"Currency"},{field:"total",type:"number",headerName:"Total",valueGetter:function(n){var e=n.row.products.reduce((function(n,e){return e.unitPrice*e.quantity}),0);return e+.05*e}}];function h(){var n=(0,u.Iy)(1,5);return(0,r.Z)(Array(n)).map((function(n,e){return{id:e,name:(0,u.GV)(),quantity:(0,u.Iy)(1,5),unitPrice:(0,u.pt)(1,1e3)}}))}var y=[{id:1,customer:"Matheus",email:(0,u.FU)(),date:(0,u.vx)(),address:(0,u.D8)(),country:(0,u.nC)(),city:(0,u.JD)(),currency:(0,u.yU)(),products:h()},{id:2,customer:"Olivier",email:(0,u.FU)(),date:(0,u.vx)(),address:(0,u.D8)(),country:(0,u.nC)(),city:(0,u.JD)(),currency:(0,u.yU)(),products:h()},{id:3,customer:"Flavien",email:(0,u.FU)(),date:(0,u.vx)(),address:(0,u.D8)(),country:(0,u.nC)(),city:(0,u.JD)(),currency:(0,u.yU)(),products:h()},{id:4,customer:"Danail",email:(0,u.FU)(),date:(0,u.vx)(),address:(0,u.D8)(),country:(0,u.nC)(),city:(0,u.JD)(),currency:(0,u.yU)(),products:h()},{id:5,customer:"Alexandre",email:(0,u.FU)(),date:(0,u.vx)(),address:(0,u.D8)(),country:(0,u.nC)(),city:(0,u.JD)(),currency:(0,u.yU)(),products:h()}];function f(){var n=a.useCallback((function(n){var e=n.row;return(0,p.jsx)(m,{row:e})}),[]),e=a.useCallback((function(){return 400}),[]);return(0,p.jsx)(o.Z,{sx:{width:"100%",height:400},children:(0,p.jsx)(c.s,{columns:g,rows:y,rowThreshold:0,getDetailPanelHeight:e,getDetailPanelContent:n})})}},71159:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return X}});var r=t(27378),a=t(86767),o=t(52518),i=t(23315),d=t(95649),s=t(20922),l=t(15830),c=t(269),u=t(29277),p=t(80252),m=t(78153),g=t(16655),h=t(82832),y=t(29966),f=t(26582),C=t(43783),w=t(24246);function P(){return{id:(0,C.kb)(),name:(0,C.GV)(),quantity:(0,C.Iy)(1,5),unitPrice:(0,C.pt)(1,1e3)}}function D(n){var e=n.row,t=(0,h.l)(),a=r.useCallback((function(){var n=P();t.current.updateRows([(0,d.Z)((0,d.Z)({},e),{},{products:[].concat((0,i.Z)(e.products),[n])})])}),[t,e]),o=r.useCallback((function(n){return function(){var r=e.products.filter((function(e){return e.id!==n}));t.current.updateRows([(0,d.Z)((0,d.Z)({},e),{},{products:r})])}}),[t,e]),C=r.useMemo((function(){return[{field:"name",headerName:"Product",flex:1,editable:!0},{field:"quantity",headerName:"Quantity",align:"center",headerAlign:"center",type:"number",editable:!0},{field:"unitPrice",headerName:"Unit Price",type:"number"},{field:"total",headerName:"Total",type:"number",valueGetter:function(n){var e=n.row;return e.quantity*e.unitPrice}},{field:"actions",headerName:"",type:"actions",width:50,getActions:function(n){var e=n.row;return[(0,w.jsx)(y.u,{icon:(0,w.jsx)(g.Z,{}),label:"delete",onClick:o(e.id)})]}}]}),[o]);return(0,w.jsx)(m.Z,{sx:{py:2,height:1,boxSizing:"border-box"},direction:"column",children:(0,w.jsx)(p.Z,{sx:{flex:1,mx:"auto",width:"90%",p:1},children:(0,w.jsxs)(m.Z,{direction:"column",spacing:1,sx:{height:1},children:[(0,w.jsx)(u.Z,{variant:"h6",children:"Order #".concat(e.id)}),(0,w.jsxs)(c.ZP,{container:!0,children:[(0,w.jsxs)(c.ZP,{item:!0,md:6,children:[(0,w.jsx)(u.Z,{variant:"body2",color:"textSecondary",children:"Customer information"}),(0,w.jsx)(u.Z,{variant:"body1",children:e.customer}),(0,w.jsx)(u.Z,{variant:"body1",children:e.email})]}),(0,w.jsxs)(c.ZP,{item:!0,md:6,children:[(0,w.jsx)(u.Z,{variant:"body2",align:"right",color:"textSecondary",children:"Shipping address"}),(0,w.jsx)(u.Z,{variant:"body1",align:"right",children:e.address}),(0,w.jsx)(u.Z,{variant:"body1",align:"right",children:"".concat(e.city,", ").concat(e.country.label)})]})]}),(0,w.jsx)(s.Z,{children:(0,w.jsx)(l.Z,{variant:"outlined",size:"small",onClick:a,children:"Add Product"})}),(0,w.jsx)(f.s,{density:"compact",autoHeight:!0,columns:C,rows:e.products,sx:{flex:1},hideFooter:!0})]})})})}var x=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"date",type:"date",headerName:"Placed at"},{field:"currency",headerName:"Currency"},{field:"total",type:"number",headerName:"Total",valueGetter:function(n){var e=n.row.products.reduce((function(n,e){return e.unitPrice*e.quantity}),0);return e+.05*e}}];function S(){var n=(0,C.Iy)(1,5);return(0,i.Z)(Array(n)).map(P)}var b=[{id:1,customer:"Matheus",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:S()},{id:2,customer:"Olivier",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:S()},{id:3,customer:"Flavien",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:S()},{id:4,customer:"Danail",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:S()},{id:5,customer:"Alexandre",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:S()}];var k=t(25778),R=t(10282),E=t.n(R),v=t(60743);var G=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"date",type:"date",headerName:"Placed at"},{field:"currency",headerName:"Currency"},{field:"total",type:"number",headerName:"Total"}],I=[{id:1,customer:"Matheus",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:2,customer:"Olivier",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:3,customer:"Flavien",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:4,customer:"Danail",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:5,customer:"Alexandre",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)}],T=t(35254),L=t(88039);function _(n){var e=n.row,t=(0,h.l)(),r=(0,L.cI)({defaultValues:e,mode:"onChange"}),a=r.control,o=r.handleSubmit,i=r.formState.isValid;return(0,w.jsx)(m.Z,{sx:{py:2,height:"100%",boxSizing:"border-box"},direction:"column",children:(0,w.jsx)(p.Z,{sx:{flex:1,mx:"auto",width:"90%",p:1},children:(0,w.jsxs)(m.Z,{component:"form",justifyContent:"space-between",onSubmit:o((function(n){t.current.updateRows([n]),t.current.toggleDetailPanel(e.id)})),sx:{height:1},children:[(0,w.jsx)(u.Z,{variant:"h6",children:"Edit Order #".concat(e.id)}),(0,w.jsx)(L.Qr,{control:a,name:"customer",rules:{required:!0},render:function(n){var e=n.field,t=n.fieldState.invalid;return(0,w.jsx)(T.Z,(0,d.Z)({label:"Customer",size:"small",error:t,required:!0,fullWidth:!0},e))}}),(0,w.jsx)(L.Qr,{control:a,name:"email",rules:{required:!0},render:function(n){var e=n.field,t=n.fieldState.invalid;return(0,w.jsx)(T.Z,(0,d.Z)({label:"Email",size:"small",error:t,required:!0,fullWidth:!0},e))}}),(0,w.jsx)("div",{children:(0,w.jsx)(l.Z,{type:"submit",variant:"outlined",size:"small",disabled:!i,children:"Save"})})]})})})}var A=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"email",headerName:"Email",width:200}],N=[{id:1,customer:"Matheus",email:(0,C.FU)()},{id:2,customer:"Olivier",email:(0,C.FU)()},{id:3,customer:"Flavien",email:(0,C.FU)()},{id:4,customer:"Danail",email:(0,C.FU)()},{id:5,customer:"Alexandre",email:(0,C.FU)()}];var F=t(7687),O=t(5805),j=t(73259),M=t(59404);function V(n){var e=n.id,t=n.value,a=(0,h.l)(),o=(0,j.P)(a,M.gridDetailPanelExpandedRowsContentCacheSelector),i=r.isValidElement(o[e]);return(0,w.jsx)(F.Z,{size:"small",tabIndex:-1,disabled:!i,"aria-label":t?"Close":"Open",children:(0,w.jsx)(O.Z,{sx:{transform:"rotateZ(".concat(t?180:0,"deg)"),transition:function(n){return n.transitions.create("transform",{duration:n.transitions.duration.shortest})}},fontSize:"inherit"})})}var Z=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"date",type:"date",headerName:"Placed at"},{field:"currency",headerName:"Currency"},{field:"total",type:"number",headerName:"Total"},(0,d.Z)((0,d.Z)({},M.GRID_DETAIL_PANEL_TOGGLE_COL_DEF),{},{renderCell:function(n){return(0,w.jsx)(V,{id:n.id,value:n.value})}})],B=[{id:1,customer:"Matheus",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:2,customer:"Olivier",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:3,customer:"Flavien",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:4,customer:"Danail",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)},{id:5,customer:"Alexandre",email:(0,C.FU)(),date:(0,C.vx)(),currency:(0,C.yU)(),total:(0,C.pt)(1,1e3)}];function z(n){var e=n.row,t=(0,h.l)(),a=r.useState((function(){return t.current.getRootDimensions().viewportInnerSize.width})),o=(0,k.Z)(a,2),i=o[0],d=o[1],s=r.useCallback((function(){var n=t.current.getRootDimensions();d(n.viewportInnerSize.width)}),[t]);return r.useEffect((function(){return t.current.subscribeEvent("viewportInnerSizeChange",s)}),[t,s]),(0,w.jsx)(m.Z,{sx:{py:2,height:"100%",boxSizing:"border-box",position:"sticky",left:0,width:i},direction:"column",children:(0,w.jsx)(p.Z,{sx:{flex:1,mx:"auto",width:"90%",p:1},children:(0,w.jsxs)(m.Z,{direction:"column",spacing:1,sx:{height:1},children:[(0,w.jsx)(u.Z,{variant:"h6",children:"Order #".concat(e.id)}),(0,w.jsx)(f.s,{density:"compact",columns:[{field:"name",headerName:"Product",flex:1},{field:"quantity",headerName:"Quantity",align:"center",type:"number"},{field:"unitPrice",headerName:"Unit Price",type:"number"},{field:"total",headerName:"Total",type:"number",valueGetter:function(n){var e=n.row;return e.quantity*e.unitPrice}}],rows:e.products,sx:{flex:1},hideFooter:!0})]})})})}var U=[{field:"id",headerName:"Order ID"},{field:"customer",headerName:"Customer",width:200},{field:"email",headerName:"Email"},{field:"date",type:"date",headerName:"Placed at"},{field:"currency",headerName:"Currency"},{field:"address",headerName:"Address"},{field:"city",headerName:"City",valueGetter:function(n){var e=n.row;return"".concat(e.city,", ").concat(e.country.label)}},{field:"total",type:"number",headerName:"Total",valueGetter:function(n){var e=n.row.products.reduce((function(n,e){return e.unitPrice*e.quantity}),0);return e+.05*e}}];function q(){var n=(0,C.Iy)(1,5);return(0,i.Z)(Array(n)).map((function(n,e){return{id:e,name:(0,C.GV)(),quantity:(0,C.Iy)(1,5),unitPrice:(0,C.pt)(1,1e3)}}))}var H=[{id:1,customer:"Matheus",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()},{id:2,customer:"Olivier",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()},{id:3,customer:"Flavien",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()},{id:4,customer:"Danail",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()},{id:5,customer:"Alexandre",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()},{id:6,customer:"Jos\xe9",email:(0,C.FU)(),date:(0,C.vx)(),address:(0,C.D8)(),country:(0,C.nC)(),city:(0,C.JD)(),currency:(0,C.yU)(),products:q()}];var $=t(36546),J=JSON.parse('{"name":"GridDetailPanelApi","description":"The master/detail API interface that is available in the grid apiRef.","properties":[{"name":"getExpandedDetailPanels","description":"Returns the rows whose detail panel is open.","type":"() => GridRowId[]"},{"name":"setExpandedDetailPanels","description":"Changes which rows to expand the detail panel.","type":"(ids: GridRowId[]) => void"},{"name":"toggleDetailPanel","description":"Expands or collapses the detail panel of a row.","type":"(id: GridRowId) => void"}]}');const W={en:{description:"Expand your rows to display additional information.",location:"/docs/data/data-grid/master-detail/master-detail.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Data grid - Master detail <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a></h1><p class="description">Expand your rows to display additional information.</p>\n\n<p>The master detail feature allows expanding a row to display additional information inside a panel.\nTo use this feature, pass a function to the <code>getDetailPanelContent</code> prop with the content to be rendered inside the panel.\nAny valid React element can be used as the row detail, even another grid.</p>\n<p>By default, the detail panel height is 500px.\nYou can customize it by passing a function to the <code>getDetailPanelHeight</code> prop.\nThis function must return either a number or the <code>&quot;auto&quot;</code> string.\nIf it returns a number, then the panel will use that value (in pixels) for the height.\nIf it returns <code>&quot;auto&quot;</code>, then the height will be <a href="#infer-height-from-the-content">derived</a> from the content.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span>\n  <span class="token attr-name">getDetailPanelContent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Row <span class="token constant">ID</span><span class="token operator">:</span> <span class="token punctuation">{</span>row<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">getDetailPanelHeight</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">100</span><span class="token punctuation">}</span></span> <span class="token comment">// Optional, default is 500px.</span>\n<span class="token punctuation">/></span></span>\n\n<span class="token comment">// or</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span>\n  <span class="token attr-name">getDetailPanelContent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Row <span class="token constant">ID</span><span class="token operator">:</span> <span class="token punctuation">{</span>row<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span>\n  <span class="token attr-name">getDetailPanelHeight</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'auto\'</span><span class="token punctuation">}</span></span> <span class="token comment">// Height based on the content.</span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<aside class="MuiCallout-root MuiCallout-info"><p>Both props are called with a <a href="/x/api/data-grid/grid-row-params/"><code>GridRowParams</code></a> object, which lets you return a different value for each row.</p>\n\n</aside><p>To expand a row, click on the <strong>+</strong> icon or press <kbd class="key">Space</kbd> inside the detail toggle column.\nReturning <code>null</code> or <code>undefined</code> as the value of <code>getDetailPanelContent</code> will prevent the respective row from being expanded.</p>\n',{demo:"BasicDetailPanels.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-warning"><p>Always memoize the function provided to <code>getDetailPanelContent</code> and <code>getDetailPanelHeight</code>.\nThe grid depends on the referential value of these props to cache their values and optimize the rendering.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> getDetailPanelContent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">getDetailPanelContent</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getDetailPanelContent<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Depending on the height of the detail panel, you may see a blank space when scrolling.\nThis is caused by the grid using a lazy approach to update the rendered rows.\nSet <code>rowThreshold</code> to 0 to force new rows to be rendered more often to fill the blank space.\nNote that this may reduce the performance.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">rowThreshold</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n\n</aside><h2 id="infer-height-from-the-content">Infer height from the content<a aria-labelledby="infer-height-from-the-content" class="anchor-link-style" href="#infer-height-from-the-content" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Like <a href="/x/react-data-grid/row-height/#dynamic-row-height">dynamic row height</a>, you can also derive the detail panel height from its content.\nFor this, pass a function to the <code>getDetailPanelHeight</code> prop returning <code>&quot;auto&quot;</code>, as below:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">getDetailPanelHeight</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">\'auto\'</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The following example demonstrates this option in action:</p>\n',{demo:"DetailPanelAutoHeight.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="controlling-expanded-detail-panels">Controlling expanded detail panels<a aria-labelledby="controlling-expanded-detail-panels" class="anchor-link-style" href="#controlling-expanded-detail-panels" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>To control which rows are expanded, pass a list of row IDs to the <code>detailPanelExpandedRowIds</code> prop.\nPassing a callback to the <code>onDetailPanelExpandedRowIds</code> prop can be used to detect when a row gets expanded or collapsed.</p>\n<p>On the other hand, if you only want to initialize the grid with some rows already expanded, use the <code>initialState</code> prop as follows:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">initialState</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> detailPanel<span class="token operator">:</span> <span class="token punctuation">{</span> expandedRowIds<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n',{demo:"ControlMasterDetail.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="using-a-detail-panel-as-a-form">Using a detail panel as a form<a aria-labelledby="using-a-detail-panel-as-a-form" class="anchor-link-style" href="#using-a-detail-panel-as-a-form" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>As an alternative to the built-in <a href="/x/react-data-grid/editing/#row-editing">row editing</a>, a form component can be rendered inside the detail panel, allowing the user to edit the current row values.</p>\n<p>The following demo shows integration with <a href="https://react-hook-form.com/">react-hook-form</a>, but other form libraries are also supported.</p>\n',{demo:"FormDetailPanel.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="customizing-the-detail-panel-toggle">Customizing the detail panel toggle<a aria-labelledby="customizing-the-detail-panel-toggle" class="anchor-link-style" href="#customizing-the-detail-panel-toggle" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>To change the icon used for the toggle, you can provide a different component for the <a href="/x/react-data-grid/components/#icons">icon slot</a> as follow:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span>\n  <span class="token attr-name">components</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    DetailPanelExpandIcon<span class="token operator">:</span> CustomExpandIcon<span class="token punctuation">,</span>\n    DetailPanelCollapseIcon<span class="token operator">:</span> CustomCollapseIcon<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>If this is not sufficient, the entire toggle component can be overridden.\nTo fully customize it, add another column with <code>field: GRID_DETAIL_PANEL_TOGGLE_FIELD</code> to your set of columns.\nThe grid will detect that there is already a toggle column defined and it will not add another toggle in the default position.\nThe new toggle component can be provided via <a href="/x/react-data-grid/column-definition/#rendering-cells"><code>renderCell</code></a> in the same as any other column.\nBy only setting the <code>field</code>, is up to you to configure the remaining options (e.g. disable the column menu, filtering, sorting).\nTo already start with a few suggested options configured, spread <code>GRID_DETAIL_PANEL_TOGGLE_COL_DEF</code> when defining the column.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span>\n  <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      field<span class="token operator">:</span> <span class="token constant">GRID_DETAIL_PANEL_TOGGLE_FIELD</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">renderCell</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomDetailPanelToggle</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token comment">// or</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span>\n  <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token constant">GRID_DETAIL_PANEL_TOGGLE_COL_DEF</span><span class="token punctuation">,</span> <span class="token comment">// Already contains the right field</span>\n      <span class="token function-variable function">renderCell</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomDetailPanelToggle</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>This approach can also be used to change the location of the toggle column, as shown below.</p>\n',{demo:"CustomizeDetailPanelToggle.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-info"><p>As any ordinary cell renderer, the <code>value</code> prop is also available, and it corresponds to the state of the row: <code>true</code> when expanded and <code>false</code> when collapsed.</p>\n\n</aside><h2 id="disable-detail-panel-content-scroll">Disable detail panel content scroll<a aria-labelledby="disable-detail-panel-content-scroll" class="anchor-link-style" href="#disable-detail-panel-content-scroll" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>By default, the detail panel has a width that is the sum of the widths of all columns.\nThis means that when a horizontal scrollbar is present, scrolling it will also scroll the panel content.\nTo avoid this behavior, set the size of the detail panel to the outer size of the grid.\nUse <code>apiRef.current.getRootDimensions()</code> to get the latest dimension values.\nFinally, to prevent the panel from scrolling, set <code>position: sticky</code> and <code>left: 0</code>.</p>\n<p>The following demo shows how this can be achieved.\nNotice that the toggle column is pinned to make sure that it will always be visible when the grid is scrolled horizontally.</p>\n',{demo:"FullWidthDetailPanel.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="apiref">apiRef<a aria-labelledby="apiref" class="anchor-link-style" href="#apiref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"DetailPanelApiNoSnap.js",bg:"inline",hideToolbar:!0},'<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/x/api/data-grid/data-grid/">DataGrid</a></li>\n<li><a href="/x/api/data-grid/data-grid-pro/">DataGridPro</a></li>\n<li><a href="/x/api/data-grid/data-grid-premium/">DataGridPremium</a></li>\n</ul>\n'],toc:[{text:"Infer height from the content",level:2,hash:"infer-height-from-the-content",children:[]},{text:"Controlling expanded detail panels",level:2,hash:"controlling-expanded-detail-panels",children:[]},{text:"Using a detail panel as a form",level:2,hash:"using-a-detail-panel-as-a-form",children:[]},{text:"Customizing the detail panel toggle",level:2,hash:"customizing-the-detail-panel-toggle",children:[]},{text:"Disable detail panel content scroll",level:2,hash:"disable-detail-panel-content-scroll",children:[]},{text:"apiRef",level:2,hash:"apiref",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Data Grid - Master detail",headers:{title:"Data Grid - Master detail",components:[]}}},Q={"BasicDetailPanels.js":{module:"./BasicDetailPanels.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row: rowProp }) {\n  return (\n    <Stack\n      sx={{ py: 2, height: '100%', boxSizing: 'border-box' }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <Grid container>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Customer information\n              </Typography>\n              <Typography variant=\"body1\">{rowProp.customer}</Typography>\n              <Typography variant=\"body1\">{rowProp.email}</Typography>\n            </Grid>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\n                Shipping address\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {rowProp.address}\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {`${rowProp.city}, ${rowProp.country.label}`}\n              </Typography>\n            </Grid>\n          </Grid>\n          <DataGridPro\n            density=\"compact\"\n            columns={[\n              { field: 'name', headerName: 'Product', flex: 1 },\n              {\n                field: 'quantity',\n                headerName: 'Quantity',\n                align: 'center',\n                type: 'number',\n              },\n              { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n              {\n                field: 'total',\n                headerName: 'Total',\n                type: 'number',\n                valueGetter: ({ row }) => row.quantity * row.unitPrice,\n              },\n            ]}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nDetailPanelContent.propTypes = {\n  row: PropTypes.object.isRequired,\n};\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc, product) => product.unitPrice * product.quantity,\n        0,\n      );\n\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map((_, index) => ({\n    id: index,\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  }));\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\nexport default function BasicDetailPanels() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 400, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  rows={rows}\n  rowThreshold={0}\n  getDetailPanelHeight={getDetailPanelHeight}\n  getDetailPanelContent={getDetailPanelContent}\n/>",moduleTS:"./BasicDetailPanels.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport { DataGridPro, DataGridProProps, GridColumns } from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row: rowProp }: { row: Customer }) {\n  return (\n    <Stack\n      sx={{ py: 2, height: '100%', boxSizing: 'border-box' }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <Grid container>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Customer information\n              </Typography>\n              <Typography variant=\"body1\">{rowProp.customer}</Typography>\n              <Typography variant=\"body1\">{rowProp.email}</Typography>\n            </Grid>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\n                Shipping address\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {rowProp.address}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                align=\"right\"\n              >{`${rowProp.city}, ${rowProp.country.label}`}</Typography>\n            </Grid>\n          </Grid>\n          <DataGridPro\n            density=\"compact\"\n            columns={[\n              { field: 'name', headerName: 'Product', flex: 1 },\n              {\n                field: 'quantity',\n                headerName: 'Quantity',\n                align: 'center',\n                type: 'number',\n              },\n              { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n              {\n                field: 'total',\n                headerName: 'Total',\n                type: 'number',\n                valueGetter: ({ row }) => row.quantity * row.unitPrice,\n              },\n            ]}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc: number, product: any) => product.unitPrice * product.quantity,\n        0,\n      );\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map((_, index) => ({\n    id: index,\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  }));\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\ntype Customer = typeof rows[number];\n\nexport default function BasicDetailPanels() {\n  const getDetailPanelContent = React.useCallback<\n    NonNullable<DataGridProProps['getDetailPanelContent']>\n  >(({ row }) => <DetailPanelContent row={row} />, []);\n\n  const getDetailPanelHeight = React.useCallback(() => 400, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n"},"DetailPanelAutoHeight.js":{module:"./DetailPanelAutoHeight.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n  DataGridPro,\n  useGridApiContext,\n  GridActionsCellItem,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomId,\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction generateProduct() {\n  return {\n    id: randomId(),\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  };\n}\n\nfunction DetailPanelContent({ row: rowProp }) {\n  const apiRef = useGridApiContext();\n\n  const addProduct = React.useCallback(() => {\n    const newProduct = generateProduct();\n    apiRef.current.updateRows([\n      { ...rowProp, products: [...rowProp.products, newProduct] },\n    ]);\n  }, [apiRef, rowProp]);\n\n  const deleteProduct = React.useCallback(\n    (productId) => () => {\n      const newProducts = rowProp.products.filter(\n        (product) => product.id !== productId,\n      );\n\n      apiRef.current.updateRows([{ ...rowProp, products: newProducts }]);\n    },\n    [apiRef, rowProp],\n  );\n\n  const columns = React.useMemo(\n    () => [\n      { field: 'name', headerName: 'Product', flex: 1, editable: true },\n      {\n        field: 'quantity',\n        headerName: 'Quantity',\n        align: 'center',\n        headerAlign: 'center',\n        type: 'number',\n        editable: true,\n      },\n      { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n      {\n        field: 'total',\n        headerName: 'Total',\n        type: 'number',\n        valueGetter: ({ row }) => row.quantity * row.unitPrice,\n      },\n      {\n        field: 'actions',\n        headerName: '',\n        type: 'actions',\n        width: 50,\n        getActions: ({ row }) => [\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"delete\"\n            onClick={deleteProduct(row.id)}\n          />,\n        ],\n      },\n    ],\n    [deleteProduct],\n  );\n\n  return (\n    <Stack sx={{ py: 2, height: 1, boxSizing: 'border-box' }} direction=\"column\">\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <Grid container>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Customer information\n              </Typography>\n              <Typography variant=\"body1\">{rowProp.customer}</Typography>\n              <Typography variant=\"body1\">{rowProp.email}</Typography>\n            </Grid>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\n                Shipping address\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {rowProp.address}\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {`${rowProp.city}, ${rowProp.country.label}`}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Box>\n            <Button variant=\"outlined\" size=\"small\" onClick={addProduct}>\n              Add Product\n            </Button>\n          </Box>\n          <DataGridPro\n            density=\"compact\"\n            autoHeight\n            columns={columns}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nDetailPanelContent.propTypes = {\n  row: PropTypes.object.isRequired,\n};\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc, product) => product.unitPrice * product.quantity,\n        0,\n      );\n\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map(generateProduct);\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\nexport default function DetailPanelAutoHeight() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 'auto', []);\n\n  return (\n    <Box sx={{ width: 1, height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  rows={rows}\n  rowThreshold={0}\n  getDetailPanelHeight={getDetailPanelHeight}\n  getDetailPanelContent={getDetailPanelContent}\n/>",moduleTS:"./DetailPanelAutoHeight.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n  DataGridPro,\n  GridColumns,\n  DataGridProProps,\n  useGridApiContext,\n  GridActionsCellItem,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomId,\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction generateProduct() {\n  return {\n    id: randomId(),\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  };\n}\n\nfunction DetailPanelContent({ row: rowProp }: { row: Customer }) {\n  const apiRef = useGridApiContext();\n\n  const addProduct = React.useCallback(() => {\n    const newProduct = generateProduct();\n    apiRef.current.updateRows([\n      { ...rowProp, products: [...rowProp.products, newProduct] },\n    ]);\n  }, [apiRef, rowProp]);\n\n  const deleteProduct = React.useCallback(\n    (productId: string) => () => {\n      const newProducts = rowProp.products.filter(\n        (product) => product.id !== productId,\n      );\n      apiRef.current.updateRows([{ ...rowProp, products: newProducts }]);\n    },\n    [apiRef, rowProp],\n  );\n\n  const columns = React.useMemo<GridColumns>(\n    () => [\n      { field: 'name', headerName: 'Product', flex: 1, editable: true },\n      {\n        field: 'quantity',\n        headerName: 'Quantity',\n        align: 'center',\n        headerAlign: 'center',\n        type: 'number',\n        editable: true,\n      },\n      { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n      {\n        field: 'total',\n        headerName: 'Total',\n        type: 'number',\n        valueGetter: ({ row }) => row.quantity * row.unitPrice,\n      },\n      {\n        field: 'actions',\n        headerName: '',\n        type: 'actions',\n        width: 50,\n        getActions: ({ row }) => [\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"delete\"\n            onClick={deleteProduct(row.id)}\n          />,\n        ],\n      },\n    ],\n    [deleteProduct],\n  );\n\n  return (\n    <Stack sx={{ py: 2, height: 1, boxSizing: 'border-box' }} direction=\"column\">\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <Grid container>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Customer information\n              </Typography>\n              <Typography variant=\"body1\">{rowProp.customer}</Typography>\n              <Typography variant=\"body1\">{rowProp.email}</Typography>\n            </Grid>\n            <Grid item md={6}>\n              <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\n                Shipping address\n              </Typography>\n              <Typography variant=\"body1\" align=\"right\">\n                {rowProp.address}\n              </Typography>\n              <Typography\n                variant=\"body1\"\n                align=\"right\"\n              >{`${rowProp.city}, ${rowProp.country.label}`}</Typography>\n            </Grid>\n          </Grid>\n          <Box>\n            <Button variant=\"outlined\" size=\"small\" onClick={addProduct}>\n              Add Product\n            </Button>\n          </Box>\n          <DataGridPro\n            density=\"compact\"\n            autoHeight\n            columns={columns}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc: number, product: any) => product.unitPrice * product.quantity,\n        0,\n      );\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map(generateProduct);\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\ntype Customer = typeof rows[number];\n\nexport default function DetailPanelAutoHeight() {\n  const getDetailPanelContent = React.useCallback<\n    NonNullable<DataGridProProps['getDetailPanelContent']>\n  >(({ row }) => <DetailPanelContent row={row} />, []);\n\n  const getDetailPanelHeight = React.useCallback<\n    NonNullable<DataGridProProps['getDetailPanelHeight']>\n  >(() => 'auto' as const, []);\n\n  return (\n    <Box sx={{ width: 1, height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n"},"ControlMasterDetail.js":{module:"./ControlMasterDetail.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomCurrency,\n  randomEmail,\n  randomPrice,\n} from '@mui/x-data-grid-generator';\nimport Alert from '@mui/material/Alert';\n\nexport default function ControlMasterDetail() {\n  const [detailPanelExpandedRowIds, setDetailPanelExpandedRowIds] = React.useState(\n    [],\n  );\n\n  const handleDetailPanelExpandedRowIdsChange = React.useCallback((newIds) => {\n    setDetailPanelExpandedRowIds(newIds);\n  }, []);\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Alert severity=\"info\">\n        <code>\n          detailPanelExpandedRowIds: {JSON.stringify(detailPanelExpandedRowIds)}\n        </code>\n      </Alert>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGridPro\n          rows={rows}\n          columns={columns}\n          rowThreshold={0}\n          getDetailPanelContent={({ row }) => (\n            <Box sx={{ p: 2 }}>{`Order #${row.id}`}</Box>\n          )}\n          getDetailPanelHeight={() => 50}\n          detailPanelExpandedRowIds={detailPanelExpandedRowIds}\n          onDetailPanelExpandedRowIdsChange={handleDetailPanelExpandedRowIdsChange}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'total', type: 'number', headerName: 'Total' },\n];\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n];\n",moduleTS:"./ControlMasterDetail.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport {\n  DataGridPro,\n  GridColumns,\n  GridRowsProp,\n  GridRowId,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomCurrency,\n  randomEmail,\n  randomPrice,\n} from '@mui/x-data-grid-generator';\nimport Alert from '@mui/material/Alert';\n\nexport default function ControlMasterDetail() {\n  const [detailPanelExpandedRowIds, setDetailPanelExpandedRowIds] = React.useState<\n    GridRowId[]\n  >([]);\n\n  const handleDetailPanelExpandedRowIdsChange = React.useCallback(\n    (newIds: GridRowId[]) => {\n      setDetailPanelExpandedRowIds(newIds);\n    },\n    [],\n  );\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Alert severity=\"info\">\n        <code>\n          detailPanelExpandedRowIds: {JSON.stringify(detailPanelExpandedRowIds)}\n        </code>\n      </Alert>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGridPro\n          rows={rows}\n          columns={columns}\n          rowThreshold={0}\n          getDetailPanelContent={({ row }) => (\n            <Box sx={{ p: 2 }}>{`Order #${row.id}`}</Box>\n          )}\n          getDetailPanelHeight={() => 50}\n          detailPanelExpandedRowIds={detailPanelExpandedRowIds}\n          onDetailPanelExpandedRowIdsChange={handleDetailPanelExpandedRowIdsChange}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'total', type: 'number', headerName: 'Total' },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n];\n"},"FormDetailPanel.js":{module:"./FormDetailPanel.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { useForm, Controller } from 'react-hook-form';\nimport { DataGridPro, useGridApiContext } from '@mui/x-data-grid-pro';\nimport { randomEmail } from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row }) {\n  const apiRef = useGridApiContext();\n  const {\n    control,\n    handleSubmit,\n    formState: { isValid },\n  } = useForm({\n    defaultValues: row,\n    mode: 'onChange',\n  });\n\n  const onSubmit = (data) => {\n    apiRef.current.updateRows([data]);\n    apiRef.current.toggleDetailPanel(row.id);\n  };\n\n  return (\n    <Stack\n      sx={{ py: 2, height: '100%', boxSizing: 'border-box' }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack\n          component=\"form\"\n          justifyContent=\"space-between\"\n          onSubmit={handleSubmit(onSubmit)}\n          sx={{ height: 1 }}\n        >\n          <Typography variant=\"h6\">{`Edit Order #${row.id}`}</Typography>\n          <Controller\n            control={control}\n            name=\"customer\"\n            rules={{ required: true }}\n            render={({ field, fieldState: { invalid } }) => (\n              <TextField\n                label=\"Customer\"\n                size=\"small\"\n                error={invalid}\n                required\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            control={control}\n            name=\"email\"\n            rules={{ required: true }}\n            render={({ field, fieldState: { invalid } }) => (\n              <TextField\n                label=\"Email\"\n                size=\"small\"\n                error={invalid}\n                required\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <div>\n            <Button\n              type=\"submit\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled={!isValid}\n            >\n              Save\n            </Button>\n          </div>\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nDetailPanelContent.propTypes = {\n  row: PropTypes.object.isRequired,\n};\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'email', headerName: 'Email', width: 200 },\n];\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n  },\n];\n\nexport default function FormDetailPanel() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 240, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  rows={rows}\n  rowThreshold={0}\n  getDetailPanelHeight={getDetailPanelHeight}\n  getDetailPanelContent={getDetailPanelContent}\n/>",moduleTS:"./FormDetailPanel.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  DataGridPro,\n  GridColumns,\n  GridRowModelUpdate,\n  useGridApiContext,\n  GridRowParams,\n} from '@mui/x-data-grid-pro';\nimport { randomEmail } from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row }: { row: Customer }) {\n  const apiRef = useGridApiContext();\n  const {\n    control,\n    handleSubmit,\n    formState: { isValid },\n  } = useForm({\n    defaultValues: row,\n    mode: 'onChange',\n  });\n\n  const onSubmit = (data: GridRowModelUpdate) => {\n    apiRef.current.updateRows([data]);\n    apiRef.current.toggleDetailPanel(row.id);\n  };\n\n  return (\n    <Stack\n      sx={{ py: 2, height: '100%', boxSizing: 'border-box' }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack\n          component=\"form\"\n          justifyContent=\"space-between\"\n          onSubmit={handleSubmit(onSubmit)}\n          sx={{ height: 1 }}\n        >\n          <Typography variant=\"h6\">{`Edit Order #${row.id}`}</Typography>\n          <Controller\n            control={control}\n            name=\"customer\"\n            rules={{ required: true }}\n            render={({ field, fieldState: { invalid } }) => (\n              <TextField\n                label=\"Customer\"\n                size=\"small\"\n                error={invalid}\n                required\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <Controller\n            control={control}\n            name=\"email\"\n            rules={{ required: true }}\n            render={({ field, fieldState: { invalid } }) => (\n              <TextField\n                label=\"Email\"\n                size=\"small\"\n                error={invalid}\n                required\n                fullWidth\n                {...field}\n              />\n            )}\n          />\n          <div>\n            <Button\n              type=\"submit\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled={!isValid}\n            >\n              Save\n            </Button>\n          </div>\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'email', headerName: 'Email', width: 200 },\n];\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n  },\n];\n\ntype Customer = typeof rows[number];\n\nexport default function FormDetailPanel() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }: GridRowParams) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 240, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n"},"CustomizeDetailPanelToggle.js":{module:"./CustomizeDetailPanelToggle.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {\n  DataGridPro,\n  useGridSelector,\n  useGridApiContext,\n  gridDetailPanelExpandedRowsContentCacheSelector,\n  GRID_DETAIL_PANEL_TOGGLE_COL_DEF,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomCurrency,\n  randomEmail,\n  randomPrice,\n} from '@mui/x-data-grid-generator';\n\nexport default function CustomizeDetailPanelToggle() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }) =>\n      row.id % 2 === 0 ? <Box sx={{ p: 2 }}>{`Order #${row.id}`}</Box> : null,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 50, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        rowThreshold={0}\n        getDetailPanelContent={getDetailPanelContent}\n        getDetailPanelHeight={getDetailPanelHeight}\n      />\n    </div>\n  );\n}\n\nfunction CustomDetailPanelToggle(props) {\n  const { id, value: isExpanded } = props;\n  const apiRef = useGridApiContext();\n\n  // To avoid calling \xb4getDetailPanelContent` all the time, the following selector\n  // gives an object with the detail panel content for each row id.\n  const contentCache = useGridSelector(\n    apiRef,\n    gridDetailPanelExpandedRowsContentCacheSelector,\n  );\n\n  // If the value is not a valid React element, it means that the row has no detail panel.\n  const hasDetail = React.isValidElement(contentCache[id]);\n\n  return (\n    <IconButton\n      size=\"small\"\n      tabIndex={-1}\n      disabled={!hasDetail}\n      aria-label={isExpanded ? 'Close' : 'Open'}\n    >\n      <ExpandMoreIcon\n        sx={{\n          transform: `rotateZ(${isExpanded ? 180 : 0}deg)`,\n          transition: (theme) =>\n            theme.transitions.create('transform', {\n              duration: theme.transitions.duration.shortest,\n            }),\n        }}\n        fontSize=\"inherit\"\n      />\n    </IconButton>\n  );\n}\n\nCustomDetailPanelToggle.propTypes = {\n  id: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'total', type: 'number', headerName: 'Total' },\n  {\n    ...GRID_DETAIL_PANEL_TOGGLE_COL_DEF,\n    renderCell: (params) => (\n      <CustomDetailPanelToggle id={params.id} value={params.value} />\n    ),\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n];\n",jsxPreview:"<DataGridPro\n  rows={rows}\n  columns={columns}\n  rowThreshold={0}\n  getDetailPanelContent={getDetailPanelContent}\n  getDetailPanelHeight={getDetailPanelHeight}\n/>",moduleTS:"./CustomizeDetailPanelToggle.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {\n  DataGridPro,\n  GridColumns,\n  GridRowsProp,\n  GridRenderCellParams,\n  GridRowParams,\n  useGridSelector,\n  useGridApiContext,\n  gridDetailPanelExpandedRowsContentCacheSelector,\n  GRID_DETAIL_PANEL_TOGGLE_COL_DEF,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomCurrency,\n  randomEmail,\n  randomPrice,\n} from '@mui/x-data-grid-generator';\n\nexport default function CustomizeDetailPanelToggle() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }: GridRowParams) =>\n      row.id % 2 === 0 ? <Box sx={{ p: 2 }}>{`Order #${row.id}`}</Box> : null,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 50, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        rowThreshold={0}\n        getDetailPanelContent={getDetailPanelContent}\n        getDetailPanelHeight={getDetailPanelHeight}\n      />\n    </div>\n  );\n}\n\nfunction CustomDetailPanelToggle(props: Pick<GridRenderCellParams, 'id' | 'value'>) {\n  const { id, value: isExpanded } = props;\n  const apiRef = useGridApiContext();\n\n  // To avoid calling \xb4getDetailPanelContent` all the time, the following selector\n  // gives an object with the detail panel content for each row id.\n  const contentCache = useGridSelector(\n    apiRef,\n    gridDetailPanelExpandedRowsContentCacheSelector,\n  );\n\n  // If the value is not a valid React element, it means that the row has no detail panel.\n  const hasDetail = React.isValidElement(contentCache[id]);\n\n  return (\n    <IconButton\n      size=\"small\"\n      tabIndex={-1}\n      disabled={!hasDetail}\n      aria-label={isExpanded ? 'Close' : 'Open'}\n    >\n      <ExpandMoreIcon\n        sx={{\n          transform: `rotateZ(${isExpanded ? 180 : 0}deg)`,\n          transition: (theme) =>\n            theme.transitions.create('transform', {\n              duration: theme.transitions.duration.shortest,\n            }),\n        }}\n        fontSize=\"inherit\"\n      />\n    </IconButton>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'total', type: 'number', headerName: 'Total' },\n  {\n    ...GRID_DETAIL_PANEL_TOGGLE_COL_DEF,\n    renderCell: (params) => (\n      <CustomDetailPanelToggle id={params.id} value={params.value} />\n    ),\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    currency: randomCurrency(),\n    total: randomPrice(1, 1000),\n  },\n];\n"},"FullWidthDetailPanel.js":{module:"./FullWidthDetailPanel.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport {\n  DataGridPro,\n  useGridApiContext,\n  GRID_DETAIL_PANEL_TOGGLE_FIELD,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row: rowProp }) {\n  const apiRef = useGridApiContext();\n  const [width, setWidth] = React.useState(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    return dimensions.viewportInnerSize.width;\n  });\n\n  const handleViewportInnerSizeChange = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    setWidth(dimensions.viewportInnerSize.width);\n  }, [apiRef]);\n\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent(\n      'viewportInnerSizeChange',\n      handleViewportInnerSizeChange,\n    );\n  }, [apiRef, handleViewportInnerSizeChange]);\n\n  return (\n    <Stack\n      sx={{\n        py: 2,\n        height: '100%',\n        boxSizing: 'border-box',\n        position: 'sticky',\n        left: 0,\n        width,\n      }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <DataGridPro\n            density=\"compact\"\n            columns={[\n              { field: 'name', headerName: 'Product', flex: 1 },\n              {\n                field: 'quantity',\n                headerName: 'Quantity',\n                align: 'center',\n                type: 'number',\n              },\n              { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n              {\n                field: 'total',\n                headerName: 'Total',\n                type: 'number',\n                valueGetter: ({ row }) => row.quantity * row.unitPrice,\n              },\n            ]}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nDetailPanelContent.propTypes = {\n  row: PropTypes.object.isRequired,\n};\n\nconst columns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'email', headerName: 'Email' },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'address', headerName: 'Address' },\n  {\n    field: 'city',\n    headerName: 'City',\n    valueGetter: ({ row }) => `${row.city}, ${row.country.label}`,\n  },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc, product) => product.unitPrice * product.quantity,\n        0,\n      );\n\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map((_, index) => ({\n    id: index,\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  }));\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 6,\n    customer: 'Jos\xe9',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\nexport default function FullWidthDetailPanel() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 400, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        pinnedColumns={{ left: [GRID_DETAIL_PANEL_TOGGLE_FIELD] }}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n",jsxPreview:"<DataGridPro\n  columns={columns}\n  rows={rows}\n  rowThreshold={0}\n  pinnedColumns={{ left: [GRID_DETAIL_PANEL_TOGGLE_FIELD] }}\n  getDetailPanelHeight={getDetailPanelHeight}\n  getDetailPanelContent={getDetailPanelContent}\n/>",moduleTS:"./FullWidthDetailPanel.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport {\n  DataGridPro,\n  GridColumns,\n  useGridApiContext,\n  GRID_DETAIL_PANEL_TOGGLE_FIELD,\n  GridRowParams,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomPrice,\n  randomCurrency,\n  randomCountry,\n  randomCity,\n  randomEmail,\n  randomInt,\n  randomAddress,\n  randomCommodity,\n} from '@mui/x-data-grid-generator';\n\nfunction DetailPanelContent({ row: rowProp }: { row: Customer }) {\n  const apiRef = useGridApiContext();\n  const [width, setWidth] = React.useState(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    return dimensions!.viewportInnerSize.width;\n  });\n\n  const handleViewportInnerSizeChange = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    setWidth(dimensions!.viewportInnerSize.width);\n  }, [apiRef]);\n\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent(\n      'viewportInnerSizeChange',\n      handleViewportInnerSizeChange,\n    );\n  }, [apiRef, handleViewportInnerSizeChange]);\n\n  return (\n    <Stack\n      sx={{\n        py: 2,\n        height: '100%',\n        boxSizing: 'border-box',\n        position: 'sticky',\n        left: 0,\n        width,\n      }}\n      direction=\"column\"\n    >\n      <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\n        <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\n          <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\n          <DataGridPro\n            density=\"compact\"\n            columns={[\n              { field: 'name', headerName: 'Product', flex: 1 },\n              {\n                field: 'quantity',\n                headerName: 'Quantity',\n                align: 'center',\n                type: 'number',\n              },\n              { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\n              {\n                field: 'total',\n                headerName: 'Total',\n                type: 'number',\n                valueGetter: ({ row }) => row.quantity * row.unitPrice,\n              },\n            ]}\n            rows={rowProp.products}\n            sx={{ flex: 1 }}\n            hideFooter\n          />\n        </Stack>\n      </Paper>\n    </Stack>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'id', headerName: 'Order ID' },\n  { field: 'customer', headerName: 'Customer', width: 200 },\n  { field: 'email', headerName: 'Email' },\n  { field: 'date', type: 'date', headerName: 'Placed at' },\n  { field: 'currency', headerName: 'Currency' },\n  { field: 'address', headerName: 'Address' },\n  {\n    field: 'city',\n    headerName: 'City',\n    valueGetter: ({ row }) => `${row.city}, ${row.country.label}`,\n  },\n  {\n    field: 'total',\n    type: 'number',\n    headerName: 'Total',\n    valueGetter: ({ row }) => {\n      const subtotal = row.products.reduce(\n        (acc: number, product: any) => product.unitPrice * product.quantity,\n        0,\n      );\n      const taxes = subtotal * 0.05;\n      return subtotal + taxes;\n    },\n  },\n];\n\nfunction generateProducts() {\n  const quantity = randomInt(1, 5);\n  return [...Array(quantity)].map((_, index) => ({\n    id: index,\n    name: randomCommodity(),\n    quantity: randomInt(1, 5),\n    unitPrice: randomPrice(1, 1000),\n  }));\n}\n\nconst rows = [\n  {\n    id: 1,\n    customer: 'Matheus',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 2,\n    customer: 'Olivier',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 3,\n    customer: 'Flavien',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 4,\n    customer: 'Danail',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 5,\n    customer: 'Alexandre',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n  {\n    id: 6,\n    customer: 'Jos\xe9',\n    email: randomEmail(),\n    date: randomCreatedDate(),\n    address: randomAddress(),\n    country: randomCountry(),\n    city: randomCity(),\n    currency: randomCurrency(),\n    products: generateProducts(),\n  },\n];\n\ntype Customer = typeof rows[number];\n\nexport default function FullWidthDetailPanel() {\n  const getDetailPanelContent = React.useCallback(\n    ({ row }: GridRowParams) => <DetailPanelContent row={row} />,\n    [],\n  );\n\n  const getDetailPanelHeight = React.useCallback(() => 400, []);\n\n  return (\n    <Box sx={{ width: '100%', height: 400 }}>\n      <DataGridPro\n        columns={columns}\n        rows={rows}\n        rowThreshold={0}\n        pinnedColumns={{ left: [GRID_DETAIL_PANEL_TOGGLE_FIELD] }}\n        getDetailPanelHeight={getDetailPanelHeight}\n        getDetailPanelContent={getDetailPanelContent}\n      />\n    </Box>\n  );\n}\n"},"DetailPanelApiNoSnap.js":{module:"./DetailPanelApiNoSnap.js",raw:"import * as React from 'react';\nimport ApiDocs from 'docsx/src/modules/components/ApiDocs';\nimport api from 'docsx/pages/x/api/data-grid/grid-detail-panel-api.json';\n\nexport default function DetailPanelApiNoSnap() {\n  return <ApiDocs api={api} />;\n}\n"}},K={"./BasicDetailPanels.js":o.Z,"./DetailPanelAutoHeight.js":function(){var n=r.useCallback((function(n){var e=n.row;return(0,w.jsx)(D,{row:e})}),[]),e=r.useCallback((function(){return"auto"}),[]);return(0,w.jsx)(s.Z,{sx:{width:1,height:400},children:(0,w.jsx)(f.s,{columns:x,rows:b,rowThreshold:0,getDetailPanelHeight:e,getDetailPanelContent:n})})},"./ControlMasterDetail.js":function(){var n=r.useState([]),e=(0,k.Z)(n,2),t=e[0],a=e[1],o=r.useCallback((function(n){a(n)}),[]);return(0,w.jsxs)(s.Z,{sx:{width:"100%"},children:[(0,w.jsx)(v.Z,{severity:"info",children:(0,w.jsxs)("code",{children:["detailPanelExpandedRowIds: ",E()(t)]})}),(0,w.jsx)(s.Z,{sx:{height:400,mt:1},children:(0,w.jsx)(f.s,{rows:I,columns:G,rowThreshold:0,getDetailPanelContent:function(n){var e=n.row;return(0,w.jsx)(s.Z,{sx:{p:2},children:"Order #".concat(e.id)})},getDetailPanelHeight:function(){return 50},detailPanelExpandedRowIds:t,onDetailPanelExpandedRowIdsChange:o})})]})},"./FormDetailPanel.js":function(){var n=r.useCallback((function(n){var e=n.row;return(0,w.jsx)(_,{row:e})}),[]),e=r.useCallback((function(){return 240}),[]);return(0,w.jsx)(s.Z,{sx:{width:"100%",height:400},children:(0,w.jsx)(f.s,{columns:A,rows:N,rowThreshold:0,getDetailPanelHeight:e,getDetailPanelContent:n})})},"./CustomizeDetailPanelToggle.js":function(){var n=r.useCallback((function(n){var e=n.row;return e.id%2===0?(0,w.jsx)(s.Z,{sx:{p:2},children:"Order #".concat(e.id)}):null}),[]),e=r.useCallback((function(){return 50}),[]);return(0,w.jsx)("div",{style:{height:400,width:"100%"},children:(0,w.jsx)(f.s,{rows:B,columns:Z,rowThreshold:0,getDetailPanelContent:n,getDetailPanelHeight:e})})},"./FullWidthDetailPanel.js":function(){var n=r.useCallback((function(n){var e=n.row;return(0,w.jsx)(z,{row:e})}),[]),e=r.useCallback((function(){return 400}),[]);return(0,w.jsx)(s.Z,{sx:{width:"100%",height:400},children:(0,w.jsx)(f.s,{columns:U,rows:H,rowThreshold:0,pinnedColumns:{left:[M.GRID_DETAIL_PANEL_TOGGLE_FIELD]},getDetailPanelHeight:e,getDetailPanelContent:n})})},"./DetailPanelApiNoSnap.js":function(){return(0,w.jsx)($.Z,{api:J})}};function X(){return(0,w.jsx)(a.Z,{demos:Q,docs:W,demoComponents:K,disableAd:!0})}},36546:function(n,e,t){"use strict";var r=t(57379),a=(t(27378),t(67018)),o=t(20922),i=t(77379),d=t(89757),s=t(17931),l=t(29277),c=t(5805),u=t(95388),p=t(24246),m=(0,a.ZP)(l.Z)((function(n){return{fontSize:n.theme.typography.pxToRem(15),flexBasis:"33.33%",flexShrink:0,direction:"ltr",lineHeight:1.4,display:"inline-block",fontFamily:'Consolas, "Liberation Mono", Menlo, Courier, monospace',WebkitFontSmoothing:"subpixel-antialiased"}})),g=(0,a.ZP)(l.Z)((function(n){var e=n.theme;return(0,r.Z)({fontSize:e.typography.pxToRem(15),color:e.palette.text.secondary,"& code":{color:e.palette.secondary.main}},e.breakpoints.down("sm"),{display:"none"})}));e.Z=function(n){var e=n.api;return(0,p.jsx)(o.Z,{sx:{width:"100%"},children:e.properties.map((function(n,e){return(0,p.jsxs)(i.Z,{children:[(0,p.jsxs)(d.Z,{expandIcon:(0,p.jsx)(c.Z,{}),"aria-controls":"api-property-".concat(e,"-content"),id:"api-property-".concat(e,"-header"),children:[(0,p.jsx)(m,{children:"".concat(n.name,"()")}),(0,p.jsx)(g,{dangerouslySetInnerHTML:{__html:n.description}})]}),(0,p.jsxs)(s.Z,{sx:{display:"block"},children:[(0,p.jsx)(l.Z,{variant:"subtitle2",children:"Signature:"}),(0,p.jsx)(u.Z,{code:"".concat(n.name,": ").concat(n.type),language:"tsx",sx:{"& pre":{mb:1}}})]})]},e)}))})}},26582:function(n,e,t){"use strict";t.d(e,{s:function(){return Cn}});var r=t(27378),a=t(12482),o=t(37919),i=t(9563),d=t(61354),s=t(2944),l=t(34535),c=t(87199),u=t(12986),p=t(97244),m=t(87495),g=t(50507),h=t(15805),y=t(81746),f=t(12084),C=t(89621),w=t(48715),P=t(69789),D=t(91676),x=t(83864),S=t(89446),b=t(23752),k=t(94053),R=t(47786),E=t(68753),v=t(95158),G=t(29136),I=t(8679),T=t(62430),L=t(61598),_=t(18327),A=t(92666),N=t(38177),F=t(82060),O=t(31813),j=t(95088),M=t(18117),V=t(93652),Z=t(98610),B=t(6569),z=t(66931),U=t(92356),q=t(44305),H=t(27298),$=t(69863),J=t(86278),W=t(694),Q=t(86329),K=t(45933),X=t(25778),Y=t(22755),nn=t(73259),en=t(42225),tn=t(94675),rn=t(59694);function an(n){var e=n.lazyLoadingFeatureFlag,t=n.rowsLoadingMode,r=n.gridDimensions;return!e||!r||t!==Y.GridFeatureModeConstant.server}var on=t(95649),dn=t(23315),sn=t(75912),ln=t(18318),cn=t(78110),un=function(n,e){var t,a,o=(0,p.S)(n,e);return(0,m.m)(o,e),(0,g.e)(o,e),(0,K._)(o,e),(0,q.z)(o,e),function(n,e){var t,a=(null!==(t=e.experimentalFeatures)&&void 0!==t?t:{}).lazyLoading,o=r.useCallback((function(n){if(!a||e.rowsLoadingMode!==Y.GridFeatureModeConstant.server||!e.rowCount||n.ids.length>=e.rowCount)return n;for(var t,r=(0,dn.Z)(n.ids),o=0;o<e.rowCount-n.ids.length;o+=1){var i=(t=o,"".concat("auto-generated-skeleton-row-root","-").concat(t));r.push(i)}return(0,on.Z)((0,on.Z)({},n),{},{ids:r})}),[e.rowCount,e.rowsLoadingMode,a]);(0,sn.Z)(n,"hydrateRows",o)}(o,e),(0,cn.$)(o),(0,W.N)(o,e),(0,$.P)(o,e),(0,h.Q)(o),(0,y.l)(f.k,o,e),(0,y.l)(J.g,o,e),(0,y.l)(H.l,o,e),(0,y.l)(C.P,o,e),(0,y.l)(ln.a,o,e),(0,y.l)(w.F,o,e),(0,y.l)(null!==(t=e.experimentalFeatures)&&void 0!==t&&t.newEditingApi?P.U:D.U,o,e),(0,y.l)(x.W,o,e),(0,y.l)(S.Q,o,e),(0,y.l)(b.Z,o,e),(0,y.l)(k.B,o,e),(0,y.l)(R.ce,o,e),(0,y.l)(B.b,o,e),(0,y.l)(z.D,o,e),(0,y.l)(E.I,o,e),(0,y.l)(v.Q,o,e),(0,y.l)(G.V,o,e),(0,y.l)(I.u4,o,e),(0,U.H)(o),(0,T.D)(o,e),(0,f.r)(o,e),(0,H.X)(o,e),(0,ln.d)(o,e),(0,C.C)(o,e),(0,w.K)(o,e),(0,L.G)(o),(0,J.k)(o,e),(0,_.n)(o),(0,I.ap)(o,e),(null!==(a=e.experimentalFeatures)&&void 0!==a&&a.newEditingApi?P.s:D.s)(o,e),(0,x.z)(o,e),(0,b.M)(o,e),(0,k.L)(o,e),(0,S.G)(o,e),(0,R.km)(o,e),(0,B.T)(o,e),(0,z.p)(o,e),(0,E.e)(o,e),(0,v.y)(o,e),(0,Q.p)(o,e),(0,A.K)(o,e),(0,Z.A)(o,e),function(n,e){var t,a=(0,tn.y)(n,e),o=(0,nn.P)(n,Y.gridSortModelSelector),i=(0,nn.P)(n,Y.gridFilterModelSelector),d=r.useRef({firstRowToRender:0,lastRowToRender:0}),s=(null!==(t=e.experimentalFeatures)&&void 0!==t?t:{}).lazyLoading,l=r.useCallback((function(){var t=n.current.unstable_getRenderContext(),r=(0,rn.sn)({firstIndex:t.firstRowIndex,lastIndex:t.lastRowIndex,minFirstIndex:0,maxLastIndex:a.rows.length,buffer:e.rowBuffer}),o=(0,X.Z)(r,2);return{firstRowToRender:o[0],lastRowToRender:o[1]}}),[n,e.rowBuffer,a.rows.length]),c=r.useCallback((function(t){var r=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:s,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:r})){var l={firstRowToRender:t.firstRowToRender,lastRowToRender:t.lastRowToRender,sortModel:o,filterModel:i};if(d.current.firstRowToRender!==t.firstRowToRender||d.current.lastRowToRender!==t.lastRowToRender){if(0===o.length&&0===i.items.length){var c=function(n,e){for(var t=e.firstRowIndex,r=e.lastRowIndex,a=n.slice(e.firstRowIndex,e.lastRowIndex),o=0,i=a.length-1,d=!1;!d&&t<r;)a[o].model||a[i].model||(d=!0),a[o].model&&(o+=1,t+=1),a[i].model&&(i-=1,r-=1);return d?{firstRowIndex:t,lastRowIndex:r}:void 0}(a.rows,{firstRowIndex:t.firstRowToRender,lastRowIndex:t.lastRowToRender});if(!c)return;l.firstRowToRender=c.firstRowIndex,l.lastRowToRender=c.lastRowIndex}d.current=t,n.current.publishEvent("fetchRows",l)}}}),[n,e.rowsLoadingMode,o,i,a.rows,s]),u=r.useCallback((function(t){var r=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:s,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:r})){n.current.unstable_requestPipeProcessorsApplication("hydrateRows");var a=l(),o={firstRowToRender:a.firstRowToRender,lastRowToRender:a.lastRowToRender,sortModel:t,filterModel:i};n.current.publishEvent("fetchRows",o)}}),[n,e.rowsLoadingMode,i,s,l]),p=r.useCallback((function(t){var r=n.current.getRootDimensions();if(!an({lazyLoadingFeatureFlag:s,rowsLoadingMode:e.rowsLoadingMode,gridDimensions:r})){n.current.unstable_requestPipeProcessorsApplication("hydrateRows");var a=l(),i={firstRowToRender:a.firstRowToRender,lastRowToRender:a.lastRowToRender,sortModel:o,filterModel:t};n.current.publishEvent("fetchRows",i)}}),[n,e.rowsLoadingMode,o,s,l]);(0,en.zn)(n,"renderedRowsIntervalChange",c),(0,en.zn)(n,"sortModelChange",u),(0,en.zn)(n,"filterModelChange",p),(0,en.x3)(n,"fetchRows",e.onFetchRows)}(o,e),(0,G.p)(o),(0,N._)(o),(0,F.d)(o,e),(0,O.D)(o),(0,j.J)(o,e),(0,M.I)(o,e),(0,V.s)(o),o},pn=t(38041),mn=t(94239),gn=t(27016),hn=t(24246),yn="MTU5NjMxOTIwMDAwMA==",fn=r.forwardRef((function(n,e){var t=(0,pn.d)(n),r=un(t.apiRef,t);return(0,a.O)("x-data-grid-pro",yn),(0,hn.jsx)(i.d,{apiRef:r,props:t,children:(0,hn.jsx)(d.n,{className:t.className,style:t.style,sx:t.sx,ref:e,children:(0,hn.jsxs)(s.C,{children:[(0,hn.jsx)(l.f,{}),(0,hn.jsx)(c.U,{ColumnHeadersComponent:gn.r,VirtualScrollerComponent:mn.X,children:(0,hn.jsx)(o.l,{packageName:"x-data-grid-pro",releaseInfo:yn})}),(0,hn.jsx)(u.B,{})]})})})})),Cn=r.memo(fn)},91424:function(){},28955:function(n,e,t){"use strict";var r=t(91424);t.o(r,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(r,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(r,"GridEditModes")&&t.d(e,{GridEditModes:function(){return r.GridEditModes}}),t.o(r,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),t.o(r,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),t.o(r,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(r,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),t.o(r,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),t.o(r,"gridFilteredSortedRowIdsSelector")&&t.d(e,{gridFilteredSortedRowIdsSelector:function(){return r.gridFilteredSortedRowIdsSelector}}),t.o(r,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),t.o(r,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return r.gridPageSelector}}),t.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(r,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),t.o(r,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),t.o(r,"gridStringOrNumberComparator")&&t.d(e,{gridStringOrNumberComparator:function(){return r.gridStringOrNumberComparator}}),t.o(r,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),t.o(r,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),t.o(r,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}})},6731:function(n,e,t){"use strict";t.d(e,{Z3:function(){return a.Z3},aP:function(){return r.a},u9:function(){return r.u}});var r=t(72076),a=t(38253)},21401:function(n,e,t){"use strict";t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return a.aP},GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return a.u9},gridDetailPanelExpandedRowsContentCacheSelector:function(){return a.Z3}});var r=t(28955);t.o(r,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(r,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(r,"GridEditModes")&&t.d(e,{GridEditModes:function(){return r.GridEditModes}}),t.o(r,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),t.o(r,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),t.o(r,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(r,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),t.o(r,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),t.o(r,"gridFilteredSortedRowIdsSelector")&&t.d(e,{gridFilteredSortedRowIdsSelector:function(){return r.gridFilteredSortedRowIdsSelector}}),t.o(r,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),t.o(r,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return r.gridPageSelector}}),t.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(r,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),t.o(r,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),t.o(r,"gridStringOrNumberComparator")&&t.d(e,{gridStringOrNumberComparator:function(){return r.gridStringOrNumberComparator}}),t.o(r,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),t.o(r,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),t.o(r,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}});var a=t(6731)},33917:function(n,e,t){"use strict";t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF},GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD},gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}});var r=t(21401);t.o(r,"GridEditModes")&&t.d(e,{GridEditModes:function(){return r.GridEditModes}}),t.o(r,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),t.o(r,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),t.o(r,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),t.o(r,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),t.o(r,"gridFilteredSortedRowIdsSelector")&&t.d(e,{gridFilteredSortedRowIdsSelector:function(){return r.gridFilteredSortedRowIdsSelector}}),t.o(r,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),t.o(r,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return r.gridPageSelector}}),t.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(r,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),t.o(r,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),t.o(r,"gridStringOrNumberComparator")&&t.d(e,{gridStringOrNumberComparator:function(){return r.gridStringOrNumberComparator}}),t.o(r,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),t.o(r,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),t.o(r,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}})},59404:function(n,e,t){"use strict";t.d(e,{GridEvents:function(){return a.GridEvents},GridLinkOperator:function(){return a.GridLinkOperator},GridRowModes:function(){return a.GridRowModes}});var r=t(1489);t.o(r,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(r,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(r,"GridEvents")&&t.d(e,{GridEvents:function(){return r.GridEvents}}),t.o(r,"GridLinkOperator")&&t.d(e,{GridLinkOperator:function(){return r.GridLinkOperator}}),t.o(r,"GridRowModes")&&t.d(e,{GridRowModes:function(){return r.GridRowModes}}),t.o(r,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),t.o(r,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),t.o(r,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(r,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),t.o(r,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),t.o(r,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),t.o(r,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return r.gridPageSelector}}),t.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(r,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),t.o(r,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),t.o(r,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),t.o(r,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),t.o(r,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}});var a=t(53418);t.o(a,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return a.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(a,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return a.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(a,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return a.gridColumnLookupSelector}}),t.o(a,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return a.gridColumnVisibilityModelSelector}}),t.o(a,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return a.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(a,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return a.gridFilteredDescendantCountLookupSelector}}),t.o(a,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return a.gridFilteredRowsLookupSelector}}),t.o(a,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return a.gridPageCountSelector}}),t.o(a,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return a.gridPageSelector}}),t.o(a,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return a.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(a,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return a.gridRowIdsSelector}}),t.o(a,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return a.gridRowTreeSelector}}),t.o(a,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return a.gridVisibleColumnDefinitionsSelector}}),t.o(a,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return a.gridVisibleRowCountSelector}}),t.o(a,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return a.gridVisibleSortedRowIdsSelector}});var o=t(20782);t.o(o,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return o.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(o,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return o.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(o,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return o.gridColumnLookupSelector}}),t.o(o,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return o.gridColumnVisibilityModelSelector}}),t.o(o,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return o.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(o,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return o.gridFilteredDescendantCountLookupSelector}}),t.o(o,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return o.gridFilteredRowsLookupSelector}}),t.o(o,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return o.gridPageCountSelector}}),t.o(o,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return o.gridPageSelector}}),t.o(o,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return o.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(o,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return o.gridRowIdsSelector}}),t.o(o,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return o.gridRowTreeSelector}}),t.o(o,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return o.gridVisibleColumnDefinitionsSelector}}),t.o(o,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return o.gridVisibleRowCountSelector}}),t.o(o,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return o.gridVisibleSortedRowIdsSelector}});var i=t(33917);t.o(i,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return i.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),t.o(i,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&t.d(e,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return i.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),t.o(i,"gridColumnLookupSelector")&&t.d(e,{gridColumnLookupSelector:function(){return i.gridColumnLookupSelector}}),t.o(i,"gridColumnVisibilityModelSelector")&&t.d(e,{gridColumnVisibilityModelSelector:function(){return i.gridColumnVisibilityModelSelector}}),t.o(i,"gridDetailPanelExpandedRowsContentCacheSelector")&&t.d(e,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return i.gridDetailPanelExpandedRowsContentCacheSelector}}),t.o(i,"gridFilteredDescendantCountLookupSelector")&&t.d(e,{gridFilteredDescendantCountLookupSelector:function(){return i.gridFilteredDescendantCountLookupSelector}}),t.o(i,"gridFilteredRowsLookupSelector")&&t.d(e,{gridFilteredRowsLookupSelector:function(){return i.gridFilteredRowsLookupSelector}}),t.o(i,"gridPageCountSelector")&&t.d(e,{gridPageCountSelector:function(){return i.gridPageCountSelector}}),t.o(i,"gridPageSelector")&&t.d(e,{gridPageSelector:function(){return i.gridPageSelector}}),t.o(i,"gridPaginatedVisibleSortedGridRowIdsSelector")&&t.d(e,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return i.gridPaginatedVisibleSortedGridRowIdsSelector}}),t.o(i,"gridRowIdsSelector")&&t.d(e,{gridRowIdsSelector:function(){return i.gridRowIdsSelector}}),t.o(i,"gridRowTreeSelector")&&t.d(e,{gridRowTreeSelector:function(){return i.gridRowTreeSelector}}),t.o(i,"gridVisibleColumnDefinitionsSelector")&&t.d(e,{gridVisibleColumnDefinitionsSelector:function(){return i.gridVisibleColumnDefinitionsSelector}}),t.o(i,"gridVisibleRowCountSelector")&&t.d(e,{gridVisibleRowCountSelector:function(){return i.gridVisibleRowCountSelector}}),t.o(i,"gridVisibleSortedRowIdsSelector")&&t.d(e,{gridVisibleSortedRowIdsSelector:function(){return i.gridVisibleSortedRowIdsSelector}})},29966:function(n,e,t){"use strict";t.d(e,{u:function(){return u}});var r=t(95649),a=t(81936),o=t(27378),i=t(7687),d=t(50577),s=t(20518),l=t(24246),c=["label","icon","showInMenu","onClick"],u=o.forwardRef((function(n,e){var t=n.label,u=n.icon,p=n.showInMenu,m=n.onClick,g=(0,a.Z)(n,c);return p?(0,l.jsxs)(d.Z,(0,r.Z)((0,r.Z)({ref:e},g),{},{onClick:m,children:[u&&(0,l.jsx)(s.Z,{children:u}),t]})):(0,l.jsx)(i.Z,(0,r.Z)((0,r.Z)({ref:e,size:"small",role:"menuitem","aria-label":t},g),{},{onClick:function(n){m&&m(n)},children:o.cloneElement(u,{fontSize:"small"})}))}))},87481:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/x/react-data-grid/master-detail",function(){return t(71159)}])}},function(n){n.O(0,[7178,6047,6767,9332,5312,18,9007,3783,8496,9774,2888,179],(function(){return e=87481,n(n.s=e);var e}));var e=n.O();_N_E=e}]);