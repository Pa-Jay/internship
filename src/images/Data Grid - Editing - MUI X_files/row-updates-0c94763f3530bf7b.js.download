(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8040],{67684:function(e,n,o){"use strict";o.d(n,{Z:function(){return g}});var t=o(66283),r=o(77809),a=o(25778),i=o(27378),s=o(9124),d=o(34486),l=o(26582),u=o(37718),c=o(24246),w=(0,u.$)({dataSet:"Employee",rowLength:1e4}),p=w.columns,m=w.columnsWithDefaultColDef,f=w.useQuery,R={};function g(){var e=f(R).data,n=(0,d.A)(),o=i.useState([]),w=(0,a.Z)(o,2),g=w[0],h=w[1],S=i.useState(0),v=(0,a.Z)(S,2),C=v[0],I=v[1],x=i.useCallback(function(){var n=(0,r.Z)((0,t.Z)().mark((function n(o){var r;return(0,t.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,(0,u.j)(e,{filterModel:o.filterModel,sortModel:o.sortModel},{minDelay:300,maxDelay:800,useCursorPagination:!1},m);case 2:return r=n.sent,n.abrupt("return",{slice:r.returnedRows.slice(o.firstRowToRender,o.lastRowToRender),total:r.returnedRows.length});case 4:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),[e]);i.useEffect((function(){0!==e.length&&(0,r.Z)((0,t.Z)().mark((function e(){var n,o,r;return(0,t.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x({firstRowToRender:0,lastRowToRender:10,sortModel:[],filterModel:{items:[]}});case 2:n=e.sent,o=n.slice,r=n.total,h(o),I(r);case 7:case"end":return e.stop()}}),e)})))()}),[e,x]);var y=i.useCallback(function(){var e=(0,r.Z)((0,t.Z)().mark((function e(o){var r,a,i;return(0,t.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(o);case 2:r=e.sent,a=r.slice,i=r.total,n.current.unstable_replaceRows(o.firstRowToRender,a),I(i);case 7:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),[n,x]),D=i.useMemo((function(){return(0,s.Z)(y,200)}),[y]);return(0,c.jsx)("div",{style:{height:400,width:"100%"},children:(0,c.jsx)(l.s,{columns:p,rows:g,apiRef:n,hideFooterPagination:!0,rowCount:C,sortingMode:"server",filterMode:"server",rowsLoadingMode:"server",onFetchRows:D,experimentalFeatures:{lazyLoading:!0}})})}},3380:function(e,n,o){"use strict";o.r(n),o.d(n,{default:function(){return N}});var t=o(27378),r=o(86767),a=o(23315),i=o(95649),s=o(25778),d=o(49260),l=o(43783),u=o(20922),c=o(78153),w=o(15830),p=o(24246),m=[{field:"id"},{field:"username",width:150},{field:"age",width:80,type:"number"}],f=0,R=function(){return{id:f+=1,username:(0,l.yS)(),age:(0,l.Iy)(10,80)}};var g=o(34486),h=o(26582),S=[{field:"id"},{field:"username",width:150},{field:"age",width:80,type:"number"}],v=0,C=function(){return{id:v+=1,username:(0,l.yS)(),age:(0,l.Iy)(10,80)}},I=[C(),C(),C(),C()];var x=o(66283),y=o(77809),D=o(85851),L=o.n(D),b=o(76352),k=o(45593),G=o(39663),T=o(37565);function E(e){return new(L())((function(n){setTimeout((function(){n()}),e)}))}var P=o(67684),_=o(64891),A=[{field:"id"},{field:"username",width:150},{field:"age",width:80,type:"number"}],F=[{id:1,username:(0,l.yS)(),age:(0,l.Iy)(10,80)},{id:2,username:(0,l.yS)(),age:(0,l.Iy)(10,80)},{id:3,username:(0,l.yS)(),age:(0,l.Iy)(10,80)},{id:4,username:(0,l.yS)(),age:(0,l.Iy)(10,80)}];const M={en:{description:"Always keep your rows up to date.",location:"/docs/data/data-grid/row-updates/row-updates.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Data grid - Row updates</h1><p class="description">Always keep your rows up to date.</p>\n\n<h2 id="the-rows-prop">The <code>rows</code> prop<a aria-labelledby="the-rows-prop" class="anchor-link-style" href="#the-rows-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The simplest way to update the rows is to provide the new rows using the <code>rows</code> prop.\nIt replaces the previous values. This approach has some drawbacks:</p>\n<ul>\n<li>You need to provide all the rows.</li>\n<li>You might create a performance bottleneck when preparing the rows array to provide to the grid.</li>\n</ul>\n',{demo:"UpdateRowsProp.js",bg:"inline",disableAd:!0},'<h2 id="the-updaterows-method">The <code>updateRows</code> method <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a><a aria-labelledby="the-updaterows-method" class="anchor-link-style" href="#the-updaterows-method" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If you want to only update part of the rows, you can use the <code>apiRef.current.updateRows</code> method.</p>\n',{demo:"UpdateRowsApiRef.js",bg:"inline",disableAd:!0},'<p>The default behavior of <code>updateRows</code> API is to upsert rows.\nSo if a row has an id that is not in the current list of rows then it will be added to the grid.</p>\n<p>Alternatively, if you would like to delete a row, you would need to pass an extra <code>_action</code> property in the update object as below.</p>\n<div class="MuiCode-root"><pre><code class="language-ts">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">updateRows</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> _action<span class="token operator">:</span> <span class="token string">\'delete\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h2 id="infinite-loading">Infinite loading <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a><a aria-labelledby="infinite-loading" class="anchor-link-style" href="#infinite-loading" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The grid provides a <code>onRowsScrollEnd</code> prop that can be used to load additional rows when the scroll reaches the bottom of the viewport area.</p>\n<p>In addition, the area in which <code>onRowsScrollEnd</code> is called can be changed using <code>scrollEndThreshold</code>.</p>\n',{demo:"InfiniteLoadingGrid.js",bg:"inline",disableAd:!0},'<h2 id="lazy-loading">Lazy loading <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a><a aria-labelledby="lazy-loading" class="anchor-link-style" href="#lazy-loading" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><aside class="MuiCallout-root MuiCallout-warning"><p>This feature is experimental, it needs to be explicitly activated using the <code>lazyLoading</code> experimental feature flag.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGridPro</span></span> <span class="token attr-name">experimentalFeatures</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> lazyLoading<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>otherProps<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n\n</aside><p>Lazy Loading works like a pagination system, but instead of loading new rows based on pages, it loads them based on the viewport.\nIt loads new rows in chunks, as the user scrolls through the grid and reveals empty rows.</p>\n<p>The data grid builds the vertical scroll as if all the rows are already there, and displays empty (skeleton) rows while loading the data. Only rows that are displayed get fetched.</p>\n<p>To enable lazy loading, there are a few steps you need to follow:</p>\n<p>First, set <code>rowsLoadingMode=&quot;server&quot;</code>.\nThen, set <code>rowCount</code> to reflect the number of available rows on the server.\nThird, set a callback function on <code>onFetchRows</code> to load the data corresponding to the row indices passed within <code>GridFetchRowsParams</code>.\nFinally, replace the empty rows with the newly fetched ones using <code>apiRef.current.unstable_replaceRows()</code> like in the demo below.</p>\n',{demo:"LazyLoadingGrid.js",bg:"inline",disableAd:!0},'<aside class="MuiCallout-root MuiCallout-warning"><p>The <code>onFetchRows</code> callback is called every time a new row is in the viewport, so when you scroll, you can easily send multiple requests to your backend. We recommend developers limit those by implementing debouncing.</p>\n\n</aside><aside class="MuiCallout-root MuiCallout-warning"><p>For now, lazy loading rows does not work with row grouping or tree data.</p>\n\n</aside><aside class="MuiCallout-root MuiCallout-info"><p>In order for filtering and sorting to work you need to set their modes to <code>server</code>.\nYou can find out more information about how to do that on the <a href="/x/react-data-grid/filtering/#server-side-filter">server-side filter page</a> and on the <a href="/x/react-data-grid/sorting/#server-side-sorting">server-side sorting page</a>.</p>\n\n</aside><h2 id="high-frequency">High frequency <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a><a aria-labelledby="high-frequency" class="anchor-link-style" href="#high-frequency" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Whenever the rows are updated, the grid has to apply the sorting and filters. This can be a problem if you have high frequency updates. To maintain good performances, the grid allows to batch the updates and only apply them after a period of time. The <code>throttleRowsMs</code> prop can be used to define the frequency (in milliseconds) at which rows updates are applied.</p>\n<p>When receiving updates more frequently than this threshold, the grid will wait before updating the rows.</p>\n<p>The following demo updates the rows every 10ms, but they are only applied every 2 seconds.</p>\n',{demo:"ThrottledRowsGrid.js",bg:"inline"},'<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/x/api/data-grid/data-grid/">DataGrid</a></li>\n<li><a href="/x/api/data-grid/data-grid-pro/">DataGridPro</a></li>\n<li><a href="/x/api/data-grid/data-grid-premium/">DataGridPremium</a></li>\n</ul>\n'],toc:[{text:"The rows prop",level:2,hash:"the-rows-prop",children:[]},{text:"The updateRows method",level:2,hash:"the-updaterows-method",children:[]},{text:"Infinite loading",level:2,hash:"infinite-loading",children:[]},{text:"Lazy loading",level:2,hash:"lazy-loading",children:[]},{text:"High frequency",level:2,hash:"high-frequency",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Data Grid - Row updates",headers:{title:"Data Grid - Row updates",components:[]}}},Z={"UpdateRowsProp.js":{module:"./UpdateRowsProp.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { randomInt, randomUserName } from '@mui/x-data-grid-generator';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nlet idCounter = 0;\nconst createRandomRow = () => {\n  idCounter += 1;\n  return { id: idCounter, username: randomUserName(), age: randomInt(10, 80) };\n};\n\nexport default function UpdateRowsProp() {\n  const [rows, setRows] = React.useState(() => [\n    createRandomRow(),\n    createRandomRow(),\n    createRandomRow(),\n    createRandomRow(),\n  ]);\n\n  const handleUpdateRow = () => {\n    setRows((prevRows) => {\n      const rowToUpdateIndex = randomInt(0, rows.length - 1);\n\n      return prevRows.map((row, index) =>\n        index === rowToUpdateIndex ? { ...row, username: randomUserName() } : row,\n      );\n    });\n  };\n\n  const handleUpdateAllRows = () => {\n    setRows(rows.map((row) => ({ ...row, username: randomUserName() })));\n  };\n\n  const handleDeleteRow = () => {\n    setRows((prevRows) => {\n      const rowToDeleteIndex = randomInt(0, prevRows.length - 1);\n      return [\n        ...rows.slice(0, rowToDeleteIndex),\n        ...rows.slice(rowToDeleteIndex + 1),\n      ];\n    });\n  };\n\n  const handleAddRow = () => {\n    setRows((prevRows) => [...prevRows, createRandomRow()]);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Stack direction=\"row\" spacing={1}>\n        <Button size=\"small\" onClick={handleUpdateRow}>\n          Update a row\n        </Button>\n        <Button size=\"small\" onClick={handleUpdateAllRows}>\n          Update all rows\n        </Button>\n        <Button size=\"small\" onClick={handleDeleteRow}>\n          Delete a row\n        </Button>\n        <Button size=\"small\" onClick={handleAddRow}>\n          Add a row\n        </Button>\n      </Stack>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGrid rows={rows} columns={columns} />\n      </Box>\n    </Box>\n  );\n}\n",moduleTS:"./UpdateRowsProp.js",rawTS:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { randomInt, randomUserName } from '@mui/x-data-grid-generator';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nlet idCounter = 0;\nconst createRandomRow = () => {\n  idCounter += 1;\n  return { id: idCounter, username: randomUserName(), age: randomInt(10, 80) };\n};\n\nexport default function UpdateRowsProp() {\n  const [rows, setRows] = React.useState(() => [\n    createRandomRow(),\n    createRandomRow(),\n    createRandomRow(),\n    createRandomRow(),\n  ]);\n\n  const handleUpdateRow = () => {\n    setRows((prevRows) => {\n      const rowToUpdateIndex = randomInt(0, rows.length - 1);\n\n      return prevRows.map((row, index) =>\n        index === rowToUpdateIndex ? { ...row, username: randomUserName() } : row,\n      );\n    });\n  };\n\n  const handleUpdateAllRows = () => {\n    setRows(rows.map((row) => ({ ...row, username: randomUserName() })));\n  };\n\n  const handleDeleteRow = () => {\n    setRows((prevRows) => {\n      const rowToDeleteIndex = randomInt(0, prevRows.length - 1);\n      return [\n        ...rows.slice(0, rowToDeleteIndex),\n        ...rows.slice(rowToDeleteIndex + 1),\n      ];\n    });\n  };\n\n  const handleAddRow = () => {\n    setRows((prevRows) => [...prevRows, createRandomRow()]);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Stack direction=\"row\" spacing={1}>\n        <Button size=\"small\" onClick={handleUpdateRow}>\n          Update a row\n        </Button>\n        <Button size=\"small\" onClick={handleUpdateAllRows}>\n          Update all rows\n        </Button>\n        <Button size=\"small\" onClick={handleDeleteRow}>\n          Delete a row\n        </Button>\n        <Button size=\"small\" onClick={handleAddRow}>\n          Add a row\n        </Button>\n      </Stack>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGrid rows={rows} columns={columns} />\n      </Box>\n    </Box>\n  );\n}\n"},"UpdateRowsApiRef.js":{module:"./UpdateRowsApiRef.js",raw:"import * as React from 'react';\nimport { DataGridPro, useGridApiRef } from '@mui/x-data-grid-pro';\nimport {\n  randomInt,\n  randomUserName,\n  randomArrayItem,\n} from '@mui/x-data-grid-generator';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nlet idCounter = 0;\nconst createRandomRow = () => {\n  idCounter += 1;\n  return { id: idCounter, username: randomUserName(), age: randomInt(10, 80) };\n};\n\nconst rows = [\n  createRandomRow(),\n  createRandomRow(),\n  createRandomRow(),\n  createRandomRow(),\n];\n\nexport default function UpdateRowsApiRef() {\n  const apiRef = useGridApiRef();\n\n  const handleUpdateRow = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n    const rowId = randomArrayItem(rowIds);\n\n    apiRef.current.updateRows([{ id: rowId, username: randomUserName() }]);\n  };\n\n  const handleUpdateAllRows = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n\n    apiRef.current.updateRows(\n      rowIds.map((rowId) => ({ id: rowId, username: randomUserName() })),\n    );\n  };\n\n  const handleDeleteRow = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n    const rowId = randomArrayItem(rowIds);\n\n    apiRef.current.updateRows([{ id: rowId, _action: 'delete' }]);\n  };\n\n  const handleAddRow = () => {\n    apiRef.current.updateRows([createRandomRow()]);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Stack direction=\"row\" spacing={1}>\n        <Button size=\"small\" onClick={handleUpdateRow}>\n          Update a row\n        </Button>\n        <Button size=\"small\" onClick={handleUpdateAllRows}>\n          Update all rows\n        </Button>\n        <Button size=\"small\" onClick={handleDeleteRow}>\n          Delete a row\n        </Button>\n        <Button size=\"small\" onClick={handleAddRow}>\n          Add a row\n        </Button>\n      </Stack>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGridPro apiRef={apiRef} rows={rows} columns={columns} />\n      </Box>\n    </Box>\n  );\n}\n",moduleTS:"./UpdateRowsApiRef.js",rawTS:"import * as React from 'react';\nimport { DataGridPro, useGridApiRef } from '@mui/x-data-grid-pro';\nimport {\n  randomInt,\n  randomUserName,\n  randomArrayItem,\n} from '@mui/x-data-grid-generator';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nlet idCounter = 0;\nconst createRandomRow = () => {\n  idCounter += 1;\n  return { id: idCounter, username: randomUserName(), age: randomInt(10, 80) };\n};\n\nconst rows = [\n  createRandomRow(),\n  createRandomRow(),\n  createRandomRow(),\n  createRandomRow(),\n];\n\nexport default function UpdateRowsApiRef() {\n  const apiRef = useGridApiRef();\n\n  const handleUpdateRow = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n    const rowId = randomArrayItem(rowIds);\n\n    apiRef.current.updateRows([{ id: rowId, username: randomUserName() }]);\n  };\n\n  const handleUpdateAllRows = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n\n    apiRef.current.updateRows(\n      rowIds.map((rowId) => ({ id: rowId, username: randomUserName() })),\n    );\n  };\n\n  const handleDeleteRow = () => {\n    const rowIds = apiRef.current.getAllRowIds();\n    const rowId = randomArrayItem(rowIds);\n\n    apiRef.current.updateRows([{ id: rowId, _action: 'delete' }]);\n  };\n\n  const handleAddRow = () => {\n    apiRef.current.updateRows([createRandomRow()]);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Stack direction=\"row\" spacing={1}>\n        <Button size=\"small\" onClick={handleUpdateRow}>\n          Update a row\n        </Button>\n        <Button size=\"small\" onClick={handleUpdateAllRows}>\n          Update all rows\n        </Button>\n        <Button size=\"small\" onClick={handleDeleteRow}>\n          Delete a row\n        </Button>\n        <Button size=\"small\" onClick={handleAddRow}>\n          Add a row\n        </Button>\n      </Stack>\n      <Box sx={{ height: 400, mt: 1 }}>\n        <DataGridPro apiRef={apiRef} rows={rows} columns={columns} />\n      </Box>\n    </Box>\n  );\n}\n"},"InfiniteLoadingGrid.js":{module:"./InfiniteLoadingGrid.js",raw:"import * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport {\n  useDemoData,\n  getRealGridData,\n  getCommodityColumns,\n} from '@mui/x-data-grid-generator';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst MAX_ROW_LENGTH = 500;\n\nfunction sleep(duration) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\nexport default function InfiniteLoadingGrid() {\n  const [loading, setLoading] = React.useState(false);\n  const [loadedRows, setLoadedRows] = React.useState([]);\n  const mounted = React.useRef(true);\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 20,\n    maxColumns: 6,\n  });\n\n  const loadServerRows = async (newRowLength) => {\n    setLoading(true);\n    const newData = await getRealGridData(newRowLength, getCommodityColumns());\n    // Simulate network throttle\n    await sleep(Math.random() * 500 + 100);\n\n    if (mounted.current) {\n      setLoading(false);\n      setLoadedRows(loadedRows.concat(newData.rows));\n    }\n  };\n\n  const handleOnRowsScrollEnd = (params) => {\n    if (loadedRows.length <= MAX_ROW_LENGTH) {\n      loadServerRows(params.viewportPageSize);\n    }\n  };\n\n  React.useEffect(() => {\n    return () => {\n      mounted.current = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        {...data}\n        rows={data.rows.concat(loadedRows)}\n        loading={loading}\n        hideFooterPagination\n        onRowsScrollEnd={handleOnRowsScrollEnd}\n        components={{\n          LoadingOverlay: LinearProgress,\n        }}\n      />\n    </div>\n  );\n}\n",jsxPreview:"<DataGridPro\n  {...data}\n  rows={data.rows.concat(loadedRows)}\n  loading={loading}\n  hideFooterPagination\n  onRowsScrollEnd={handleOnRowsScrollEnd}\n  components={{\n    LoadingOverlay: LinearProgress,\n  }}\n/>",moduleTS:"./InfiniteLoadingGrid.js",rawTS:"import * as React from 'react';\nimport { DataGridPro, DataGridProProps } from '@mui/x-data-grid-pro';\nimport {\n  useDemoData,\n  getRealGridData,\n  getCommodityColumns,\n} from '@mui/x-data-grid-generator';\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst MAX_ROW_LENGTH = 500;\n\nfunction sleep(duration: number) {\n  return new Promise<void>((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\nexport default function InfiniteLoadingGrid() {\n  const [loading, setLoading] = React.useState(false);\n  const [loadedRows, setLoadedRows] = React.useState<any>([]);\n  const mounted = React.useRef(true);\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 20,\n    maxColumns: 6,\n  });\n\n  const loadServerRows = async (newRowLength: number) => {\n    setLoading(true);\n    const newData = await getRealGridData(newRowLength, getCommodityColumns());\n    // Simulate network throttle\n    await sleep(Math.random() * 500 + 100);\n\n    if (mounted.current) {\n      setLoading(false);\n      setLoadedRows(loadedRows.concat(newData.rows));\n    }\n  };\n\n  const handleOnRowsScrollEnd: DataGridProProps['onRowsScrollEnd'] = (params) => {\n    if (loadedRows.length <= MAX_ROW_LENGTH) {\n      loadServerRows(params.viewportPageSize);\n    }\n  };\n\n  React.useEffect(() => {\n    return () => {\n      mounted.current = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        {...data}\n        rows={data.rows.concat(loadedRows)}\n        loading={loading}\n        hideFooterPagination\n        onRowsScrollEnd={handleOnRowsScrollEnd}\n        components={{\n          LoadingOverlay: LinearProgress,\n        }}\n      />\n    </div>\n  );\n}\n"},"LazyLoadingGrid.js":{module:"./LazyLoadingGrid.js",raw:"import * as React from 'react';\nimport { debounce } from '@mui/material/utils';\nimport { DataGridPro, useGridApiRef } from '@mui/x-data-grid-pro';\nimport { createFakeServer, loadServerRows } from '@mui/x-data-grid-generator';\n\nconst DATASET_OPTION = {\n  dataSet: 'Employee',\n  rowLength: 10000,\n};\n\nconst { columns, columnsWithDefaultColDef, useQuery } =\n  createFakeServer(DATASET_OPTION);\n\nconst emptyObject = {};\n\nexport default function LazyLoadingGrid() {\n  // dataServerSide simulates your database.\n  const { data: dataServerSide } = useQuery(emptyObject);\n\n  const apiRef = useGridApiRef();\n  const [initialRows, setInitialRows] = React.useState([]);\n  const [rowCount, setRowCount] = React.useState(0);\n\n  const fetchRow = React.useCallback(\n    async (params) => {\n      const serverRows = await loadServerRows(\n        dataServerSide,\n        {\n          filterModel: params.filterModel,\n          sortModel: params.sortModel,\n        },\n        {\n          minDelay: 300,\n          maxDelay: 800,\n          useCursorPagination: false,\n        },\n        columnsWithDefaultColDef,\n      );\n\n      return {\n        slice: serverRows.returnedRows.slice(\n          params.firstRowToRender,\n          params.lastRowToRender,\n        ),\n        total: serverRows.returnedRows.length,\n      };\n    },\n    [dataServerSide],\n  );\n\n  // The initial fetch request of the viewport.\n  React.useEffect(() => {\n    if (dataServerSide.length === 0) {\n      return;\n    }\n\n    (async () => {\n      const { slice, total } = await fetchRow({\n        firstRowToRender: 0,\n        lastRowToRender: 10,\n        sortModel: [],\n        filterModel: {\n          items: [],\n        },\n      });\n\n      setInitialRows(slice);\n      setRowCount(total);\n    })();\n  }, [dataServerSide, fetchRow]);\n\n  // Fetch rows as they become visible in the viewport\n  const handleFetchRows = React.useCallback(\n    async (params) => {\n      const { slice, total } = await fetchRow(params);\n\n      apiRef.current.unstable_replaceRows(params.firstRowToRender, slice);\n      setRowCount(total);\n    },\n    [apiRef, fetchRow],\n  );\n\n  const debouncedHandleFetchRows = React.useMemo(\n    () => debounce(handleFetchRows, 200),\n    [handleFetchRows],\n  );\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        rows={initialRows}\n        apiRef={apiRef}\n        hideFooterPagination\n        rowCount={rowCount}\n        sortingMode=\"server\"\n        filterMode=\"server\"\n        rowsLoadingMode=\"server\"\n        onFetchRows={debouncedHandleFetchRows}\n        experimentalFeatures={{\n          lazyLoading: true,\n        }}\n      />\n    </div>\n  );\n}\n",jsxPreview:'<DataGridPro\n  columns={columns}\n  rows={initialRows}\n  apiRef={apiRef}\n  hideFooterPagination\n  rowCount={rowCount}\n  sortingMode="server"\n  filterMode="server"\n  rowsLoadingMode="server"\n  onFetchRows={debouncedHandleFetchRows}\n  experimentalFeatures={{\n    lazyLoading: true,\n  }}\n/>',moduleTS:"./LazyLoadingGrid.js",rawTS:"import * as React from 'react';\nimport { debounce } from '@mui/material/utils';\nimport {\n  DataGridPro,\n  GridFetchRowsParams,\n  useGridApiRef,\n} from '@mui/x-data-grid-pro';\nimport {\n  createFakeServer,\n  loadServerRows,\n  UseDemoDataOptions,\n} from '@mui/x-data-grid-generator';\n\nconst DATASET_OPTION: UseDemoDataOptions = {\n  dataSet: 'Employee',\n  rowLength: 10000,\n};\n\nconst { columns, columnsWithDefaultColDef, useQuery } =\n  createFakeServer(DATASET_OPTION);\n\nconst emptyObject = {};\n\nexport default function LazyLoadingGrid() {\n  // dataServerSide simulates your database.\n  const { data: dataServerSide } = useQuery(emptyObject);\n\n  const apiRef = useGridApiRef();\n  const [initialRows, setInitialRows] = React.useState<typeof dataServerSide>([]);\n  const [rowCount, setRowCount] = React.useState(0);\n\n  const fetchRow = React.useCallback(\n    async (params: GridFetchRowsParams) => {\n      const serverRows = await loadServerRows(\n        dataServerSide,\n        {\n          filterModel: params.filterModel,\n          sortModel: params.sortModel,\n        },\n        {\n          minDelay: 300,\n          maxDelay: 800,\n          useCursorPagination: false,\n        },\n        columnsWithDefaultColDef,\n      );\n\n      return {\n        slice: serverRows.returnedRows.slice(\n          params.firstRowToRender,\n          params.lastRowToRender,\n        ),\n        total: serverRows.returnedRows.length,\n      };\n    },\n    [dataServerSide],\n  );\n\n  // The initial fetch request of the viewport.\n  React.useEffect(() => {\n    if (dataServerSide.length === 0) {\n      return;\n    }\n\n    (async () => {\n      const { slice, total } = await fetchRow({\n        firstRowToRender: 0,\n        lastRowToRender: 10,\n        sortModel: [],\n        filterModel: {\n          items: [],\n        },\n      });\n\n      setInitialRows(slice);\n      setRowCount(total);\n    })();\n  }, [dataServerSide, fetchRow]);\n\n  // Fetch rows as they become visible in the viewport\n  const handleFetchRows = React.useCallback(\n    async (params: GridFetchRowsParams) => {\n      const { slice, total } = await fetchRow(params);\n\n      apiRef.current.unstable_replaceRows(params.firstRowToRender, slice);\n      setRowCount(total);\n    },\n    [apiRef, fetchRow],\n  );\n\n  const debouncedHandleFetchRows = React.useMemo(\n    () => debounce(handleFetchRows, 200),\n    [handleFetchRows],\n  );\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        columns={columns}\n        rows={initialRows}\n        apiRef={apiRef}\n        hideFooterPagination\n        rowCount={rowCount}\n        sortingMode=\"server\"\n        filterMode=\"server\"\n        rowsLoadingMode=\"server\"\n        onFetchRows={debouncedHandleFetchRows}\n        experimentalFeatures={{\n          lazyLoading: true,\n        }}\n      />\n    </div>\n  );\n}\n"},"ThrottledRowsGrid.js":{module:"./ThrottledRowsGrid.js",raw:"import * as React from 'react';\nimport { DataGridPro, useGridApiRef } from '@mui/x-data-grid-pro';\nimport { interval } from 'rxjs';\nimport { randomInt, randomUserName } from '@mui/x-data-grid-generator';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nconst rows = [\n  { id: 1, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 2, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 3, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 4, username: randomUserName(), age: randomInt(10, 80) },\n];\n\nexport default function ThrottledRowsGrid() {\n  const apiRef = useGridApiRef();\n\n  React.useEffect(() => {\n    const subscription = interval(10).subscribe(() => {\n      apiRef.current.updateRows([\n        {\n          id: randomInt(1, 4),\n          username: randomUserName(),\n          age: randomInt(10, 80),\n        },\n        {\n          id: randomInt(1, 4),\n          username: randomUserName(),\n          age: randomInt(10, 80),\n        },\n      ]);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [apiRef]);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        apiRef={apiRef}\n        throttleRowsMs={2000}\n      />\n    </div>\n  );\n}\n",jsxPreview:"<DataGridPro\n  rows={rows}\n  columns={columns}\n  apiRef={apiRef}\n  throttleRowsMs={2000}\n/>",moduleTS:"./ThrottledRowsGrid.js",rawTS:"import * as React from 'react';\nimport { DataGridPro, useGridApiRef } from '@mui/x-data-grid-pro';\nimport { interval } from 'rxjs';\nimport { randomInt, randomUserName } from '@mui/x-data-grid-generator';\n\nconst columns = [\n  { field: 'id' },\n  { field: 'username', width: 150 },\n  { field: 'age', width: 80, type: 'number' },\n];\n\nconst rows = [\n  { id: 1, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 2, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 3, username: randomUserName(), age: randomInt(10, 80) },\n  { id: 4, username: randomUserName(), age: randomInt(10, 80) },\n];\n\nexport default function ThrottledRowsGrid() {\n  const apiRef = useGridApiRef();\n\n  React.useEffect(() => {\n    const subscription = interval(10).subscribe(() => {\n      apiRef.current.updateRows([\n        {\n          id: randomInt(1, 4),\n          username: randomUserName(),\n          age: randomInt(10, 80),\n        },\n        {\n          id: randomInt(1, 4),\n          username: randomUserName(),\n          age: randomInt(10, 80),\n        },\n      ]);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [apiRef]);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        apiRef={apiRef}\n        throttleRowsMs={2000}\n      />\n    </div>\n  );\n}\n"}},U={"./UpdateRowsProp.js":function(){var e=t.useState((function(){return[R(),R(),R(),R()]})),n=(0,s.Z)(e,2),o=n[0],r=n[1];return(0,p.jsxs)(u.Z,{sx:{width:"100%"},children:[(0,p.jsxs)(c.Z,{direction:"row",spacing:1,children:[(0,p.jsx)(w.Z,{size:"small",onClick:function(){r((function(e){var n=(0,l.Iy)(0,o.length-1);return e.map((function(e,o){return o===n?(0,i.Z)((0,i.Z)({},e),{},{username:(0,l.yS)()}):e}))}))},children:"Update a row"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){r(o.map((function(e){return(0,i.Z)((0,i.Z)({},e),{},{username:(0,l.yS)()})})))},children:"Update all rows"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){r((function(e){var n=(0,l.Iy)(0,e.length-1);return[].concat((0,a.Z)(o.slice(0,n)),(0,a.Z)(o.slice(n+1)))}))},children:"Delete a row"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){r((function(e){return[].concat((0,a.Z)(e),[R()])}))},children:"Add a row"})]}),(0,p.jsx)(u.Z,{sx:{height:400,mt:1},children:(0,p.jsx)(d._,{rows:o,columns:m})})]})},"./UpdateRowsApiRef.js":function(){var e=(0,g.A)();return(0,p.jsxs)(u.Z,{sx:{width:"100%"},children:[(0,p.jsxs)(c.Z,{direction:"row",spacing:1,children:[(0,p.jsx)(w.Z,{size:"small",onClick:function(){var n=e.current.getAllRowIds(),o=(0,l.V9)(n);e.current.updateRows([{id:o,username:(0,l.yS)()}])},children:"Update a row"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){var n=e.current.getAllRowIds();e.current.updateRows(n.map((function(e){return{id:e,username:(0,l.yS)()}})))},children:"Update all rows"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){var n=e.current.getAllRowIds(),o=(0,l.V9)(n);e.current.updateRows([{id:o,_action:"delete"}])},children:"Delete a row"}),(0,p.jsx)(w.Z,{size:"small",onClick:function(){e.current.updateRows([C()])},children:"Add a row"})]}),(0,p.jsx)(u.Z,{sx:{height:400,mt:1},children:(0,p.jsx)(h.s,{apiRef:e,rows:I,columns:S})})]})},"./InfiniteLoadingGrid.js":function(){var e=t.useState(!1),n=(0,s.Z)(e,2),o=n[0],r=n[1],a=t.useState([]),d=(0,s.Z)(a,2),l=d[0],u=d[1],c=t.useRef(!0),w=(0,b.PT)({dataSet:"Commodity",rowLength:20,maxColumns:6}).data,m=function(){var e=(0,y.Z)((0,x.Z)().mark((function e(n){var o;return(0,x.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r(!0),e.next=3,(0,k.k)(n,(0,G.X)());case 3:return o=e.sent,e.next=6,E(500*Math.random()+100);case 6:c.current&&(r(!1),u(l.concat(o.rows)));case 7:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();return t.useEffect((function(){return function(){c.current=!0}}),[]),(0,p.jsx)("div",{style:{height:400,width:"100%"},children:(0,p.jsx)(h.s,(0,i.Z)((0,i.Z)({},w),{},{rows:w.rows.concat(l),loading:o,hideFooterPagination:!0,onRowsScrollEnd:function(e){l.length<=500&&m(e.viewportPageSize)},components:{LoadingOverlay:T.Z}}))})},"./LazyLoadingGrid.js":P.Z,"./ThrottledRowsGrid.js":function(){var e=(0,g.A)();return t.useEffect((function(){var n=(0,_.F)(10).subscribe((function(){e.current.updateRows([{id:(0,l.Iy)(1,4),username:(0,l.yS)(),age:(0,l.Iy)(10,80)},{id:(0,l.Iy)(1,4),username:(0,l.yS)(),age:(0,l.Iy)(10,80)}])}));return function(){n.unsubscribe()}}),[e]),(0,p.jsx)("div",{style:{height:400,width:"100%"},children:(0,p.jsx)(h.s,{rows:F,columns:A,apiRef:e,throttleRowsMs:2e3})})}};function N(){return(0,p.jsx)(r.Z,{demos:Z,docs:M,demoComponents:U})}},37718:function(e,n,o){"use strict";o.d(n,{$:function(){return y},j:function(){return v}});var t=o(66283),r=o(77809),a=o(25778),i=o(23315),s=o(95649),d=o(74338),l=o.n(d),u=o(85851),c=o.n(u),w=o(96138),p=o.n(w),m=o(27378),f=o(59404),R=o(30552),g=o(81260),h=o(76352),S=function(e,n){return function(o){var t,r={id:o.id,row:o,field:e,rowNode:{}};return(null===(t=n.valueGetter)||void 0===t?void 0:t.call(n,r))||o[e]}},v=function(e,n,o,t){var r=o.minDelay,a=void 0===r?100:r,d=o.maxDelay,u=void 0===d?300:d,w=o.useCursorPagination;if(u<a)throw new Error("serverOptions.minDelay is larger than serverOptions.maxDelay ");var p,m,R,g=Math.random()*(u-a)+a,h=n.cursor,v=n.page,C=void 0===v?0:v,I=n.pageSize,x=function(e,n,o){if(void 0===n||0===n.items.length)return e;var t=n.items.map((function(e){var n=e.columnField;return S(n,o.find((function(e){return e.field===n})))})),r=n.items.map((function(e){var n=e.columnField,t=e.operatorValue,r=o.find((function(e){return e.field===n})),a=r.filterOperators.find((function(e){var n=e.value;return t===n})),i=e.value;if(r.valueParser){var s,d=r.valueParser;i=l()(e.value)?null===(s=e.value)||void 0===s?void 0:s.map((function(e){return d(e)})):d(e.value)}return null===a||void 0===a?void 0:a.getApplyFilterFn({filterItem:e,value:i},r)}));return n.linkOperator===f.GridLinkOperator.Or?e.filter((function(e){return n.items.some((function(n,o){var a=t[o](e);return null===r[o]||r[o]({value:a})}))})):e.filter((function(e){return n.items.every((function(n,o){var a=t[o](e);return null===r[o]||r[o]({value:a})}))}))}(e,n.filterModel,t),y=function(e,n){if(!e)return function(){return 0};var o=e.map((function(e){var o=e.field,t=n.find((function(e){return e.field===o}));return(0,s.Z)((0,s.Z)({},e),{},{valueGetter:S(o,t),sortComparator:t.sortComparator})}));return function(e,n){return o.reduce((function(o,t){var r=t.valueGetter,a=t.sort,i=t.sortComparator;if(0!==o)return o;var s=r(e),d=r(n);return"desc"===a?-1*i(s,d):i(s,d)}),0)}}(n.sortModel,t),D=(x=(0,i.Z)(x).sort(y)).length;I?w?(m=h?x.findIndex((function(e){return e.id===h})):0,p=(R=(m=Math.max(m,0))+I)>=x.length?void 0:x[R].id):(m=C*I,R=(C+1)*I):(m=0,R=x.length);var L={returnedRows:x.slice(m,R),nextCursor:p,totalRowCount:D};return new(c())((function(e){setTimeout((function(){e(L)}),g)}))},C={dataSet:"Commodity",rowLength:100,maxColumns:6},I="undefined"!==typeof DISABLE_CHANCE_RANDOM&&DISABLE_CHANCE_RANDOM,x={minDelay:I?0:100,maxDelay:I?0:300,useCursorPagination:!0},y=function(e,n){var o=(0,s.Z)((0,s.Z)({},C),e),i=(0,s.Z)((0,s.Z)({},x),n),d=(0,h.wu)(o),l=(0,h.aY)(o,d),u=(0,R.t)(),c=d.map((function(e){return(0,s.Z)((0,s.Z)({},u[e.type||"string"]),e)}));return{columns:d,columnsWithDefaultColDef:c,initialState:l,useQuery:function(e){var n=(0,h.PT)(o),d=n.data.rows,l=n.loading,u=m.useRef(e),w=m.useState({pageInfo:{},data:[]}),f=(0,a.Z)(w,2),R=f[0],S=f[1],C=m.useState(l),I=(0,a.Z)(C,2),x=I[0],y=I[1];m.useEffect((function(){if(l)return function(){};u.current=e;var n=!0;return y(!0),S((function(e){return 0===p()(e.pageInfo).length?e:(0,s.Z)((0,s.Z)({},e),{},{pageInfo:{}})})),function(){var o=(0,r.Z)((0,t.Z)().mark((function o(){var r,a,s,l,u;return(0,t.Z)().wrap((function(o){for(;;)switch(o.prev=o.next){case 0:return o.next=2,v(d,e,i,c);case 2:if(r=o.sent,a=r.returnedRows,s=r.nextCursor,l=r.totalRowCount,n){o.next=8;break}return o.abrupt("return");case 8:u={data:a,pageInfo:{totalRowCount:l,nextCursor:s,pageSize:a.length}},S((function(e){return(0,g.xb)(e,u)?e:u})),y(!1);case 11:case"end":return o.stop()}}),o)})));return function(){return o.apply(this,arguments)}}()(),function(){n=!1}}),[l,e,d]);var D=u.current!==e;return(0,s.Z)({isLoading:x||D},R)}}}},26582:function(e,n,o){"use strict";o.d(n,{s:function(){return ge}});var t=o(27378),r=o(12482),a=o(37919),i=o(9563),s=o(61354),d=o(2944),l=o(34535),u=o(87199),c=o(12986),w=o(97244),p=o(87495),m=o(50507),f=o(15805),R=o(81746),g=o(12084),h=o(89621),S=o(48715),v=o(69789),C=o(91676),I=o(83864),x=o(89446),y=o(23752),D=o(94053),L=o(47786),b=o(68753),k=o(95158),G=o(29136),T=o(8679),E=o(62430),P=o(61598),_=o(18327),A=o(92666),F=o(38177),M=o(82060),Z=o(31813),U=o(95088),N=o(18117),O=o(93652),j=o(98610),B=o(6569),z=o(66931),V=o(92356),H=o(44305),q=o(27298),W=o(69863),Q=o(86278),X=o(694),K=o(86329),$=o(45933),Y=o(25778),J=o(22755),ee=o(73259),ne=o(42225),oe=o(94675),te=o(59694);function re(e){var n=e.lazyLoadingFeatureFlag,o=e.rowsLoadingMode,t=e.gridDimensions;return!n||!t||o!==J.GridFeatureModeConstant.server}var ae=o(95649),ie=o(23315),se=o(75912),de=o(18318),le=o(78110),ue=function(e,n){var o,r,a=(0,w.S)(e,n);return(0,p.m)(a,n),(0,m.e)(a,n),(0,$._)(a,n),(0,H.z)(a,n),function(e,n){var o,r=(null!==(o=n.experimentalFeatures)&&void 0!==o?o:{}).lazyLoading,a=t.useCallback((function(e){if(!r||n.rowsLoadingMode!==J.GridFeatureModeConstant.server||!n.rowCount||e.ids.length>=n.rowCount)return e;for(var o,t=(0,ie.Z)(e.ids),a=0;a<n.rowCount-e.ids.length;a+=1){var i=(o=a,"".concat("auto-generated-skeleton-row-root","-").concat(o));t.push(i)}return(0,ae.Z)((0,ae.Z)({},e),{},{ids:t})}),[n.rowCount,n.rowsLoadingMode,r]);(0,se.Z)(e,"hydrateRows",a)}(a,n),(0,le.$)(a),(0,X.N)(a,n),(0,W.P)(a,n),(0,f.Q)(a),(0,R.l)(g.k,a,n),(0,R.l)(Q.g,a,n),(0,R.l)(q.l,a,n),(0,R.l)(h.P,a,n),(0,R.l)(de.a,a,n),(0,R.l)(S.F,a,n),(0,R.l)(null!==(o=n.experimentalFeatures)&&void 0!==o&&o.newEditingApi?v.U:C.U,a,n),(0,R.l)(I.W,a,n),(0,R.l)(x.Q,a,n),(0,R.l)(y.Z,a,n),(0,R.l)(D.B,a,n),(0,R.l)(L.ce,a,n),(0,R.l)(B.b,a,n),(0,R.l)(z.D,a,n),(0,R.l)(b.I,a,n),(0,R.l)(k.Q,a,n),(0,R.l)(G.V,a,n),(0,R.l)(T.u4,a,n),(0,V.H)(a),(0,E.D)(a,n),(0,g.r)(a,n),(0,q.X)(a,n),(0,de.d)(a,n),(0,h.C)(a,n),(0,S.K)(a,n),(0,P.G)(a),(0,Q.k)(a,n),(0,_.n)(a),(0,T.ap)(a,n),(null!==(r=n.experimentalFeatures)&&void 0!==r&&r.newEditingApi?v.s:C.s)(a,n),(0,I.z)(a,n),(0,y.M)(a,n),(0,D.L)(a,n),(0,x.G)(a,n),(0,L.km)(a,n),(0,B.T)(a,n),(0,z.p)(a,n),(0,b.e)(a,n),(0,k.y)(a,n),(0,K.p)(a,n),(0,A.K)(a,n),(0,j.A)(a,n),function(e,n){var o,r=(0,oe.y)(e,n),a=(0,ee.P)(e,J.gridSortModelSelector),i=(0,ee.P)(e,J.gridFilterModelSelector),s=t.useRef({firstRowToRender:0,lastRowToRender:0}),d=(null!==(o=n.experimentalFeatures)&&void 0!==o?o:{}).lazyLoading,l=t.useCallback((function(){var o=e.current.unstable_getRenderContext(),t=(0,te.sn)({firstIndex:o.firstRowIndex,lastIndex:o.lastRowIndex,minFirstIndex:0,maxLastIndex:r.rows.length,buffer:n.rowBuffer}),a=(0,Y.Z)(t,2);return{firstRowToRender:a[0],lastRowToRender:a[1]}}),[e,n.rowBuffer,r.rows.length]),u=t.useCallback((function(o){var t=e.current.getRootDimensions();if(!re({lazyLoadingFeatureFlag:d,rowsLoadingMode:n.rowsLoadingMode,gridDimensions:t})){var l={firstRowToRender:o.firstRowToRender,lastRowToRender:o.lastRowToRender,sortModel:a,filterModel:i};if(s.current.firstRowToRender!==o.firstRowToRender||s.current.lastRowToRender!==o.lastRowToRender){if(0===a.length&&0===i.items.length){var u=function(e,n){for(var o=n.firstRowIndex,t=n.lastRowIndex,r=e.slice(n.firstRowIndex,n.lastRowIndex),a=0,i=r.length-1,s=!1;!s&&o<t;)r[a].model||r[i].model||(s=!0),r[a].model&&(a+=1,o+=1),r[i].model&&(i-=1,t-=1);return s?{firstRowIndex:o,lastRowIndex:t}:void 0}(r.rows,{firstRowIndex:o.firstRowToRender,lastRowIndex:o.lastRowToRender});if(!u)return;l.firstRowToRender=u.firstRowIndex,l.lastRowToRender=u.lastRowIndex}s.current=o,e.current.publishEvent("fetchRows",l)}}}),[e,n.rowsLoadingMode,a,i,r.rows,d]),c=t.useCallback((function(o){var t=e.current.getRootDimensions();if(!re({lazyLoadingFeatureFlag:d,rowsLoadingMode:n.rowsLoadingMode,gridDimensions:t})){e.current.unstable_requestPipeProcessorsApplication("hydrateRows");var r=l(),a={firstRowToRender:r.firstRowToRender,lastRowToRender:r.lastRowToRender,sortModel:o,filterModel:i};e.current.publishEvent("fetchRows",a)}}),[e,n.rowsLoadingMode,i,d,l]),w=t.useCallback((function(o){var t=e.current.getRootDimensions();if(!re({lazyLoadingFeatureFlag:d,rowsLoadingMode:n.rowsLoadingMode,gridDimensions:t})){e.current.unstable_requestPipeProcessorsApplication("hydrateRows");var r=l(),i={firstRowToRender:r.firstRowToRender,lastRowToRender:r.lastRowToRender,sortModel:a,filterModel:o};e.current.publishEvent("fetchRows",i)}}),[e,n.rowsLoadingMode,a,d,l]);(0,ne.zn)(e,"renderedRowsIntervalChange",u),(0,ne.zn)(e,"sortModelChange",c),(0,ne.zn)(e,"filterModelChange",w),(0,ne.x3)(e,"fetchRows",n.onFetchRows)}(a,n),(0,G.p)(a),(0,F._)(a),(0,M.d)(a,n),(0,Z.D)(a),(0,U.J)(a,n),(0,N.I)(a,n),(0,O.s)(a),a},ce=o(38041),we=o(94239),pe=o(27016),me=o(24246),fe="MTU5NjMxOTIwMDAwMA==",Re=t.forwardRef((function(e,n){var o=(0,ce.d)(e),t=ue(o.apiRef,o);return(0,r.O)("x-data-grid-pro",fe),(0,me.jsx)(i.d,{apiRef:t,props:o,children:(0,me.jsx)(s.n,{className:o.className,style:o.style,sx:o.sx,ref:n,children:(0,me.jsxs)(d.C,{children:[(0,me.jsx)(l.f,{}),(0,me.jsx)(u.U,{ColumnHeadersComponent:pe.r,VirtualScrollerComponent:we.X,children:(0,me.jsx)(a.l,{packageName:"x-data-grid-pro",releaseInfo:fe})}),(0,me.jsx)(c.B,{})]})})})})),ge=t.memo(Re)},34486:function(e,n,o){"use strict";o.d(n,{A:function(){return r}});var t=o(27378),r=function(){return t.useRef({})}},59404:function(e,n,o){"use strict";o.d(n,{GridEvents:function(){return r.GridEvents},GridLinkOperator:function(){return r.GridLinkOperator},GridRowModes:function(){return r.GridRowModes}});var t=o(1489);o.o(t,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return t.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),o.o(t,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return t.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),o.o(t,"GridEvents")&&o.d(n,{GridEvents:function(){return t.GridEvents}}),o.o(t,"GridLinkOperator")&&o.d(n,{GridLinkOperator:function(){return t.GridLinkOperator}}),o.o(t,"GridRowModes")&&o.d(n,{GridRowModes:function(){return t.GridRowModes}}),o.o(t,"gridColumnLookupSelector")&&o.d(n,{gridColumnLookupSelector:function(){return t.gridColumnLookupSelector}}),o.o(t,"gridColumnVisibilityModelSelector")&&o.d(n,{gridColumnVisibilityModelSelector:function(){return t.gridColumnVisibilityModelSelector}}),o.o(t,"gridDetailPanelExpandedRowsContentCacheSelector")&&o.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return t.gridDetailPanelExpandedRowsContentCacheSelector}}),o.o(t,"gridFilteredDescendantCountLookupSelector")&&o.d(n,{gridFilteredDescendantCountLookupSelector:function(){return t.gridFilteredDescendantCountLookupSelector}}),o.o(t,"gridFilteredRowsLookupSelector")&&o.d(n,{gridFilteredRowsLookupSelector:function(){return t.gridFilteredRowsLookupSelector}}),o.o(t,"gridPageCountSelector")&&o.d(n,{gridPageCountSelector:function(){return t.gridPageCountSelector}}),o.o(t,"gridPageSelector")&&o.d(n,{gridPageSelector:function(){return t.gridPageSelector}}),o.o(t,"gridPaginatedVisibleSortedGridRowIdsSelector")&&o.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return t.gridPaginatedVisibleSortedGridRowIdsSelector}}),o.o(t,"gridRowIdsSelector")&&o.d(n,{gridRowIdsSelector:function(){return t.gridRowIdsSelector}}),o.o(t,"gridRowTreeSelector")&&o.d(n,{gridRowTreeSelector:function(){return t.gridRowTreeSelector}}),o.o(t,"gridVisibleColumnDefinitionsSelector")&&o.d(n,{gridVisibleColumnDefinitionsSelector:function(){return t.gridVisibleColumnDefinitionsSelector}}),o.o(t,"gridVisibleRowCountSelector")&&o.d(n,{gridVisibleRowCountSelector:function(){return t.gridVisibleRowCountSelector}}),o.o(t,"gridVisibleSortedRowIdsSelector")&&o.d(n,{gridVisibleSortedRowIdsSelector:function(){return t.gridVisibleSortedRowIdsSelector}});var r=o(53418);o.o(r,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),o.o(r,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),o.o(r,"gridColumnLookupSelector")&&o.d(n,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),o.o(r,"gridColumnVisibilityModelSelector")&&o.d(n,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),o.o(r,"gridDetailPanelExpandedRowsContentCacheSelector")&&o.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}}),o.o(r,"gridFilteredDescendantCountLookupSelector")&&o.d(n,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),o.o(r,"gridFilteredRowsLookupSelector")&&o.d(n,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),o.o(r,"gridPageCountSelector")&&o.d(n,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),o.o(r,"gridPageSelector")&&o.d(n,{gridPageSelector:function(){return r.gridPageSelector}}),o.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&o.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),o.o(r,"gridRowIdsSelector")&&o.d(n,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),o.o(r,"gridRowTreeSelector")&&o.d(n,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),o.o(r,"gridVisibleColumnDefinitionsSelector")&&o.d(n,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),o.o(r,"gridVisibleRowCountSelector")&&o.d(n,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),o.o(r,"gridVisibleSortedRowIdsSelector")&&o.d(n,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}});var a=o(20782);o.o(a,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return a.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),o.o(a,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return a.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),o.o(a,"gridColumnLookupSelector")&&o.d(n,{gridColumnLookupSelector:function(){return a.gridColumnLookupSelector}}),o.o(a,"gridColumnVisibilityModelSelector")&&o.d(n,{gridColumnVisibilityModelSelector:function(){return a.gridColumnVisibilityModelSelector}}),o.o(a,"gridDetailPanelExpandedRowsContentCacheSelector")&&o.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return a.gridDetailPanelExpandedRowsContentCacheSelector}}),o.o(a,"gridFilteredDescendantCountLookupSelector")&&o.d(n,{gridFilteredDescendantCountLookupSelector:function(){return a.gridFilteredDescendantCountLookupSelector}}),o.o(a,"gridFilteredRowsLookupSelector")&&o.d(n,{gridFilteredRowsLookupSelector:function(){return a.gridFilteredRowsLookupSelector}}),o.o(a,"gridPageCountSelector")&&o.d(n,{gridPageCountSelector:function(){return a.gridPageCountSelector}}),o.o(a,"gridPageSelector")&&o.d(n,{gridPageSelector:function(){return a.gridPageSelector}}),o.o(a,"gridPaginatedVisibleSortedGridRowIdsSelector")&&o.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return a.gridPaginatedVisibleSortedGridRowIdsSelector}}),o.o(a,"gridRowIdsSelector")&&o.d(n,{gridRowIdsSelector:function(){return a.gridRowIdsSelector}}),o.o(a,"gridRowTreeSelector")&&o.d(n,{gridRowTreeSelector:function(){return a.gridRowTreeSelector}}),o.o(a,"gridVisibleColumnDefinitionsSelector")&&o.d(n,{gridVisibleColumnDefinitionsSelector:function(){return a.gridVisibleColumnDefinitionsSelector}}),o.o(a,"gridVisibleRowCountSelector")&&o.d(n,{gridVisibleRowCountSelector:function(){return a.gridVisibleRowCountSelector}}),o.o(a,"gridVisibleSortedRowIdsSelector")&&o.d(n,{gridVisibleSortedRowIdsSelector:function(){return a.gridVisibleSortedRowIdsSelector}});var i=o(33917);o.o(i,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return i.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),o.o(i,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&o.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return i.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),o.o(i,"gridColumnLookupSelector")&&o.d(n,{gridColumnLookupSelector:function(){return i.gridColumnLookupSelector}}),o.o(i,"gridColumnVisibilityModelSelector")&&o.d(n,{gridColumnVisibilityModelSelector:function(){return i.gridColumnVisibilityModelSelector}}),o.o(i,"gridDetailPanelExpandedRowsContentCacheSelector")&&o.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return i.gridDetailPanelExpandedRowsContentCacheSelector}}),o.o(i,"gridFilteredDescendantCountLookupSelector")&&o.d(n,{gridFilteredDescendantCountLookupSelector:function(){return i.gridFilteredDescendantCountLookupSelector}}),o.o(i,"gridFilteredRowsLookupSelector")&&o.d(n,{gridFilteredRowsLookupSelector:function(){return i.gridFilteredRowsLookupSelector}}),o.o(i,"gridPageCountSelector")&&o.d(n,{gridPageCountSelector:function(){return i.gridPageCountSelector}}),o.o(i,"gridPageSelector")&&o.d(n,{gridPageSelector:function(){return i.gridPageSelector}}),o.o(i,"gridPaginatedVisibleSortedGridRowIdsSelector")&&o.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return i.gridPaginatedVisibleSortedGridRowIdsSelector}}),o.o(i,"gridRowIdsSelector")&&o.d(n,{gridRowIdsSelector:function(){return i.gridRowIdsSelector}}),o.o(i,"gridRowTreeSelector")&&o.d(n,{gridRowTreeSelector:function(){return i.gridRowTreeSelector}}),o.o(i,"gridVisibleColumnDefinitionsSelector")&&o.d(n,{gridVisibleColumnDefinitionsSelector:function(){return i.gridVisibleColumnDefinitionsSelector}}),o.o(i,"gridVisibleRowCountSelector")&&o.d(n,{gridVisibleRowCountSelector:function(){return i.gridVisibleRowCountSelector}}),o.o(i,"gridVisibleSortedRowIdsSelector")&&o.d(n,{gridVisibleSortedRowIdsSelector:function(){return i.gridVisibleSortedRowIdsSelector}})},49260:function(e,n,o){"use strict";o.d(n,{_:function(){return fe}});var t=o(27378),r=o(61354),a=o(2944),i=o(34535),s=o(87199),d=o(12986),l=o(9563),u=o(97244),c=o(81746),w=o(31813),p=o(29136),m=o(89621),f=o(47786),R=o(38177),g=o(82060),h=o(94053),S=o(83864),v=o(62430),C=o(68753),I=o(23752),x=o(91676),y=o(69789),D=o(48715),L=o(15805),b=o(61598),k=o(12084),G=o(50507),T=o(89446),E=o(92666),P=o(18117),_=o(95088),A=o(95158),F=o(93652),M=o(18327),Z=o(8679),U=o(87495),N=o(62905),O=o(95649),j=o(81936),B=o(77863),z=o(18913),V=o(80262),H=o(59694),q=o(24246),W=["className","disableVirtualization"],Q=t.forwardRef((function(e,n){var o=e.className,t=e.disableVirtualization,r=(0,j.Z)(e,W),a=(0,H.cD)({ref:n,disableVirtualization:t}),i=a.getRootProps,s=a.getContentProps,d=a.getRenderZoneProps,l=a.getRows;return(0,q.jsx)(B.O,(0,O.Z)((0,O.Z)({className:o},i(r)),{},{children:(0,q.jsx)(z._,(0,O.Z)((0,O.Z)({},s()),{},{children:(0,q.jsx)(V.H,(0,O.Z)((0,O.Z)({},d()),{},{children:l()}))}))}))})),X=o(21526),K=o(25778),$=o(57379),Y=o(38944),J=o(82267),ee=o(67018),ne=o(42225),oe=o(84933),te=o(28457),re=o(96515),ae=o(76049),ie=o(73259),se=(0,ee.ZP)("div",{name:"MuiDataGrid",slot:"ScrollArea",overridesResolver:function(e,n){return[(0,$.Z)({},"&.".concat(te._["scrollArea--left"]),n["scrollArea--left"]),(0,$.Z)({},"&.".concat(te._["scrollArea--right"]),n["scrollArea--right"]),n.scrollArea]}})((function(){var e;return e={position:"absolute",top:0,zIndex:101,width:20,bottom:0},(0,$.Z)(e,"&.".concat(te._["scrollArea--left"]),{left:0}),(0,$.Z)(e,"&.".concat(te._["scrollArea--right"]),{right:0}),e}));function de(e){var n=e.scrollDirection,o=t.useRef(null),r=(0,oe.l)(),a=t.useRef(),i=t.useState(!1),s=(0,K.Z)(i,2),d=s[0],l=s[1],u=(0,ie.P)(r,ae.wr),c=t.useRef({left:0,top:0}),w=(0,re.B)(),p=function(e){var n=e.scrollDirection,o=e.classes,t={root:["scrollArea","scrollArea--".concat(n)]};return(0,J.Z)(t,te.d,o)}((0,O.Z)((0,O.Z)({},e),{},{classes:w.classes})),m=t.useCallback((function(e){c.current=e}),[]),f=t.useCallback((function(e){var t;if("left"===n)t=e.clientX-o.current.getBoundingClientRect().right;else{if("right"!==n)throw new Error("MUI: Wrong drag direction");t=Math.max(1,e.clientX-o.current.getBoundingClientRect().left)}t=1.5*(t-1)+1,clearTimeout(a.current),a.current=setTimeout((function(){r.current.scroll({left:c.current.left+t,top:c.current.top})}))}),[n,r]);t.useEffect((function(){return function(){clearTimeout(a.current)}}),[]);var R=t.useCallback((function(){l((function(e){return!e}))}),[]);return(0,ne.zn)(r,"rowsScroll",m),(0,ne.zn)(r,"columnHeaderDragStart",R),(0,ne.zn)(r,"columnHeaderDragEnd",R),d?(0,q.jsx)(se,{ref:o,className:(0,Y.Z)(p.root),onDragOver:f,style:{height:u}}):null}var le=t.memo(de),ue=o(10364),ce=o(93490),we=["innerRef","className"],pe=t.forwardRef((function(e,n){var o=e.innerRef,t=(e.className,(0,j.Z)(e,we)),r=(0,X.L)({innerRef:o}),a=r.isDragging,i=r.getRootProps,s=r.getInnerProps,d=r.getColumnHeaders,l=r.getColumnGroupHeaders;return(0,q.jsxs)(ue.n,(0,O.Z)((0,O.Z)({ref:n},i(t)),{},{children:[(0,q.jsx)(le,{scrollDirection:"left"}),(0,q.jsxs)(ce.F,(0,O.Z)((0,O.Z)({isDragging:a},s()),{},{children:[l(),d()]})),(0,q.jsx)(le,{scrollDirection:"right"})]}))})),me=t.forwardRef((function(e,n){var o=(0,N.pu)(e),t=function(e){var n,o,t=(0,u.S)(void 0,e);return(0,U.m)(t,e),(0,G.e)(t,e),(0,L.Q)(t),(0,c.l)(k.k,t,e),(0,c.l)(m.P,t,e),(0,c.l)(Z.u4,t,e),(0,c.l)(D.F,t,e),(0,c.l)(null!==(n=e.experimentalFeatures)&&void 0!==n&&n.newEditingApi?y.U:x.U,t,e),(0,c.l)(S.W,t,e),(0,c.l)(T.Q,t,e),(0,c.l)(I.Z,t,e),(0,c.l)(h.B,t,e),(0,c.l)(f.ce,t,e),(0,c.l)(C.I,t,e),(0,c.l)(A.Q,t,e),(0,c.l)(p.V,t,e),(0,v.D)(t,e),(0,k.r)(t,e),(0,m.C)(t,e),(0,D.K)(t,e),(0,b.G)(t),(0,M.n)(t),(0,Z.ap)(t,e),(null!==(o=e.experimentalFeatures)&&void 0!==o&&o.newEditingApi?y.s:x.s)(t,e),(0,S.z)(t,e),(0,I.M)(t,e),(0,h.L)(t,e),(0,T.G)(t,e),(0,f.km)(t,e),(0,C.e)(t,e),(0,A.y)(t,e),(0,E.K)(t,e),(0,p.p)(t),(0,R._)(t),(0,g.d)(t,e),(0,w.D)(t),(0,_.J)(t,e),(0,P.I)(t,e),(0,F.s)(t),t}(o);return(0,q.jsx)(l.d,{apiRef:t,props:o,children:(0,q.jsx)(r.n,{className:o.className,style:o.style,sx:o.sx,ref:n,children:(0,q.jsxs)(a.C,{children:[(0,q.jsx)(i.f,{}),(0,q.jsx)(s.U,{ColumnHeadersComponent:pe,VirtualScrollerComponent:Q}),(0,q.jsx)(d.B,{})]})})})})),fe=t.memo(me)},20923:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/x/react-data-grid/row-updates",function(){return o(3380)}])}},function(e){e.O(0,[7178,6047,6767,9332,5312,3397,5699,9547,9007,3783,8496,6352,9774,2888,179],(function(){return n=20923,e(e.s=n);var n}));var n=e.O();_N_E=n}]);