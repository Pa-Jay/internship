(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4983],{64953:function(e,n,a){"use strict";var t=a(73203);n.Z=void 0;var o=t(a(19124)),r=a(24246),s=(0,o.default)((0,r.jsx)("path",{d:"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"}),"DeleteOutlined");n.Z=s},28729:function(e,n,a){"use strict";var t=a(73203);n.Z=void 0;var o=t(a(19124)),r=a(24246),s=(0,o.default)((0,r.jsx)("path",{d:"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"}),"Edit");n.Z=s},77917:function(e,n,a){"use strict";var t=a(73203);n.Z=void 0;var o=t(a(19124)),r=a(24246),s=(0,o.default)((0,r.jsx)("path",{d:"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"}),"Save");n.Z=s},60743:function(e,n,a){"use strict";a.d(n,{Z:function(){return N}});var t=a(30808),o=a(25773),r=a(27378),s=a(38944),i=a(82267),d=a(7818),l=a(67018),c=a(76112),p=a(89090),u=a(80252),m=a(6749);function g(e){return(0,m.Z)("MuiAlert",e)}var h,f=(0,a(44124).Z)("MuiAlert",["root","action","icon","message","filled","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]),w=a(7687),C=a(17849),k=a(24246),v=(0,C.Z)((0,k.jsx)("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),b=(0,C.Z)((0,k.jsx)("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),R=(0,C.Z)((0,k.jsx)("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),S=(0,C.Z)((0,k.jsx)("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),y=a(57699);const D=["action","children","className","closeText","color","icon","iconMapping","onClose","role","severity","variant"],E=(0,l.ZP)(u.Z,{name:"MuiAlert",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:a}=e;return[n.root,n[a.variant],n[`${a.variant}${(0,p.Z)(a.color||a.severity)}`]]}})((({theme:e,ownerState:n})=>{const a="light"===e.palette.mode?d._j:d.$n,t="light"===e.palette.mode?d.$n:d._j,r=n.color||n.severity;return(0,o.Z)({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px"},r&&"standard"===n.variant&&{color:e.vars?e.vars.palette.Alert[`${r}Color`]:a(e.palette[r].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${r}StandardBg`]:t(e.palette[r].light,.9),[`& .${f.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:"dark"===e.palette.mode?e.palette[r].main:e.palette[r].light}},r&&"outlined"===n.variant&&{color:e.vars?e.vars.palette.Alert[`${r}Color`]:a(e.palette[r].light,.6),border:`1px solid ${(e.vars||e).palette[r].light}`,[`& .${f.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:"dark"===e.palette.mode?e.palette[r].main:e.palette[r].light}},r&&"filled"===n.variant&&(0,o.Z)({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[`${r}FilledColor`],backgroundColor:e.vars.palette.Alert[`${r}FilledBg`]}:{backgroundColor:"dark"===e.palette.mode?e.palette[r].dark:e.palette[r].main,color:e.palette.getContrastText("dark"===e.palette.mode?e.palette[r].dark:e.palette[r].main)}))})),M=(0,l.ZP)("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,n)=>n.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),x=(0,l.ZP)("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,n)=>n.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),G=(0,l.ZP)("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,n)=>n.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),L={success:(0,k.jsx)(v,{fontSize:"inherit"}),warning:(0,k.jsx)(b,{fontSize:"inherit"}),error:(0,k.jsx)(R,{fontSize:"inherit"}),info:(0,k.jsx)(S,{fontSize:"inherit"})};var N=r.forwardRef((function(e,n){const a=(0,c.Z)({props:e,name:"MuiAlert"}),{action:r,children:d,className:l,closeText:u="Close",color:m,icon:f,iconMapping:C=L,onClose:v,role:b="alert",severity:R="success",variant:S="standard"}=a,N=(0,t.Z)(a,D),T=(0,o.Z)({},a,{color:m,severity:R,variant:S}),P=(e=>{const{variant:n,color:a,severity:t,classes:o}=e,r={root:["root",`${n}${(0,p.Z)(a||t)}`,`${n}`],icon:["icon"],message:["message"],action:["action"]};return(0,i.Z)(r,g,o)})(T);return(0,k.jsxs)(E,(0,o.Z)({role:b,elevation:0,ownerState:T,className:(0,s.Z)(P.root,l),ref:n},N,{children:[!1!==f?(0,k.jsx)(M,{ownerState:T,className:P.icon,children:f||C[R]||L[R]}):null,(0,k.jsx)(x,{ownerState:T,className:P.message,children:d}),null!=r?(0,k.jsx)(G,{ownerState:T,className:P.action,children:r}):null,null==r&&v?(0,k.jsx)(G,{ownerState:T,className:P.action,children:(0,k.jsx)(w.Z,{size:"small","aria-label":u,title:u,color:"inherit",onClick:v,children:h||(h=(0,k.jsx)(y.Z,{fontSize:"small"}))})}):null]}))}))},20518:function(e,n,a){"use strict";var t=a(30808),o=a(25773),r=a(27378),s=a(38944),i=a(82267),d=a(67018),l=a(76112),c=a(54202),p=a(54350),u=a(24246);const m=["className"],g=(0,d.ZP)("div",{name:"MuiListItemIcon",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:a}=e;return[n.root,"flex-start"===a.alignItems&&n.alignItemsFlexStart]}})((({theme:e,ownerState:n})=>(0,o.Z)({minWidth:56,color:(e.vars||e).palette.action.active,flexShrink:0,display:"inline-flex"},"flex-start"===n.alignItems&&{marginTop:8}))),h=r.forwardRef((function(e,n){const a=(0,l.Z)({props:e,name:"MuiListItemIcon"}),{className:d}=a,h=(0,t.Z)(a,m),f=r.useContext(p.Z),w=(0,o.Z)({},a,{alignItems:f.alignItems}),C=(e=>{const{alignItems:n,classes:a}=e,t={root:["root","flex-start"===n&&"alignItemsFlexStart"]};return(0,i.Z)(t,c.f,a)})(w);return(0,u.jsx)(g,(0,o.Z)({className:(0,s.Z)(C.root,d),ownerState:w,ref:n},h))}));n.Z=h},7832:function(e,n,a){"use strict";a.r(n),a.d(n,{default:function(){return Me}});var t=a(27378),o=a(86767),r=a(49260),s=a(43783),i=a(24246);var d=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],l=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],c=a(20922);var p=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],u=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],m=a(95649),g=a(25778);var h=[{field:"firstName",headerName:"First name",width:130,editable:!0},{field:"lastName",headerName:"Last name",width:130,editable:!0},{field:"fullName",headerName:"Full name",width:160,editable:!0,valueGetter:function(e){return"".concat(e.row.firstName||""," ").concat(e.row.lastName||"")},valueSetter:function(e){var n=e.value.toString().split(" "),a=(0,g.Z)(n,2),t=a[0],o=a[1];return(0,m.Z)((0,m.Z)({},e.row),{},{firstName:t,lastName:o})},valueParser:function(e){return String(e).split(" ").map((function(e){return e.length>0?e[0].toUpperCase()+e.slice(1):""})).join(" ")},sortComparator:function(e,n){return e.toString().localeCompare(n.toString())}}],f=[{id:1,lastName:"Snow",firstName:"Jon"},{id:2,lastName:"Lannister",firstName:"Cersei"},{id:3,lastName:"Lannister",firstName:"Jaime"},{id:4,lastName:"Stark",firstName:"Arya"},{id:5,lastName:"Targaryen",firstName:"Daenerys"}],w=a(22755);var C=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],k=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],v=a(57379),b=a(15830);function R(e){var n=e.selectedCellParams,a=e.cellMode,t=e.cellModesModel,o=e.setCellModesModel,r=function(e){e.preventDefault()};return(0,i.jsxs)(c.Z,{sx:{borderBottom:1,borderColor:"divider",p:1},children:[(0,i.jsx)(b.Z,{onClick:function(){if(n){var e=n.id,r=n.field;o("edit"===a?(0,m.Z)((0,m.Z)({},t),{},(0,v.Z)({},e,(0,m.Z)((0,m.Z)({},t[e]),{},(0,v.Z)({},r,{mode:w.GridCellModes.View})))):(0,m.Z)((0,m.Z)({},t),{},(0,v.Z)({},e,(0,m.Z)((0,m.Z)({},t[e]),{},(0,v.Z)({},r,{mode:w.GridCellModes.Edit})))))}},onMouseDown:r,disabled:!n,variant:"outlined",children:"edit"===a?"Save":"Edit"}),(0,i.jsx)(b.Z,{onClick:function(){if(n){var e=n.id,a=n.field;o((0,m.Z)((0,m.Z)({},t),{},(0,v.Z)({},e,(0,m.Z)((0,m.Z)({},t[e]),{},(0,v.Z)({},a,{mode:w.GridCellModes.View,ignoreModifications:!0})))))}},onMouseDown:r,disabled:"view"===a,variant:"outlined",sx:{ml:1},children:"Cancel"})]})}var S,y=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],D=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],E=a(66283),M=a(77809),x=a(81936),G=a(85851),L=a.n(G),N=a(67018),T=a(66327),P=a(22523),I=a(82911),A=a(26582),F=["className"],_=(0,N.ZP)(c.Z)((function(e){var n=e.theme;return{height:400,width:"100%","& .MuiDataGrid-cell--editable":{backgroundColor:"dark"===n.palette.mode?"#376331":"rgb(217 243 190)","& .MuiInputBase-root":{height:"100%"}},"& .Mui-error":{backgroundColor:"rgb(126,10,15, ".concat("dark"===n.palette.mode?0:.1,")"),color:"dark"===n.palette.mode?"#ff4343":"#750f0f"}}}));function j(e){var n=Z.map((function(e){return e.name.toLowerCase()}));return new(L())((function(a){S=setTimeout((function(){var t=n.includes(e.toLowerCase());a(t?"".concat(e," is already taken."):null)}),500*Math.random()+100)}))}var V=(0,N.ZP)((function(e){var n=e.className,a=(0,x.Z)(e,F);return(0,i.jsx)(T.Z,(0,m.Z)((0,m.Z)({},a),{},{classes:{popper:n}}))}))((function(e){var n=e.theme;return(0,v.Z)({},"& .".concat(P.Z.tooltip),{backgroundColor:n.palette.error.main,color:n.palette.error.contrastText})}));function U(e){var n=e.error;return(0,i.jsx)(V,{open:!!n,title:n,children:(0,i.jsx)(I.V,(0,m.Z)({},e))})}function O(e){return(0,i.jsx)(U,(0,m.Z)({},e))}var Z=[{id:1,name:"Damien"},{id:2,name:"Olivier"},{id:3,name:"Danail"},{id:4,name:"Matheus"},{id:5,name:"You?"}],B=a(90441),H=a(60743);var $=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],q=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],z=a(74570),K=a(93033),Y=a(83155),W=a(39210);function J(e,n){return e.name!==n.name?"Name from '".concat(n.name,"' to '").concat(e.name,"'"):e.age!==n.age?"Age from '".concat(n.age||"","' to '").concat(e.age||"","'"):null}var X=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220}],Q=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],ee=a(93397),ne=a(84933);function ae(e){var n=e.id,a=e.value,t=e.field,o=(0,ne.l)();return(0,i.jsx)(c.Z,{sx:{display:"flex",alignItems:"center",pr:2},children:(0,i.jsx)(ee.Z,{ref:function(e){if(e){var n=e.querySelector('input[value="'.concat(a,'"]'));null===n||void 0===n||n.focus()}},name:"rating",precision:1,value:a,onChange:function(e,a){o.current.setEditCellValue({id:n,field:t,value:a})}})})}var te=[{field:"places",headerName:"Places",width:120},{field:"rating",headerName:"Rating",renderCell:function(e){return(0,i.jsx)(ee.Z,{readOnly:!0,value:e.value})},renderEditCell:function(e){return(0,i.jsx)(ae,(0,m.Z)({},e))},editable:!0,width:180,type:"number"}],oe=[{id:1,places:"Barcelona",rating:5},{id:2,places:"Rio de Janeiro",rating:4},{id:3,places:"London",rating:3},{id:4,places:"New York",rating:2}];var re=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0}],se=[{id:1,name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:2,name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:3,name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:4,name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:5,name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}],ie=a(70883);function de(e){var n=e.id,a=e.value,t=e.field,o=(0,ne.l)(),r=function(){var e=(0,M.Z)((0,E.Z)().mark((function e(a){return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.current.setEditCellValue({id:n,field:t,value:a.target.value});case 2:o.current.stopCellEditMode({id:n,field:t});case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();return(0,i.jsxs)(ie.Z,{value:a,onChange:r,size:"small",sx:{height:1},native:!0,autoFocus:!0,children:[(0,i.jsx)("option",{children:"Back-end Developer"}),(0,i.jsx)("option",{children:"Front-end Developer"}),(0,i.jsx)("option",{children:"UX Designer"})]})}var le=[{field:"name",headerName:"Name",width:120},{field:"role",headerName:"Role",renderEditCell:function(e){return(0,i.jsx)(de,(0,m.Z)({},e))},editable:!0,width:180}],ce=[{id:1,name:"Olivier",role:"Back-end Developer"},{id:2,name:"Danail",role:"UX Designer"},{id:3,name:"Matheus",role:"Front-end Developer"}],pe=a(23315),ue=a(78633),me=a(28729),ge=a(64953),he=a(77917),fe=a(71157),we=a(59404),Ce=a(68914),ke=a(29966),ve=[{id:(0,s.kb)(),name:(0,s.He)(),age:25,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:(0,s.kb)(),name:(0,s.He)(),age:36,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:(0,s.kb)(),name:(0,s.He)(),age:19,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:(0,s.kb)(),name:(0,s.He)(),age:28,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()},{id:(0,s.kb)(),name:(0,s.He)(),age:23,dateCreated:(0,s.vx)(),lastLogin:(0,s.ub)()}];function be(e){var n=e.setRows,a=e.setRowModesModel;return(0,i.jsx)(Ce.D,{children:(0,i.jsx)(b.Z,{color:"primary",startIcon:(0,i.jsx)(ue.Z,{}),onClick:function(){var e=(0,s.kb)();n((function(n){return[].concat((0,pe.Z)(n),[{id:e,name:"",age:"",isNew:!0}])})),a((function(n){return(0,m.Z)((0,m.Z)({},n),{},(0,v.Z)({},e,{mode:we.GridRowModes.Edit,fieldToFocus:"name"}))}))},children:"Add record"})})}var Re=a(36546),Se=JSON.parse('{"name":"GridNewEditingApi","description":"","properties":[{"name":"getCellMode","description":"Gets the mode of a cell.","type":"(id: GridRowId, field: string) => GridCellMode"},{"name":"getRowMode","description":"Gets the mode of a row.","type":"(id: GridRowId) => GridRowMode"},{"name":"isCellEditable","description":"Controls if a cell is editable.","type":"(params: GridCellParams) => boolean"},{"name":"setEditCellValue","description":"Sets the value of the edit cell.\\nCommonly used inside the edit cell component.","type":"(params: GridEditCellValueParams, event?: MuiBaseEvent) => Promise<boolean> | void"},{"name":"startCellEditMode","description":"Puts the cell corresponding to the given row id and field into edit mode.","type":"(params: GridStartCellEditModeParams) => void"},{"name":"startRowEditMode","description":"Puts the row corresponding to the given id into edit mode.","type":"(params: GridStartRowEditModeParams) => void"},{"name":"stopCellEditMode","description":"Puts the cell corresponding to the given row id and field into view mode and updates the original row with the new value stored.\\nIf <code>params.ignoreModifications</code> is <code>false</code> it will discard the modifications made.","type":"(params: GridStopCellEditModeParams) => void"},{"name":"stopRowEditMode","description":"Puts the row corresponding to the given id and into view mode and updates the original row with the new values stored.\\nIf <code>params.ignoreModifications</code> is <code>false</code> it will discard the modifications made.","type":"(params: GridStopRowEditModeParams) => void"}]}');const ye={en:{description:"The data grid has built-in support for cell and row editing.",location:"/docs/data/data-grid/editing/editing.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>Data grid - Editing</h1><p class="description">The data grid has built-in support for cell and row editing.</p>\n\n<aside class="MuiCallout-root MuiCallout-warning"><p>This page refers to the new editing API, which is not enabled by default.\nTo use it, add the following flag:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span> <span class="token attr-name">experimentalFeatures</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> newEditingApi<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>This additional step is required because the default editing API has a couple of issues that can only be fixed with breaking changes, that will only be possible in v6.\nTo avoid having to wait for the next major release window, all breaking changes needed were included inside this flag.</p>\n<p>If you are looking for the documentation for the default editing API, visit <a href="/x/react-data-grid/editing-legacy/">the docs of the legacy API</a>.\nNote that it is encouraged to migrate to the new editing API since it will be enabled by default in v6.\nAlthough it says &quot;experimental,&quot; you can consider it stable.</p>\n\n</aside><h2 id="making-a-column-editable">Making a column editable<a aria-labelledby="making-a-column-editable" class="anchor-link-style" href="#making-a-column-editable" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can make a column editable by enabling the <code>editable</code> property in its <a href="/x/api/data-grid/grid-col-def/">column definition</a>:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span> <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">\'name\'</span><span class="token punctuation">,</span> editable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>This lets the user edit any cell from the specified column.\nBy default, only one cell at a time can have its <code>editMode</code> prop set to <code>&quot;edit&quot;</code>.\nTo let your users edit all cells in a given row simultaneously, set the <code>editMode</code> prop to <code>&quot;row&quot;</code>.\nFor more information, see <a href="#row-editing">the section on row editing</a>.</p>\n<p>The following demo shows an example of how to make all columns editable.\nPlay with it by double-clicking or pressing <kbd class="key">Enter</kbd> in any cell from this column:</p>\n',{demo:"BasicEditingGrid.js",bg:"inline",defaultCodeOpen:!1},'<h3 id="start-editing">Start editing<a aria-labelledby="start-editing" class="anchor-link-style" href="#start-editing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Users can start editing a cell (or row if <code>editMode=&quot;row&quot;</code>) with any of the following actions:</p>\n<ul>\n<li><p>Double-clicking a cell</p>\n</li>\n<li><p>Pressing <kbd class="key">Enter</kbd>, <kbd class="key">Backspace</kbd> or <kbd class="key">Delete</kbd>\u2014note that the latter two options both delete any existing content</p>\n</li>\n<li><p>Pressing any printable key, such as <kbd class="key">a</kbd>, <kbd class="key">E</kbd>, <kbd class="key">0</kbd>, or <kbd class="key">$</kbd></p>\n</li>\n<li><p>Calling <code>apiRef.current.startCellEditMode</code> passing the row ID and column field of the cell to be edited</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">startCellEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> field<span class="token operator">:</span> <span class="token string">\'name\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>Calling <code>apiRef.current.startRowEditMode</code> passing the ID of the row (only available if <code>editMode=&quot;row&quot;</code>).</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">startRowEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<h3 id="stop-editing">Stop editing<a aria-labelledby="stop-editing" class="anchor-link-style" href="#stop-editing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>When a cell is in edit mode, the user can stop editing with any of the following interactions:</p>\n<ul>\n<li><p>Pressing <kbd class="key">Escape</kbd>\u2014this also reverts any changes made</p>\n</li>\n<li><p>Pressing <kbd class="key">Tab</kbd>\u2014this also saves any changes made</p>\n</li>\n<li><p>Pressing <kbd class="key">Enter</kbd>\u2014this also saves any changes made and moves the focus to the next cell in the same column</p>\n</li>\n<li><p>Clicking outside the cell or row\u2014this also saves any changes made</p>\n</li>\n<li><p>Calling <code>apiRef.current.stopCellEditMode({ id, field })</code> passing the row ID and column field of the cell that&#39;s been edited</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">stopCellEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> field<span class="token operator">:</span> <span class="token string">\'name\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n\napiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">stopCellEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  field<span class="token operator">:</span> <span class="token string">\'name\'</span><span class="token punctuation">,</span>\n  ignoreModifications<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// will also discard the changes made</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n<li><p>Calling <code>apiRef.current.stopRowEditMode</code> passing the ID of the row (only possible if <code>editMode=&quot;row&quot;</code>).</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">stopRowEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// or</span>\n\napiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">stopRowEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  ignoreModifications<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// will also discard the changes made</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n</li>\n</ul>\n<h3 id="disable-editing-of-specific-cells-within-a-row">Disable editing of specific cells within a row<a aria-labelledby="disable-editing-of-specific-cells-within-a-row" class="anchor-link-style" href="#disable-editing-of-specific-cells-within-a-row" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The <code>editable</code> property controls which cells are editable at the column level.\nYou can use the <code>isCellEditable</code> callback prop to define which individual cells the user can edit in a given row.\nIt is called with a <a href="/x/api/data-grid/grid-cell-params/"><code>GridCellParams</code></a> object and must return <code>true</code> if the cell is editable, or <code>false</code> if not.</p>\n<p>In the following demo, only the rows with an even <code>Age</code> value are editable.\nThe editable cells have a green background for better visibility.</p>\n',{demo:"IsCellEditableGrid.js",bg:"inline"},'<h2 id="value-parser-and-value-setter">Value parser and value setter<a aria-labelledby="value-parser-and-value-setter" class="anchor-link-style" href="#value-parser-and-value-setter" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can use the <code>valueParser</code> property in the column definition to modify the value entered by the user\u2014for example, to convert the value to a different format:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> columns<span class="token operator">:</span> GridColDef<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">valueParser</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> GridCellValue<span class="token punctuation">,</span> params<span class="token operator">:</span> GridCellParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>You can use the <code>valueSetter</code> property of the column definition to customize how the row is updated with a new value.\nThis lets you insert a value from a nested object.\nIt is called with an object containing the new cell value to be saved as well as the row that the cell belongs to.\nIf you are already using a <code>valueGetter</code> to extract the value from a nested object, then the <code>valueSetter</code> will probably also be necessary.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> columns<span class="token operator">:</span> GridColDef<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">valueSetter</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> GridValueSetterParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span> <span class="token operator">=</span> params<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">.</span>row<span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>In the following demo, both the <code>valueParser</code> and the <code>valueSetter</code> are defined for the <strong>Full name</strong> column.\nThe <code>valueParser</code> capitalizes the value entered, and the <code>valueSetter</code> splits the value and saves it correctly into the row model:</p>\n',{demo:"ValueParserSetterGrid.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="events">Events<a aria-labelledby="events" class="anchor-link-style" href="#events" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The mouse and keyboard interactions that <a href="#start-editing">start</a> and <a href="#stop-editing">stop</a> cell editing do so by triggering the <code>&#39;cellEditStart&#39;</code> and <code>&#39;cellEditStop&#39;</code> <a href="/x/react-data-grid/events/">events</a>, respectively.\nFor row editing, the events are <code>&#39;rowEditStart&#39;</code> and <code>&#39;rowEditStop&#39;</code>.\nYou can control how these events are handled to customize editing behavior.</p>\n<p>For convenience, you can also listen to these events using their respective props:</p>\n<ul>\n<li><code>onCellEditStart</code></li>\n<li><code>onCellEditStop</code></li>\n<li><code>onRowEditStart</code></li>\n<li><code>onRowEditStop</code></li>\n</ul>\n<p>These events and props are called with an object containing the row ID and column field of the cell that is being edited.\nThe object also contains a <code>reason</code> param that specifies which type of interaction caused the event to be fired\u2014for instance, <code>&#39;cellDoubleClick&#39;</code> when a double-click initiates edit mode.</p>\n<p>The following demo shows how to prevent the user from exiting edit mode when clicking outside of a cell.\nTo do this, the <code>onCellEditStop</code> prop is used to check if the <code>reason</code> is <code>&#39;cellFocusOut&#39;</code>.\nIf that condition is true, it <a href="/x/react-data-grid/events/#disabling-the-default-behavior">disables</a> the default event behavior.\nIn this context, the user can only stop editing a cell by pressing <kbd class="key">Enter</kbd>, <kbd class="key">Escape</kbd> or <kbd class="key">Tab</kbd>.</p>\n',{demo:"DisableStopEditModeOnFocusOut.js",bg:"inline"},'<h2 id="controlled-mode">Controlled mode<a aria-labelledby="controlled-mode" class="anchor-link-style" href="#controlled-mode" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Each cell and row has two modes: <code>edit</code> and <code>view</code>.\nYou can control the active mode using the props <code>cellModesModel</code> and <code>rowModesModel</code> (only works if <code>editMode=&quot;row&quot;</code>).</p>\n<p>The <code>cellModesModel</code> prop accepts an object containing the <code>mode</code> (and additional options) for a given column field, in a given row, as in the following example.\nThe options accepted are the same available in <a href="#start-editing"><code>apiRef.current.startCellEditMode</code></a> and <a href="#stop-editing"><code>apiRef.current.stopCellEditMode</code></a>.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token comment">// Changes the mode of field=name from row with id=1 to "edit"</span>\n<span class="token operator">&lt;</span>DataGrid\n  cellModesModel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> mode<span class="token operator">:</span> GridCellModes<span class="token punctuation">.</span>Edit <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span>\n\n<span class="token comment">// Changes the mode of field=name from row with id=1 to "view", ignoring modifications made</span>\n<span class="token operator">&lt;</span>DataGrid\n  cellModesModel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> mode<span class="token operator">:</span> GridCellModes<span class="token punctuation">.</span>View<span class="token punctuation">,</span> ignoreModifications<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">/</span><span class="token operator">></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>For row editing, the <code>rowModesModel</code> props work in a similar manner.\nThe options accepted are the same available in <a href="#start-editing"><code>apiRef.current.startRowEditMode</code></a> and <a href="#stop-editing"><code>apiRef.current.stopRowEditMode</code></a>.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token comment">// Changes the mode of the row with id=1 to "edit"</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span>\n  <span class="token attr-name">editMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span>\n  <span class="token attr-name">rowModesModel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> mode<span class="token operator">:</span> GridRowModes<span class="token punctuation">.</span>Edit <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token comment">// Changes the mode of the row with id=1 to "view", ignoring modifications made</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span>\n  <span class="token attr-name">editMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span>\n  <span class="token attr-name">rowModesModel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> mode<span class="token operator">:</span> GridRowModes<span class="token punctuation">.</span>View<span class="token punctuation">,</span> ignoreModifications<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>Additionally, the callback props <code>onCellModesModelChange</code> and <code>onRowModesModelChange</code> (only works if <code>editMode=&quot;row&quot;</code>) are available.\nUse them to update the respective prop.</p>\n<p>In the demo below, <code>cellModesModel</code> is used to control the mode of selected cell using the external buttons.\nFor an example using row editing check the <a href="#full-featured-crud-component">full-featured CRUD component</a>.</p>\n',{demo:"StartEditButtonGrid.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-warning"><p>The options passed to both model props only take effect when <code>mode</code> changes.\nUpdating the params of a cell or row, but keeping the same <code>mode</code>, makes the cell or row to stay in the same mode.\nAlso, removing one field or row ID from the object will not cause the missing cell or row to go to <code>&quot;view&quot;</code> mode.</p>\n\n</aside><h2 id="validation">Validation<a aria-labelledby="validation" class="anchor-link-style" href="#validation" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>If the column definition sets a callback for the <code>preProcessEditCellProps</code> property, then it will be called each time a new value is entered into a cell from this column.\nThis property lets you pre-process the props that are passed to the edit component.\nThe <code>preProcessEditCellProps</code> callback is called with an object containing the following attributes:</p>\n<ul>\n<li><code>id</code>: the row ID</li>\n<li><code>row</code>: the row model containing the value(s) of the cell or row before entering edit mode</li>\n<li><code>props</code>: the props, containing the value after the value parser, that are passed to the edit component</li>\n<li><code>hasChanged</code>: determines if <code>props.value</code> is different from the last time this callback was called</li>\n</ul>\n<p>Data validation is one type of pre-processing that can be done in this way.\nTo validate the data entered, pass a callback to <code>preProcessEditCellProps</code> checking if <code>props.value</code> is valid.\nIf the new value is invalid, set <code>props.error</code> to a truthy value and return the modified props, as shown in the example below.\nWhen the user tries to save the updated value, the change will be rejected if the error attribute is truthy (invalid).</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> columns<span class="token operator">:</span> GridColDef<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    field<span class="token operator">:</span> <span class="token string">\'firstName\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">preProcessEditCellProps</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> GridPreProcessEditCellProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> hasError <span class="token operator">=</span> params<span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">.</span>props<span class="token punctuation">,</span> error<span class="token operator">:</span> hasError <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<aside class="MuiCallout-root MuiCallout-warning"><p>Changing <code>props.value</code> inside the callback has no effect. To pre-process it, use a <a href="#value-parser-and-value-setter">value parser</a>.</p>\n\n</aside><p>The demo below contains an example of server-side data validation.\nIn this case, the callback returns a promise that resolves to the modified props.\nNote that the value passed to <code>props.error</code> is passed directly to the edit component as the <code>error</code> prop.\nWhile the promise is not resolved, the edit component will receive an <code>isProcessingProps</code> prop with value equal to <code>true</code>.</p>\n',{demo:"ValidateServerNameGrid.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-warning"><p>If the user performs an action that saves the changes and exits the edit mode (e.g. pressing <kbd class="key">Enter</kbd>) while the props are still being processed, the changes will be discarded upon exit.\nTo avoid this, use the <code>disableIgnoreModificationsIfProcessingProps</code> prop to keep the cell or row in edit mode while props are processed:</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span> <span class="token attr-name">disableIgnoreModificationsIfProcessingProps</span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>In v6, this prop will be removed and the editing API will behave, by default, like if it was enabled.</p>\n\n</aside><h2 id="persistence">Persistence<a aria-labelledby="persistence" class="anchor-link-style" href="#persistence" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>processRowUpdate</code> prop is called when the user performs an action to <a href="#stop-editing">stop editing</a>.\nUse this prop to send the new values to the server and save them into a database or other storage method.\nThe prop is called with two arguments:</p>\n<ol>\n<li>the updated row with the new values after passing through the <code>valueSetter</code></li>\n<li>the values of the row before the cell or row was edited</li>\n</ol>\n<p>Once the row is saved, <code>processRowUpdate</code> must return the row object that will be used to update the internal state.\nThe value returned is used as an argument to a call to <code>apiRef.current.updateRows</code>.</p>\n<p>If you need to cancel the save process while calling <code>processRowUpdate</code>\u2014for instance, when a database validation fails, or the user wants to reject the changes\u2014there are two options:</p>\n<ol>\n<li>Reject the promise so that the internal state is not updated and the cell remains in edit mode</li>\n<li>Resolve the promise with the second argument\u2014the original value(s)\u2014so that the internal state is not updated, but the cell exits edit mode</li>\n</ol>\n<p>The following demo implements the first option: rejecting the promise.\nInstead of <a href="#validation">validating</a> while typing, it validates in the server.\nIf the new name is empty, then the promise responsible for saving the row will be rejected and the cell will remain in edit mode.\nAdditionally, <code>onProcessRowUpdateError</code> is called to display the error message.\nThe demo also shows that <code>processRowUpdate</code> can be used to pre-process the row model that will be saved into the internal state.\nTo exit edit mode, press <kbd class="key">Escape</kbd> or enter a valid name.</p>\n',{demo:"ServerSidePersistence.js",bg:"inline",defaultCodeOpen:!1},'<h3 id="ask-for-confirmation-before-saving">Ask for confirmation before saving<a aria-labelledby="ask-for-confirmation-before-saving" class="anchor-link-style" href="#ask-for-confirmation-before-saving" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>The second option\u2014resolving the promise with the second argument\u2014lets the user cancel the save process by rejecting the changes and exiting edit mode.\nIn this case, <code>processRowUpdate</code> is resolved with the second argument\u2014the original value(s) of the cell or row.</p>\n<p>The following demo shows how this approach can be used to ask for confirmation before sending the data to the server.\nIf the user accepts the change, the internal state is updated with the values.\nBut if the changes are rejected, the internal state remains unchanged, and the cell is reverted back to its original value.\nThe demo also employs validation to prevent entering an empty name.</p>\n',{demo:"AskConfirmationBeforeSave.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="create-your-own-edit-component">Create your own edit component<a aria-labelledby="create-your-own-edit-component" class="anchor-link-style" href="#create-your-own-edit-component" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Each of the built-in column types provides a component to edit the value of the cells.\nTo customize column types, or override the existing components, you can provide a new edit component through the <code>renderEditCell</code> property in the column definition.\nThis property works like the <code>renderCell</code> property, which is rendered while cells are in view mode.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">CustomEditComponent</span><span class="token punctuation">(</span>props<span class="token operator">:</span> GridRenderEditCellParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>params<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> columns<span class="token operator">:</span> GridColDef<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    field<span class="token operator">:</span> <span class="token string">\'firstName\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">renderEditCell</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> GridRenderEditCellParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomEditComponent</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>params<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The <code>renderEditCell</code> property receives all params from <code>GridRenderEditCellParams</code>, which extends <code>GridCellParams</code>.\nAdditionally, the props added during <a href="#validation">pre-processing</a> are also available in the params.\nThese are the most important params to consider:</p>\n<ul>\n<li><code>value</code>: contains the current value of the cell in edit mode, overriding the value from <code>GridCellParams</code></li>\n<li><code>error</code>: the error added during validation</li>\n<li><code>isProcessingProps</code>: whether <code>preProcessEditCellProps</code> is being executed or not</li>\n</ul>\n<p>Once a new value is entered into the input, it must be sent to the grid.\nTo do this, pass the row ID, the column field, and the new cell value to a call to <code>apiRef.current.setEditCellValue</code>.\nThe new value will be parsed and validated, and the <code>value</code> prop will reflect the changes in the next render.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">CustomEditComponent</span><span class="token punctuation">(</span>props<span class="token operator">:</span> GridRenderEditCellParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> value<span class="token punctuation">,</span> field <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> apiRef <span class="token operator">=</span> <span class="token function">useGridApiContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleValueChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> newValue <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// The new value entered by the user</span>\n    apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">setEditCellValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token operator">:</span> newValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleValueChange<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The following demo implements a custom edit component, based on the <a href="https://mui.com/material-ui/react-rating/"><code>Rating</code></a> component from <code>@mui/material</code>, for the <strong>Rating</strong> column.</p>\n',{demo:"CustomEditComponent.js",bg:"inline",defaultCodeOpen:!1},'<h3 id="with-debounce">With debounce<a aria-labelledby="with-debounce" class="anchor-link-style" href="#with-debounce" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>By default, each call to <code>apiRef.current.setEditCellValue</code> triggers a new render.\nIf the edit component requires the user to type a new value, re-rendering the grid too often will drastically reduce performance.\nOne way to avoid this is to debounce the API calls.\nYou can use <code>apiRef.current.setEditCellValue</code> to handle debouncing by setting the <code>debounceMs</code> param to a positive integer that defines a set time period in milliseconds.\nNo matter how many times the API method is called, the grid will only be re-rendered after that period of time has passed.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx">apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">setEditCellValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token operator">:</span> newValue<span class="token punctuation">,</span> debounceMs<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>When the grid is only set to re-render after a given period of time has passed, the <code>value</code> prop will not be updated on each <code>apiRef.current.setEditCellValue</code> call.\nTo avoid a frozen UI, the edit component can keep the current value in an internal state and sync it once <code>value</code> changes.\nModify the edit component to enable this feature:</p>\n<div class="MuiCode-root"><pre><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function CustomEditComponent(props: GridRenderEditCellParams) {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  const { id, value, field } = props;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const { id, value: valueProp, field } = props;\n</span><span class="token prefix inserted">+</span><span class="token line">  const [value, setValue] = React.useState(valueProp);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  const apiRef = useGridApiContext();\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  const handleChange = (event: React.ChangeEvent&lt;HTMLInputElement>) => {\n</span><span class="token prefix unchanged"> </span><span class="token line">    const newValue = event.target.value; // The new value entered by the user\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    apiRef.current.setEditCellValue({ id, field, value: newValue });\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    apiRef.current.setEditCellValue({ id, field, value: newValue, debounceMs: 200 });\n</span><span class="token prefix inserted">+</span><span class="token line">    setValue(newValue);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  };\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  React.useEffect(() => {\n</span><span class="token prefix inserted">+</span><span class="token line">    setValue(valueProp);\n</span><span class="token prefix inserted">+</span><span class="token line">  }, [valueProp]);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return &lt;input type="text" value={value} onChange={handleChange}>;\n</span></span>}\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<h3 id="with-auto-stop">With auto-stop<a aria-labelledby="with-auto-stop" class="anchor-link-style" href="#with-auto-stop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>An edit component has &quot;auto-stop&quot; behavior when it stops edit mode as soon as the value is changed.\nTo picture better, imagine an edit component with a combo, created following the normal <a href="#create-your-own-edit-component">steps</a>.\nBy default, it would require two clicks to change the value of the cell: one click inside the cell to select a new value, and another click outside the cell to save.\nThis second click can be avoided if the first click also stops the edit mode.\nTo create an edit component with auto-stop, call <code>apiRef.current.stopCellEditMode</code> after setting the new value.\nSince <code>apiRef.current.setEditCellValue</code> may do additional processing, you must wait for it to resolve before stopping the edit mode.\nAlso, it is a good practice to check if <code>apiRef.current.setEditCellValue</code> has returned <code>true</code>.\nIt will be <code>false</code> if <code>preProcessEditProps</code> set an error during <a href="#validation">validation</a>.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> SelectChangeEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> isValid <span class="token operator">=</span> <span class="token keyword">await</span> apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">setEditCellValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    id<span class="token punctuation">,</span>\n    field<span class="token punctuation">,</span>\n    value<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    apiRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">stopCellEditMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> field <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The following demo implements an edit component with auto-stop, based on a native <a href="/material-ui/react-select/"><code>Select</code></a> component for the <strong>Role</strong> column.</p>\n',{demo:"AutoStopEditComponent.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-warning"><p>We don&#39;t recommend using edit components with auto-stop in columns that use long-running <code>preProcessEditCellProps</code> because the UI will freeze while waiting for <code>apiRef.current.setEditCellValue</code>.\nInstead, use the provided interactions to exit edit mode.</p>\n\n</aside><h2 id="row-editing">Row editing<a aria-labelledby="row-editing" class="anchor-link-style" href="#row-editing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Row editing lets the user edit all cells in a row simultaneously.\nThe same basic rules for cell editing also apply to row editing.\nTo enable it, change the <code>editMode</code> prop to <code>&quot;row&quot;</code>, then follow the same guidelines as those for cell editing to set the <code>editable</code> property in the definition of the columns that the user can edit.</p>\n<div class="MuiCode-root"><pre><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span> <span class="token attr-name">editMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span> <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">\'name\'</span><span class="token punctuation">,</span> editable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy">Copy <span class="MuiCode-copyKeypress"><span>(Or</span> $keyC<span>)</span></span></button></div>\n<p>The following demo illustrates how row editing works.\nThe user can <a href="#start-editing">start</a> and <a href="#stop-editing">stop</a> editing a row using the same actions as those provided for cell editing (e.g. double-clicking a cell).</p>\n',{demo:"BasicRowEditingGrid.js",bg:"inline",defaultCodeOpen:!1},'<aside class="MuiCallout-root MuiCallout-warning"><p>By design, when changing the value of a cell all <code>preProcessEditCellProps</code> callbacks from other columns are also called.\nThis lets you apply conditional validation where the value of a cell impacts the validation status of another cell in the same row.\nIf you only want to run validation when the value has changed, check if the <code>hasChanged</code> param is <code>true</code>.</p>\n\n</aside><h3 id="full-featured-crud-component">Full-featured CRUD component<a aria-labelledby="full-featured-crud-component" class="anchor-link-style" href="#full-featured-crud-component" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><p>Row editing makes it possible to create a full-featured CRUD (Create, Read, Update, Delete) component similar to those found in enterprise applications.\nIn the following demo, the typical ways to start and stop editing are all disabled.\nInstead, use the buttons available in each row or in the toolbar.</p>\n',{demo:"FullFeaturedCrudGrid.js",bg:"inline",defaultCodeOpen:!1},'<h2 id="advanced-use-cases">Advanced use cases<a aria-labelledby="advanced-use-cases" class="anchor-link-style" href="#advanced-use-cases" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>See <a href="/x/react-data-grid/recipes-editing/">Editing recipes</a> for more advanced use cases.</p>\n<h2 id="apiref">apiRef <a href="/x/introduction/licensing/#pro-plan"><span class="plan-pro"></span></a><a aria-labelledby="apiref" class="anchor-link-style" href="#apiref" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2>',{demo:"EditApiNoSnap.js",bg:"inline",hideToolbar:!0},'<h2 id="api">API<a aria-labelledby="api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><ul>\n<li><a href="/x/api/data-grid/data-grid/">DataGrid</a></li>\n<li><a href="/x/api/data-grid/data-grid-pro/">DataGridPro</a></li>\n<li><a href="/x/api/data-grid/data-grid-premium/">DataGridPremium</a></li>\n</ul>\n'],toc:[{text:"Making a column editable",level:2,hash:"making-a-column-editable",children:[{text:"Start editing",level:3,hash:"start-editing"},{text:"Stop editing",level:3,hash:"stop-editing"},{text:"Disable editing of specific cells within a row",level:3,hash:"disable-editing-of-specific-cells-within-a-row"}]},{text:"Value parser and value setter",level:2,hash:"value-parser-and-value-setter",children:[]},{text:"Events",level:2,hash:"events",children:[]},{text:"Controlled mode",level:2,hash:"controlled-mode",children:[]},{text:"Validation",level:2,hash:"validation",children:[]},{text:"Persistence",level:2,hash:"persistence",children:[{text:"Ask for confirmation before saving",level:3,hash:"ask-for-confirmation-before-saving"}]},{text:"Create your own edit component",level:2,hash:"create-your-own-edit-component",children:[{text:"With debounce",level:3,hash:"with-debounce"},{text:"With auto-stop",level:3,hash:"with-auto-stop"}]},{text:"Row editing",level:2,hash:"row-editing",children:[{text:"Full-featured CRUD component",level:3,hash:"full-featured-crud-component"}]},{text:"Advanced use cases",level:2,hash:"advanced-use-cases",children:[]},{text:"apiRef",level:2,hash:"apiref",children:[]},{text:"API",level:2,hash:"api",children:[]}],title:"Data Grid - Editing",headers:{title:"Data Grid - Editing",components:[]}}},De={"BasicEditingGrid.js":{module:"./BasicEditingGrid.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function BasicEditingGrid() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",jsxPreview:"<DataGrid\n  rows={rows}\n  columns={columns}\n  experimentalFeatures={{ newEditingApi: true }}\n/>",moduleTS:"./BasicEditingGrid.js",rawTS:"import * as React from 'react';\nimport { DataGrid, GridColumns, GridRowsProp } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function BasicEditingGrid() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"IsCellEditableGrid.js":{module:"./IsCellEditableGrid.js",raw:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function IsCellEditableGrid() {\n  return (\n    <Box\n      sx={{\n        height: 400,\n        width: '100%',\n        '& .MuiDataGrid-cell--editable': {\n          bgcolor: (theme) =>\n            theme.palette.mode === 'dark' ? '#376331' : 'rgb(217 243 190)',\n        },\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        isCellEditable={(params) => params.row.age % 2 === 0}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </Box>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",jsxPreview:"<DataGrid\n  rows={rows}\n  columns={columns}\n  isCellEditable={(params) => params.row.age % 2 === 0}\n  experimentalFeatures={{ newEditingApi: true }}\n/>",moduleTS:"./IsCellEditableGrid.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid, GridColumns, GridRowsProp } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function IsCellEditableGrid() {\n  return (\n    <Box\n      sx={{\n        height: 400,\n        width: '100%',\n        '& .MuiDataGrid-cell--editable': {\n          bgcolor: (theme) =>\n            theme.palette.mode === 'dark' ? '#376331' : 'rgb(217 243 190)',\n        },\n      }}\n    >\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        isCellEditable={(params) => params.row.age % 2 === 0}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </Box>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"ValueParserSetterGrid.js":{module:"./ValueParserSetterGrid.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\n\nfunction getFullName(params) {\n  return `${params.row.firstName || ''} ${params.row.lastName || ''}`;\n}\n\nfunction setFullName(params) {\n  const [firstName, lastName] = params.value.toString().split(' ');\n  return { ...params.row, firstName, lastName };\n}\n\nfunction parseFullName(value) {\n  return String(value)\n    .split(' ')\n    .map((str) => (str.length > 0 ? str[0].toUpperCase() + str.slice(1) : ''))\n    .join(' ');\n}\n\nexport default function ValueParserSetterGrid() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid rows={defaultRows} columns={columns} />\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'firstName', headerName: 'First name', width: 130, editable: true },\n  { field: 'lastName', headerName: 'Last name', width: 130, editable: true },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    width: 160,\n    editable: true,\n    valueGetter: getFullName,\n    valueSetter: setFullName,\n    valueParser: parseFullName,\n    sortComparator: (v1, v2) => v1.toString().localeCompare(v2.toString()),\n  },\n];\n\nconst defaultRows = [\n  { id: 1, lastName: 'Snow', firstName: 'Jon' },\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei' },\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime' },\n  { id: 4, lastName: 'Stark', firstName: 'Arya' },\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys' },\n];\n",jsxPreview:"<DataGrid rows={defaultRows} columns={columns} />",moduleTS:"./ValueParserSetterGrid.js",rawTS:"import * as React from 'react';\nimport {\n  DataGrid,\n  GridColDef,\n  GridValueGetterParams,\n  GridValueSetterParams,\n  GridCellValue,\n} from '@mui/x-data-grid';\n\nfunction getFullName(params: GridValueGetterParams) {\n  return `${params.row.firstName || ''} ${params.row.lastName || ''}`;\n}\n\nfunction setFullName(params: GridValueSetterParams) {\n  const [firstName, lastName] = params.value!.toString().split(' ');\n  return { ...params.row, firstName, lastName };\n}\n\nfunction parseFullName(value: GridCellValue) {\n  return String(value)\n    .split(' ')\n    .map((str) => (str.length > 0 ? str[0].toUpperCase() + str.slice(1) : ''))\n    .join(' ');\n}\n\nexport default function ValueParserSetterGrid() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid rows={defaultRows} columns={columns} />\n    </div>\n  );\n}\n\nconst columns: GridColDef[] = [\n  { field: 'firstName', headerName: 'First name', width: 130, editable: true },\n  { field: 'lastName', headerName: 'Last name', width: 130, editable: true },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    width: 160,\n    editable: true,\n    valueGetter: getFullName,\n    valueSetter: setFullName,\n    valueParser: parseFullName,\n    sortComparator: (v1, v2) => v1!.toString().localeCompare(v2!.toString()),\n  },\n];\n\nconst defaultRows = [\n  { id: 1, lastName: 'Snow', firstName: 'Jon' },\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei' },\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime' },\n  { id: 4, lastName: 'Stark', firstName: 'Arya' },\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys' },\n];\n"},"DisableStopEditModeOnFocusOut.js":{module:"./DisableStopEditModeOnFocusOut.js",raw:"import * as React from 'react';\nimport { DataGrid, GridCellEditStopReasons } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function DisableStopEditModeOnFocusOut() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n        onCellEditStop={(params, event) => {\n          if (params.reason === GridCellEditStopReasons.cellFocusOut) {\n            event.defaultMuiPrevented = true;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",jsxPreview:"<DataGrid\n  rows={rows}\n  columns={columns}\n  experimentalFeatures={{ newEditingApi: true }}\n  onCellEditStop={(params: GridCellEditStopParams, event: MuiEvent) => {\n    if (params.reason === GridCellEditStopReasons.cellFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  }}\n/>",moduleTS:"./DisableStopEditModeOnFocusOut.js",rawTS:"import * as React from 'react';\nimport {\n  GridColumns,\n  GridRowsProp,\n  DataGrid,\n  GridCellEditStopParams,\n  GridCellEditStopReasons,\n  MuiEvent,\n} from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function DisableStopEditModeOnFocusOut() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n        onCellEditStop={(params: GridCellEditStopParams, event: MuiEvent) => {\n          if (params.reason === GridCellEditStopReasons.cellFocusOut) {\n            event.defaultMuiPrevented = true;\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"StartEditButtonGrid.js":{module:"./StartEditButtonGrid.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { DataGrid, GridCellModes } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nfunction EditToolbar(props) {\n  const { selectedCellParams, cellMode, cellModesModel, setCellModesModel } = props;\n\n  const handleSaveOrEdit = () => {\n    if (!selectedCellParams) {\n      return;\n    }\n    const { id, field } = selectedCellParams;\n    if (cellMode === 'edit') {\n      setCellModesModel({\n        ...cellModesModel,\n        [id]: { ...cellModesModel[id], [field]: { mode: GridCellModes.View } },\n      });\n    } else {\n      setCellModesModel({\n        ...cellModesModel,\n        [id]: { ...cellModesModel[id], [field]: { mode: GridCellModes.Edit } },\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    if (!selectedCellParams) {\n      return;\n    }\n    const { id, field } = selectedCellParams;\n    setCellModesModel({\n      ...cellModesModel,\n      [id]: {\n        ...cellModesModel[id],\n        [field]: { mode: GridCellModes.View, ignoreModifications: true },\n      },\n    });\n  };\n\n  const handleMouseDown = (event) => {\n    // Keep the focus in the cell\n    event.preventDefault();\n  };\n\n  return (\n    <Box\n      sx={{\n        borderBottom: 1,\n        borderColor: 'divider',\n        p: 1,\n      }}\n    >\n      <Button\n        onClick={handleSaveOrEdit}\n        onMouseDown={handleMouseDown}\n        disabled={!selectedCellParams}\n        variant=\"outlined\"\n      >\n        {cellMode === 'edit' ? 'Save' : 'Edit'}\n      </Button>\n      <Button\n        onClick={handleCancel}\n        onMouseDown={handleMouseDown}\n        disabled={cellMode === 'view'}\n        variant=\"outlined\"\n        sx={{ ml: 1 }}\n      >\n        Cancel\n      </Button>\n    </Box>\n  );\n}\n\nEditToolbar.propTypes = {\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  cellModesModel: PropTypes.object.isRequired,\n  selectedCellParams: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  }),\n  setCellModesModel: PropTypes.func.isRequired,\n};\n\nexport default function StartEditButtonGrid() {\n  const [selectedCellParams, setSelectedCellParams] = React.useState(null);\n  const [cellModesModel, setCellModesModel] = React.useState({});\n\n  const handleCellFocus = React.useCallback((event) => {\n    const row = event.currentTarget.parentElement;\n    const id = row.dataset.id;\n    const field = event.currentTarget.dataset.field;\n    setSelectedCellParams({ id, field });\n  }, []);\n\n  const cellMode = React.useMemo(() => {\n    if (!selectedCellParams) {\n      return 'view';\n    }\n    const { id, field } = selectedCellParams;\n    return cellModesModel[id]?.[field]?.mode || 'view';\n  }, [cellModesModel, selectedCellParams]);\n\n  const handleCellKeyDown = React.useCallback(\n    (params, event) => {\n      if (cellMode === 'edit') {\n        // Prevents calling event.preventDefault() if Tab is pressed on a cell in edit mode\n        event.defaultMuiPrevented = true;\n      }\n    },\n    [cellMode],\n  );\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        onCellKeyDown={handleCellKeyDown}\n        cellModesModel={cellModesModel}\n        onCellModesModelChange={(model) => setCellModesModel(model)}\n        components={{\n          Toolbar: EditToolbar,\n        }}\n        componentsProps={{\n          toolbar: {\n            cellMode,\n            selectedCellParams,\n            setSelectedCellParams,\n            cellModesModel,\n            setCellModesModel,\n          },\n          cell: {\n            onFocus: handleCellFocus,\n          },\n        }}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",moduleTS:"./StartEditButtonGrid.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport {\n  GridColumns,\n  GridRowsProp,\n  DataGrid,\n  GridRowId,\n  GridCellModes,\n  GridEventListener,\n  GridCellModesModel,\n} from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\ninterface SelectedCellParams {\n  id: GridRowId;\n  field: string;\n}\n\ninterface EditToolbarProps {\n  selectedCellParams?: SelectedCellParams;\n  cellModesModel: GridCellModesModel;\n  setCellModesModel: (value: GridCellModesModel) => void;\n  cellMode: 'view' | 'edit';\n}\n\nfunction EditToolbar(props: EditToolbarProps) {\n  const { selectedCellParams, cellMode, cellModesModel, setCellModesModel } = props;\n\n  const handleSaveOrEdit = () => {\n    if (!selectedCellParams) {\n      return;\n    }\n    const { id, field } = selectedCellParams;\n    if (cellMode === 'edit') {\n      setCellModesModel({\n        ...cellModesModel,\n        [id]: { ...cellModesModel[id], [field]: { mode: GridCellModes.View } },\n      });\n    } else {\n      setCellModesModel({\n        ...cellModesModel,\n        [id]: { ...cellModesModel[id], [field]: { mode: GridCellModes.Edit } },\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    if (!selectedCellParams) {\n      return;\n    }\n    const { id, field } = selectedCellParams;\n    setCellModesModel({\n      ...cellModesModel,\n      [id]: {\n        ...cellModesModel[id],\n        [field]: { mode: GridCellModes.View, ignoreModifications: true },\n      },\n    });\n  };\n\n  const handleMouseDown = (event: React.MouseEvent) => {\n    // Keep the focus in the cell\n    event.preventDefault();\n  };\n\n  return (\n    <Box\n      sx={{\n        borderBottom: 1,\n        borderColor: 'divider',\n        p: 1,\n      }}\n    >\n      <Button\n        onClick={handleSaveOrEdit}\n        onMouseDown={handleMouseDown}\n        disabled={!selectedCellParams}\n        variant=\"outlined\"\n      >\n        {cellMode === 'edit' ? 'Save' : 'Edit'}\n      </Button>\n      <Button\n        onClick={handleCancel}\n        onMouseDown={handleMouseDown}\n        disabled={cellMode === 'view'}\n        variant=\"outlined\"\n        sx={{ ml: 1 }}\n      >\n        Cancel\n      </Button>\n    </Box>\n  );\n}\n\nexport default function StartEditButtonGrid() {\n  const [selectedCellParams, setSelectedCellParams] =\n    React.useState<SelectedCellParams | null>(null);\n  const [cellModesModel, setCellModesModel] = React.useState<GridCellModesModel>({});\n\n  const handleCellFocus = React.useCallback(\n    (event: React.FocusEvent<HTMLDivElement>) => {\n      const row = event.currentTarget.parentElement;\n      const id = row!.dataset.id!;\n      const field = event.currentTarget.dataset.field!;\n      setSelectedCellParams({ id, field });\n    },\n    [],\n  );\n\n  const cellMode = React.useMemo(() => {\n    if (!selectedCellParams) {\n      return 'view';\n    }\n    const { id, field } = selectedCellParams;\n    return cellModesModel[id]?.[field]?.mode || 'view';\n  }, [cellModesModel, selectedCellParams]);\n\n  const handleCellKeyDown = React.useCallback<GridEventListener<'cellKeyDown'>>(\n    (params, event) => {\n      if (cellMode === 'edit') {\n        // Prevents calling event.preventDefault() if Tab is pressed on a cell in edit mode\n        event.defaultMuiPrevented = true;\n      }\n    },\n    [cellMode],\n  );\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        onCellKeyDown={handleCellKeyDown}\n        cellModesModel={cellModesModel}\n        onCellModesModelChange={(model) => setCellModesModel(model)}\n        components={{\n          Toolbar: EditToolbar,\n        }}\n        componentsProps={{\n          toolbar: {\n            cellMode,\n            selectedCellParams,\n            setSelectedCellParams,\n            cellModesModel,\n            setCellModesModel,\n          },\n          cell: {\n            onFocus: handleCellFocus,\n          },\n        }}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"ValidateServerNameGrid.js":{module:"./ValidateServerNameGrid.js",raw:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\nimport { DataGridPro, GridEditInputCell } from '@mui/x-data-grid-pro';\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n  height: 400,\n  width: '100%',\n  '& .MuiDataGrid-cell--editable': {\n    backgroundColor: theme.palette.mode === 'dark' ? '#376331' : 'rgb(217 243 190)',\n    '& .MuiInputBase-root': {\n      height: '100%',\n    },\n  },\n  '& .Mui-error': {\n    backgroundColor: `rgb(126,10,15, ${theme.palette.mode === 'dark' ? 0 : 0.1})`,\n    color: theme.palette.mode === 'dark' ? '#ff4343' : '#750f0f',\n  },\n}));\n\nlet promiseTimeout;\nfunction validateName(username) {\n  const existingUsers = rows.map((row) => row.name.toLowerCase());\n\n  return new Promise((resolve) => {\n    promiseTimeout = setTimeout(() => {\n      const exists = existingUsers.includes(username.toLowerCase());\n      resolve(exists ? `${username} is already taken.` : null);\n    }, Math.random() * 500 + 100); // simulate network latency\n  });\n}\n\nconst StyledTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nfunction NameEditInputCell(props) {\n  const { error } = props;\n\n  return (\n    <StyledTooltip open={!!error} title={error}>\n      <GridEditInputCell {...props} />\n    </StyledTooltip>\n  );\n}\n\nfunction renderEditName(params) {\n  return <NameEditInputCell {...params} />;\n}\n\nexport default function ValidateServerNameGrid() {\n  const preProcessEditCellProps = async (params) => {\n    const errorMessage = await validateName(params.props.value.toString());\n    return { ...params.props, error: errorMessage };\n  };\n\n  const columns = [\n    {\n      field: 'name',\n      headerName: 'MUI Contributor',\n      width: 180,\n      editable: true,\n      preProcessEditCellProps,\n      renderEditCell: renderEditName,\n    },\n  ];\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(promiseTimeout);\n    };\n  }, []);\n\n  return (\n    <StyledBox>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        isCellEditable={(params) => params.row.id === 5}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </StyledBox>\n  );\n}\n\nconst rows = [\n  {\n    id: 1,\n    name: 'Damien',\n  },\n  {\n    id: 2,\n    name: 'Olivier',\n  },\n  {\n    id: 3,\n    name: 'Danail',\n  },\n  {\n    id: 4,\n    name: 'Matheus',\n  },\n  {\n    id: 5,\n    name: 'You?',\n  },\n];\n",jsxPreview:"<StyledBox>\n  <DataGridPro\n    rows={rows}\n    columns={columns}\n    isCellEditable={(params) => params.row.id === 5}\n    experimentalFeatures={{ newEditingApi: true }}\n  />\n</StyledBox>",moduleTS:"./ValidateServerNameGrid.js",rawTS:"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Tooltip, { tooltipClasses, TooltipProps } from '@mui/material/Tooltip';\nimport {\n  GridColumns,\n  GridRowsProp,\n  DataGridPro,\n  GridPreProcessEditCellProps,\n  GridEditInputCell,\n  GridRenderEditCellParams,\n} from '@mui/x-data-grid-pro';\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n  height: 400,\n  width: '100%',\n  '& .MuiDataGrid-cell--editable': {\n    backgroundColor: theme.palette.mode === 'dark' ? '#376331' : 'rgb(217 243 190)',\n    '& .MuiInputBase-root': {\n      height: '100%',\n    },\n  },\n  '& .Mui-error': {\n    backgroundColor: `rgb(126,10,15, ${theme.palette.mode === 'dark' ? 0 : 0.1})`,\n    color: theme.palette.mode === 'dark' ? '#ff4343' : '#750f0f',\n  },\n}));\n\nlet promiseTimeout: any;\nfunction validateName(username: string): Promise<boolean> {\n  const existingUsers = rows.map((row) => row.name.toLowerCase());\n\n  return new Promise<any>((resolve) => {\n    promiseTimeout = setTimeout(() => {\n      const exists = existingUsers.includes(username.toLowerCase());\n      resolve(exists ? `${username} is already taken.` : null);\n    }, Math.random() * 500 + 100); // simulate network latency\n  });\n}\n\nconst StyledTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText,\n  },\n}));\n\nfunction NameEditInputCell(props: GridRenderEditCellParams) {\n  const { error } = props;\n\n  return (\n    <StyledTooltip open={!!error} title={error}>\n      <GridEditInputCell {...props} />\n    </StyledTooltip>\n  );\n}\n\nfunction renderEditName(params: GridRenderEditCellParams) {\n  return <NameEditInputCell {...params} />;\n}\n\nexport default function ValidateServerNameGrid() {\n  const preProcessEditCellProps = async (params: GridPreProcessEditCellProps) => {\n    const errorMessage = await validateName(params.props.value!.toString());\n    return { ...params.props, error: errorMessage };\n  };\n\n  const columns: GridColumns = [\n    {\n      field: 'name',\n      headerName: 'MUI Contributor',\n      width: 180,\n      editable: true,\n      preProcessEditCellProps,\n      renderEditCell: renderEditName,\n    },\n  ];\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(promiseTimeout);\n    };\n  }, []);\n\n  return (\n    <StyledBox>\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        isCellEditable={(params) => params.row.id === 5}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </StyledBox>\n  );\n}\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: 'Damien',\n  },\n  {\n    id: 2,\n    name: 'Olivier',\n  },\n  {\n    id: 3,\n    name: 'Danail',\n  },\n  {\n    id: 4,\n    name: 'Matheus',\n  },\n  {\n    id: 5,\n    name: 'You?',\n  },\n];\n"},"ServerSidePersistence.js":{module:"./ServerSidePersistence.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\n\nconst useFakeMutation = () => {\n  return React.useCallback(\n    (user) =>\n      new Promise((resolve, reject) =>\n        setTimeout(() => {\n          if (user.name?.trim() === '') {\n            reject(new Error(\"Error while saving user: name can't be empty.\"));\n          } else {\n            resolve({ ...user, name: user.name?.toUpperCase() });\n          }\n        }, 200),\n      ),\n    [],\n  );\n};\n\nexport default function ServerSidePersistence() {\n  const mutateRow = useFakeMutation();\n\n  const [snackbar, setSnackbar] = React.useState(null);\n\n  const handleCloseSnackbar = () => setSnackbar(null);\n\n  const processRowUpdate = React.useCallback(\n    async (newRow) => {\n      // Make the HTTP request to save in the backend\n      const response = await mutateRow(newRow);\n      setSnackbar({ children: 'User successfully saved', severity: 'success' });\n      return response;\n    },\n    [mutateRow],\n  );\n\n  const handleProcessRowUpdateError = React.useCallback((error) => {\n    setSnackbar({ children: error.message, severity: 'error' });\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        processRowUpdate={processRowUpdate}\n        onProcessRowUpdateError={handleProcessRowUpdateError}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n      {!!snackbar && (\n        <Snackbar\n          open\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          onClose={handleCloseSnackbar}\n          autoHideDuration={6000}\n        >\n          <Alert {...snackbar} onClose={handleCloseSnackbar} />\n        </Snackbar>\n      )}\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",moduleTS:"./ServerSidePersistence.js",rawTS:"import * as React from 'react';\nimport {\n  DataGrid,\n  GridRowModel,\n  GridColumns,\n  GridRowId,\n  GridRowsProp,\n} from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert, { AlertProps } from '@mui/material/Alert';\n\ninterface User {\n  name: string;\n  age: number;\n  id: GridRowId;\n  dateCreated: Date;\n  lastLogin: Date;\n}\n\nconst useFakeMutation = () => {\n  return React.useCallback(\n    (user: Partial<User>) =>\n      new Promise<Partial<User>>((resolve, reject) =>\n        setTimeout(() => {\n          if (user.name?.trim() === '') {\n            reject(new Error(\"Error while saving user: name can't be empty.\"));\n          } else {\n            resolve({ ...user, name: user.name?.toUpperCase() });\n          }\n        }, 200),\n      ),\n    [],\n  );\n};\n\nexport default function ServerSidePersistence() {\n  const mutateRow = useFakeMutation();\n\n  const [snackbar, setSnackbar] = React.useState<Pick<\n    AlertProps,\n    'children' | 'severity'\n  > | null>(null);\n\n  const handleCloseSnackbar = () => setSnackbar(null);\n\n  const processRowUpdate = React.useCallback(\n    async (newRow: GridRowModel) => {\n      // Make the HTTP request to save in the backend\n      const response = await mutateRow(newRow);\n      setSnackbar({ children: 'User successfully saved', severity: 'success' });\n      return response;\n    },\n    [mutateRow],\n  );\n\n  const handleProcessRowUpdateError = React.useCallback((error: Error) => {\n    setSnackbar({ children: error.message, severity: 'error' });\n  }, []);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        processRowUpdate={processRowUpdate}\n        onProcessRowUpdateError={handleProcessRowUpdateError}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n      {!!snackbar && (\n        <Snackbar\n          open\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          onClose={handleCloseSnackbar}\n          autoHideDuration={6000}\n        >\n          <Alert {...snackbar} onClose={handleCloseSnackbar} />\n        </Snackbar>\n      )}\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"AskConfirmationBeforeSave.js":{module:"./AskConfirmationBeforeSave.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\nimport Snackbar from '@mui/material/Snackbar';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Alert from '@mui/material/Alert';\n\nconst useFakeMutation = () => {\n  return React.useCallback(\n    (user) =>\n      new Promise((resolve, reject) =>\n        setTimeout(() => {\n          if (user.name?.trim() === '') {\n            reject();\n          } else {\n            resolve(user);\n          }\n        }, 200),\n      ),\n    [],\n  );\n};\n\nfunction computeMutation(newRow, oldRow) {\n  if (newRow.name !== oldRow.name) {\n    return `Name from '${oldRow.name}' to '${newRow.name}'`;\n  }\n  if (newRow.age !== oldRow.age) {\n    return `Age from '${oldRow.age || ''}' to '${newRow.age || ''}'`;\n  }\n  return null;\n}\n\nexport default function AskConfirmationBeforeSave() {\n  const mutateRow = useFakeMutation();\n  const noButtonRef = React.useRef(null);\n  const [promiseArguments, setPromiseArguments] = React.useState(null);\n\n  const [snackbar, setSnackbar] = React.useState(null);\n\n  const handleCloseSnackbar = () => setSnackbar(null);\n\n  const processRowUpdate = React.useCallback(\n    (newRow, oldRow) =>\n      new Promise((resolve, reject) => {\n        const mutation = computeMutation(newRow, oldRow);\n        if (mutation) {\n          // Save the arguments to resolve or reject the promise later\n          setPromiseArguments({ resolve, reject, newRow, oldRow });\n        } else {\n          resolve(oldRow); // Nothing was changed\n        }\n      }),\n    [],\n  );\n\n  const handleNo = () => {\n    const { oldRow, resolve } = promiseArguments;\n    resolve(oldRow); // Resolve with the old row to not update the internal state\n    setPromiseArguments(null);\n  };\n\n  const handleYes = async () => {\n    const { newRow, oldRow, reject, resolve } = promiseArguments;\n\n    try {\n      // Make the HTTP request to save in the backend\n      const response = await mutateRow(newRow);\n      setSnackbar({ children: 'User successfully saved', severity: 'success' });\n      resolve(response);\n      setPromiseArguments(null);\n    } catch (error) {\n      setSnackbar({ children: \"Name can't be empty\", severity: 'error' });\n      reject(oldRow);\n      setPromiseArguments(null);\n    }\n  };\n\n  const handleEntered = () => {\n    // The `autoFocus` is not used because, if used, the same Enter that saves\n    // the cell triggers \"No\". Instead, we manually focus the \"No\" button once\n    // the dialog is fully open.\n    // noButtonRef.current?.focus();\n  };\n\n  const renderConfirmDialog = () => {\n    if (!promiseArguments) {\n      return null;\n    }\n\n    const { newRow, oldRow } = promiseArguments;\n    const mutation = computeMutation(newRow, oldRow);\n\n    return (\n      <Dialog\n        maxWidth=\"xs\"\n        TransitionProps={{ onEntered: handleEntered }}\n        open={!!promiseArguments}\n      >\n        <DialogTitle>Are you sure?</DialogTitle>\n        <DialogContent dividers>\n          {`Pressing 'Yes' will change ${mutation}.`}\n        </DialogContent>\n        <DialogActions>\n          <Button ref={noButtonRef} onClick={handleNo}>\n            No\n          </Button>\n          <Button onClick={handleYes}>Yes</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      {renderConfirmDialog()}\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        processRowUpdate={processRowUpdate}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n      {!!snackbar && (\n        <Snackbar open onClose={handleCloseSnackbar} autoHideDuration={6000}>\n          <Alert {...snackbar} onClose={handleCloseSnackbar} />\n        </Snackbar>\n      )}\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",jsxPreview:"{renderConfirmDialog()}\n<DataGrid\n  rows={rows}\n  columns={columns}\n  processRowUpdate={processRowUpdate}\n  experimentalFeatures={{ newEditingApi: true }}\n/>\n{!!snackbar && (\n  <Snackbar open onClose={handleCloseSnackbar} autoHideDuration={6000}>\n    <Alert {...snackbar} onClose={handleCloseSnackbar} />\n  </Snackbar>\n)}",moduleTS:"./AskConfirmationBeforeSave.js",rawTS:"import * as React from 'react';\nimport {\n  DataGrid,\n  GridRowModel,\n  GridColumns,\n  GridRowId,\n  GridRowsProp,\n} from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\nimport Snackbar from '@mui/material/Snackbar';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Alert, { AlertProps } from '@mui/material/Alert';\n\ninterface User {\n  name: string;\n  age: number;\n  id: GridRowId;\n  dateCreated: Date;\n  lastLogin: Date;\n}\n\nconst useFakeMutation = () => {\n  return React.useCallback(\n    (user: Partial<User>) =>\n      new Promise<Partial<User>>((resolve, reject) =>\n        setTimeout(() => {\n          if (user.name?.trim() === '') {\n            reject();\n          } else {\n            resolve(user);\n          }\n        }, 200),\n      ),\n    [],\n  );\n};\n\nfunction computeMutation(newRow: GridRowModel, oldRow: GridRowModel) {\n  if (newRow.name !== oldRow.name) {\n    return `Name from '${oldRow.name}' to '${newRow.name}'`;\n  }\n  if (newRow.age !== oldRow.age) {\n    return `Age from '${oldRow.age || ''}' to '${newRow.age || ''}'`;\n  }\n  return null;\n}\n\nexport default function AskConfirmationBeforeSave() {\n  const mutateRow = useFakeMutation();\n  const noButtonRef = React.useRef<HTMLButtonElement>(null);\n  const [promiseArguments, setPromiseArguments] = React.useState<any>(null);\n\n  const [snackbar, setSnackbar] = React.useState<Pick<\n    AlertProps,\n    'children' | 'severity'\n  > | null>(null);\n\n  const handleCloseSnackbar = () => setSnackbar(null);\n\n  const processRowUpdate = React.useCallback(\n    (newRow: GridRowModel, oldRow: GridRowModel) =>\n      new Promise<GridRowModel>((resolve, reject) => {\n        const mutation = computeMutation(newRow, oldRow);\n        if (mutation) {\n          // Save the arguments to resolve or reject the promise later\n          setPromiseArguments({ resolve, reject, newRow, oldRow });\n        } else {\n          resolve(oldRow); // Nothing was changed\n        }\n      }),\n    [],\n  );\n\n  const handleNo = () => {\n    const { oldRow, resolve } = promiseArguments;\n    resolve(oldRow); // Resolve with the old row to not update the internal state\n    setPromiseArguments(null);\n  };\n\n  const handleYes = async () => {\n    const { newRow, oldRow, reject, resolve } = promiseArguments;\n\n    try {\n      // Make the HTTP request to save in the backend\n      const response = await mutateRow(newRow);\n      setSnackbar({ children: 'User successfully saved', severity: 'success' });\n      resolve(response);\n      setPromiseArguments(null);\n    } catch (error) {\n      setSnackbar({ children: \"Name can't be empty\", severity: 'error' });\n      reject(oldRow);\n      setPromiseArguments(null);\n    }\n  };\n\n  const handleEntered = () => {\n    // The `autoFocus` is not used because, if used, the same Enter that saves\n    // the cell triggers \"No\". Instead, we manually focus the \"No\" button once\n    // the dialog is fully open.\n    // noButtonRef.current?.focus();\n  };\n\n  const renderConfirmDialog = () => {\n    if (!promiseArguments) {\n      return null;\n    }\n\n    const { newRow, oldRow } = promiseArguments;\n    const mutation = computeMutation(newRow, oldRow);\n\n    return (\n      <Dialog\n        maxWidth=\"xs\"\n        TransitionProps={{ onEntered: handleEntered }}\n        open={!!promiseArguments}\n      >\n        <DialogTitle>Are you sure?</DialogTitle>\n        <DialogContent dividers>\n          {`Pressing 'Yes' will change ${mutation}.`}\n        </DialogContent>\n        <DialogActions>\n          <Button ref={noButtonRef} onClick={handleNo}>\n            No\n          </Button>\n          <Button onClick={handleYes}>Yes</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      {renderConfirmDialog()}\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        processRowUpdate={processRowUpdate}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n      {!!snackbar && (\n        <Snackbar open onClose={handleCloseSnackbar} autoHideDuration={6000}>\n          <Alert {...snackbar} onClose={handleCloseSnackbar} />\n        </Snackbar>\n      )}\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"CustomEditComponent.js":{module:"./CustomEditComponent.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport { DataGrid, useGridApiContext } from '@mui/x-data-grid';\n\nfunction renderRating(params) {\n  return <Rating readOnly value={params.value} />;\n}\n\nrenderRating.propTypes = {\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.number,\n};\n\nfunction RatingEditInputCell(props) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleChange = (event, newValue) => {\n    apiRef.current.setEditCellValue({ id, field, value: newValue });\n  };\n\n  const handleRef = (element) => {\n    if (element) {\n      const input = element.querySelector(`input[value=\"${value}\"]`);\n\n      input?.focus();\n    }\n  };\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', pr: 2 }}>\n      <Rating\n        ref={handleRef}\n        name=\"rating\"\n        precision={1}\n        value={value}\n        onChange={handleChange}\n      />\n    </Box>\n  );\n}\n\nRatingEditInputCell.propTypes = {\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.number,\n};\n\nconst renderRatingEditInputCell = (params) => {\n  return <RatingEditInputCell {...params} />;\n};\n\nexport default function CustomEditComponent() {\n  return (\n    <div style={{ height: 250, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  {\n    field: 'places',\n    headerName: 'Places',\n    width: 120,\n  },\n  {\n    field: 'rating',\n    headerName: 'Rating',\n    renderCell: renderRating,\n    renderEditCell: renderRatingEditInputCell,\n    editable: true,\n    width: 180,\n    type: 'number',\n  },\n];\n\nconst rows = [\n  { id: 1, places: 'Barcelona', rating: 5 },\n  { id: 2, places: 'Rio de Janeiro', rating: 4 },\n  { id: 3, places: 'London', rating: 3 },\n  { id: 4, places: 'New York', rating: 2 },\n];\n",jsxPreview:"<DataGrid\n  rows={rows}\n  columns={columns}\n  experimentalFeatures={{ newEditingApi: true }}\n/>",moduleTS:"./CustomEditComponent.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport {\n  DataGrid,\n  GridRenderCellParams,\n  GridColDef,\n  useGridApiContext,\n} from '@mui/x-data-grid';\n\nfunction renderRating(params: GridRenderCellParams<number>) {\n  return <Rating readOnly value={params.value} />;\n}\n\nfunction RatingEditInputCell(props: GridRenderCellParams<number>) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number | null) => {\n    apiRef.current.setEditCellValue({ id, field, value: newValue });\n  };\n\n  const handleRef = (element: HTMLSpanElement) => {\n    if (element) {\n      const input = element.querySelector<HTMLInputElement>(\n        `input[value=\"${value}\"]`,\n      );\n      input?.focus();\n    }\n  };\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', pr: 2 }}>\n      <Rating\n        ref={handleRef}\n        name=\"rating\"\n        precision={1}\n        value={value}\n        onChange={handleChange}\n      />\n    </Box>\n  );\n}\n\nconst renderRatingEditInputCell: GridColDef['renderCell'] = (params) => {\n  return <RatingEditInputCell {...params} />;\n};\n\nexport default function CustomEditComponent() {\n  return (\n    <div style={{ height: 250, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  {\n    field: 'places',\n    headerName: 'Places',\n    width: 120,\n  },\n  {\n    field: 'rating',\n    headerName: 'Rating',\n    renderCell: renderRating,\n    renderEditCell: renderRatingEditInputCell,\n    editable: true,\n    width: 180,\n    type: 'number',\n  },\n];\n\nconst rows = [\n  { id: 1, places: 'Barcelona', rating: 5 },\n  { id: 2, places: 'Rio de Janeiro', rating: 4 },\n  { id: 3, places: 'London', rating: 3 },\n  { id: 4, places: 'New York', rating: 2 },\n];\n"},"BasicRowEditingGrid.js":{module:"./BasicRowEditingGrid.js",raw:"import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function BasicRowEditingGrid() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        editMode=\"row\"\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n",jsxPreview:'<DataGrid\n  editMode="row"\n  rows={rows}\n  columns={columns}\n  experimentalFeatures={{ newEditingApi: true }}\n/>',moduleTS:"./BasicRowEditingGrid.js",rawTS:"import * as React from 'react';\nimport { DataGrid, GridColumns, GridRowsProp } from '@mui/x-data-grid';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n} from '@mui/x-data-grid-generator';\n\nexport default function BasicRowEditingGrid() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        editMode=\"row\"\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns: GridColumns = [\n  { field: 'name', headerName: 'Name', width: 180, editable: true },\n  { field: 'age', headerName: 'Age', type: 'number', editable: true },\n  {\n    field: 'dateCreated',\n    headerName: 'Date Created',\n    type: 'date',\n    width: 180,\n    editable: true,\n  },\n  {\n    field: 'lastLogin',\n    headerName: 'Last Login',\n    type: 'dateTime',\n    width: 220,\n    editable: true,\n  },\n];\n\nconst rows: GridRowsProp = [\n  {\n    id: 1,\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 2,\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 3,\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 4,\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: 5,\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n"},"AutoStopEditComponent.js":{module:"./AutoStopEditComponent.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from '@mui/material/Select';\nimport { DataGrid, useGridApiContext } from '@mui/x-data-grid';\n\nfunction SelectEditInputCell(props) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleChange = async (event) => {\n    await apiRef.current.setEditCellValue({ id, field, value: event.target.value });\n    apiRef.current.stopCellEditMode({ id, field });\n  };\n\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      size=\"small\"\n      sx={{ height: 1 }}\n      native\n      autoFocus\n    >\n      <option>Back-end Developer</option>\n      <option>Front-end Developer</option>\n      <option>UX Designer</option>\n    </Select>\n  );\n}\n\nSelectEditInputCell.propTypes = {\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any,\n};\n\nconst renderSelectEditInputCell = (params) => {\n  return <SelectEditInputCell {...params} />;\n};\n\nexport default function AutoStopEditComponent() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  {\n    field: 'name',\n    headerName: 'Name',\n    width: 120,\n  },\n  {\n    field: 'role',\n    headerName: 'Role',\n    renderEditCell: renderSelectEditInputCell,\n    editable: true,\n    width: 180,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: 'Olivier',\n    role: 'Back-end Developer',\n  },\n  {\n    id: 2,\n    name: 'Danail',\n    role: 'UX Designer',\n  },\n  {\n    id: 3,\n    name: 'Matheus',\n    role: 'Front-end Developer',\n  },\n];\n",jsxPreview:"<DataGrid\n  rows={rows}\n  columns={columns}\n  experimentalFeatures={{ newEditingApi: true }}\n/>",moduleTS:"./AutoStopEditComponent.js",rawTS:"import * as React from 'react';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport {\n  DataGrid,\n  GridRenderCellParams,\n  GridColDef,\n  useGridApiContext,\n} from '@mui/x-data-grid';\n\nfunction SelectEditInputCell(props: GridRenderCellParams) {\n  const { id, value, field } = props;\n  const apiRef = useGridApiContext();\n\n  const handleChange = async (event: SelectChangeEvent) => {\n    await apiRef.current.setEditCellValue({ id, field, value: event.target.value });\n    apiRef.current.stopCellEditMode({ id, field });\n  };\n\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      size=\"small\"\n      sx={{ height: 1 }}\n      native\n      autoFocus\n    >\n      <option>Back-end Developer</option>\n      <option>Front-end Developer</option>\n      <option>UX Designer</option>\n    </Select>\n  );\n}\n\nconst renderSelectEditInputCell: GridColDef['renderCell'] = (params) => {\n  return <SelectEditInputCell {...params} />;\n};\n\nexport default function AutoStopEditComponent() {\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </div>\n  );\n}\n\nconst columns = [\n  {\n    field: 'name',\n    headerName: 'Name',\n    width: 120,\n  },\n  {\n    field: 'role',\n    headerName: 'Role',\n    renderEditCell: renderSelectEditInputCell,\n    editable: true,\n    width: 180,\n  },\n];\n\nconst rows = [\n  {\n    id: 1,\n    name: 'Olivier',\n    role: 'Back-end Developer',\n  },\n  {\n    id: 2,\n    name: 'Danail',\n    role: 'UX Designer',\n  },\n  {\n    id: 3,\n    name: 'Matheus',\n    role: 'Front-end Developer',\n  },\n];\n"},"FullFeaturedCrudGrid.js":{module:"./FullFeaturedCrudGrid.js",raw:"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport {\n  GridRowModes,\n  DataGridPro,\n  GridToolbarContainer,\n  GridActionsCellItem,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n  randomId,\n} from '@mui/x-data-grid-generator';\n\nconst initialRows = [\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n\nfunction EditToolbar(props) {\n  const { setRows, setRowModesModel } = props;\n\n  const handleClick = () => {\n    const id = randomId();\n    setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\n    setRowModesModel((oldModel) => ({\n      ...oldModel,\n      [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\n    }));\n  };\n\n  return (\n    <GridToolbarContainer>\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n        Add record\n      </Button>\n    </GridToolbarContainer>\n  );\n}\n\nEditToolbar.propTypes = {\n  setRowModesModel: PropTypes.func.isRequired,\n  setRows: PropTypes.func.isRequired,\n};\n\nexport default function FullFeaturedCrudGrid() {\n  const [rows, setRows] = React.useState(initialRows);\n  const [rowModesModel, setRowModesModel] = React.useState({});\n\n  const handleRowEditStart = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleRowEditStop = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleEditClick = (id) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleSaveClick = (id) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n  };\n\n  const handleDeleteClick = (id) => () => {\n    setRows(rows.filter((row) => row.id !== id));\n  };\n\n  const handleCancelClick = (id) => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n\n    const editedRow = rows.find((row) => row.id === id);\n    if (editedRow.isNew) {\n      setRows(rows.filter((row) => row.id !== id));\n    }\n  };\n\n  const processRowUpdate = (newRow) => {\n    const updatedRow = { ...newRow, isNew: false };\n    setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\n    return updatedRow;\n  };\n\n  const columns = [\n    { field: 'name', headerName: 'Name', width: 180, editable: true },\n    { field: 'age', headerName: 'Age', type: 'number', editable: true },\n    {\n      field: 'dateCreated',\n      headerName: 'Date Created',\n      type: 'date',\n      width: 180,\n      editable: true,\n    },\n    {\n      field: 'lastLogin',\n      headerName: 'Last Login',\n      type: 'dateTime',\n      width: 220,\n      editable: true,\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Actions',\n      width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label=\"Save\"\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDeleteClick(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  return (\n    <Box\n      sx={{\n        height: 500,\n        width: '100%',\n        '& .actions': {\n          color: 'text.secondary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={(newModel) => setRowModesModel(newModel)}\n        onRowEditStart={handleRowEditStart}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        components={{\n          Toolbar: EditToolbar,\n        }}\n        componentsProps={{\n          toolbar: { setRows, setRowModesModel },\n        }}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </Box>\n  );\n}\n",moduleTS:"./FullFeaturedCrudGrid.js",rawTS:"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport {\n  GridRowsProp,\n  GridRowModesModel,\n  GridRowModes,\n  DataGridPro,\n  GridColumns,\n  GridRowParams,\n  MuiEvent,\n  GridToolbarContainer,\n  GridActionsCellItem,\n  GridEventListener,\n  GridRowId,\n  GridRowModel,\n} from '@mui/x-data-grid-pro';\nimport {\n  randomCreatedDate,\n  randomTraderName,\n  randomUpdatedDate,\n  randomId,\n} from '@mui/x-data-grid-generator';\n\nconst initialRows: GridRowsProp = [\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 25,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 36,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 19,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 28,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n  {\n    id: randomId(),\n    name: randomTraderName(),\n    age: 23,\n    dateCreated: randomCreatedDate(),\n    lastLogin: randomUpdatedDate(),\n  },\n];\n\ninterface EditToolbarProps {\n  setRows: (newRows: (oldRows: GridRowsProp) => GridRowsProp) => void;\n  setRowModesModel: (\n    newModel: (oldModel: GridRowModesModel) => GridRowModesModel,\n  ) => void;\n}\n\nfunction EditToolbar(props: EditToolbarProps) {\n  const { setRows, setRowModesModel } = props;\n\n  const handleClick = () => {\n    const id = randomId();\n    setRows((oldRows) => [...oldRows, { id, name: '', age: '', isNew: true }]);\n    setRowModesModel((oldModel) => ({\n      ...oldModel,\n      [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\n    }));\n  };\n\n  return (\n    <GridToolbarContainer>\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick}>\n        Add record\n      </Button>\n    </GridToolbarContainer>\n  );\n}\n\nexport default function FullFeaturedCrudGrid() {\n  const [rows, setRows] = React.useState(initialRows);\n  const [rowModesModel, setRowModesModel] = React.useState<GridRowModesModel>({});\n\n  const handleRowEditStart = (\n    params: GridRowParams,\n    event: MuiEvent<React.SyntheticEvent>,\n  ) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\n    event.defaultMuiPrevented = true;\n  };\n\n  const handleEditClick = (id: GridRowId) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleSaveClick = (id: GridRowId) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n  };\n\n  const handleDeleteClick = (id: GridRowId) => () => {\n    setRows(rows.filter((row) => row.id !== id));\n  };\n\n  const handleCancelClick = (id: GridRowId) => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n\n    const editedRow = rows.find((row) => row.id === id);\n    if (editedRow!.isNew) {\n      setRows(rows.filter((row) => row.id !== id));\n    }\n  };\n\n  const processRowUpdate = (newRow: GridRowModel) => {\n    const updatedRow = { ...newRow, isNew: false };\n    setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\n    return updatedRow;\n  };\n\n  const columns: GridColumns = [\n    { field: 'name', headerName: 'Name', width: 180, editable: true },\n    { field: 'age', headerName: 'Age', type: 'number', editable: true },\n    {\n      field: 'dateCreated',\n      headerName: 'Date Created',\n      type: 'date',\n      width: 180,\n      editable: true,\n    },\n    {\n      field: 'lastLogin',\n      headerName: 'Last Login',\n      type: 'dateTime',\n      width: 220,\n      editable: true,\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: 'Actions',\n      width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label=\"Save\"\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label=\"Cancel\"\n              className=\"textPrimary\"\n              onClick={handleCancelClick(id)}\n              color=\"inherit\"\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={<EditIcon />}\n            label=\"Edit\"\n            className=\"textPrimary\"\n            onClick={handleEditClick(id)}\n            color=\"inherit\"\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label=\"Delete\"\n            onClick={handleDeleteClick(id)}\n            color=\"inherit\"\n          />,\n        ];\n      },\n    },\n  ];\n\n  return (\n    <Box\n      sx={{\n        height: 500,\n        width: '100%',\n        '& .actions': {\n          color: 'text.secondary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n        },\n      }}\n    >\n      <DataGridPro\n        rows={rows}\n        columns={columns}\n        editMode=\"row\"\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={(newModel) => setRowModesModel(newModel)}\n        onRowEditStart={handleRowEditStart}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        components={{\n          Toolbar: EditToolbar,\n        }}\n        componentsProps={{\n          toolbar: { setRows, setRowModesModel },\n        }}\n        experimentalFeatures={{ newEditingApi: true }}\n      />\n    </Box>\n  );\n}\n"},"EditApiNoSnap.js":{module:"./EditApiNoSnap.js",raw:"import * as React from 'react';\nimport ApiDocs from 'docsx/src/modules/components/ApiDocs';\nimport api from 'docsx/pages/x/api/data-grid/grid-new-editing-api.json';\n\nexport default function EditApiNoSnap() {\n  return <ApiDocs api={api} />;\n}\n"}},Ee={"./BasicEditingGrid.js":function(){return(0,i.jsx)("div",{style:{height:300,width:"100%"},children:(0,i.jsx)(r._,{rows:l,columns:d,experimentalFeatures:{newEditingApi:!0}})})},"./IsCellEditableGrid.js":function(){return(0,i.jsx)(c.Z,{sx:{height:400,width:"100%","& .MuiDataGrid-cell--editable":{bgcolor:function(e){return"dark"===e.palette.mode?"#376331":"rgb(217 243 190)"}}},children:(0,i.jsx)(r._,{rows:u,columns:p,isCellEditable:function(e){return e.row.age%2===0},experimentalFeatures:{newEditingApi:!0}})})},"./ValueParserSetterGrid.js":function(){return(0,i.jsx)("div",{style:{height:400,width:"100%"},children:(0,i.jsx)(r._,{rows:f,columns:h})})},"./DisableStopEditModeOnFocusOut.js":function(){return(0,i.jsx)("div",{style:{height:300,width:"100%"},children:(0,i.jsx)(r._,{rows:k,columns:C,experimentalFeatures:{newEditingApi:!0},onCellEditStop:function(e,n){e.reason===w.GridCellEditStopReasons.cellFocusOut&&(n.defaultMuiPrevented=!0)}})})},"./StartEditButtonGrid.js":function(){var e=t.useState(null),n=(0,g.Z)(e,2),a=n[0],o=n[1],s=t.useState({}),d=(0,g.Z)(s,2),l=d[0],c=d[1],p=t.useCallback((function(e){var n=e.currentTarget.parentElement.dataset.id,a=e.currentTarget.dataset.field;o({id:n,field:a})}),[]),u=t.useMemo((function(){var e,n;if(!a)return"view";var t=a.id,o=a.field;return(null===(e=l[t])||void 0===e||null===(n=e[o])||void 0===n?void 0:n.mode)||"view"}),[l,a]),m=t.useCallback((function(e,n){"edit"===u&&(n.defaultMuiPrevented=!0)}),[u]);return(0,i.jsx)("div",{style:{height:400,width:"100%"},children:(0,i.jsx)(r._,{rows:D,columns:y,onCellKeyDown:m,cellModesModel:l,onCellModesModelChange:function(e){return c(e)},components:{Toolbar:R},componentsProps:{toolbar:{cellMode:u,selectedCellParams:a,setSelectedCellParams:o,cellModesModel:l,setCellModesModel:c},cell:{onFocus:p}},experimentalFeatures:{newEditingApi:!0}})})},"./ValidateServerNameGrid.js":function(){var e=function(){var e=(0,M.Z)((0,E.Z)().mark((function e(n){var a;return(0,E.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,j(n.props.value.toString());case 2:return a=e.sent,e.abrupt("return",(0,m.Z)((0,m.Z)({},n.props),{},{error:a}));case 4:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),n=[{field:"name",headerName:"MUI Contributor",width:180,editable:!0,preProcessEditCellProps:e,renderEditCell:O}];return t.useEffect((function(){return function(){clearTimeout(S)}}),[]),(0,i.jsx)(_,{children:(0,i.jsx)(A.s,{rows:Z,columns:n,isCellEditable:function(e){return 5===e.row.id},experimentalFeatures:{newEditingApi:!0}})})},"./ServerSidePersistence.js":function(){var e=t.useCallback((function(e){return new(L())((function(n,a){return setTimeout((function(){var t,o;""===(null===(t=e.name)||void 0===t?void 0:t.trim())?a(new Error("Error while saving user: name can't be empty.")):n((0,m.Z)((0,m.Z)({},e),{},{name:null===(o=e.name)||void 0===o?void 0:o.toUpperCase()}))}),200)}))}),[]),n=t.useState(null),a=(0,g.Z)(n,2),o=a[0],s=a[1],d=function(){return s(null)},l=t.useCallback(function(){var n=(0,M.Z)((0,E.Z)().mark((function n(a){var t;return(0,E.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,e(a);case 2:return t=n.sent,s({children:"User successfully saved",severity:"success"}),n.abrupt("return",t);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),[e]),c=t.useCallback((function(e){s({children:e.message,severity:"error"})}),[]);return(0,i.jsxs)("div",{style:{height:400,width:"100%"},children:[(0,i.jsx)(r._,{rows:q,columns:$,processRowUpdate:l,onProcessRowUpdateError:c,experimentalFeatures:{newEditingApi:!0}}),!!o&&(0,i.jsx)(B.Z,{open:!0,anchorOrigin:{vertical:"bottom",horizontal:"center"},onClose:d,autoHideDuration:6e3,children:(0,i.jsx)(H.Z,(0,m.Z)((0,m.Z)({},o),{},{onClose:d}))})]})},"./AskConfirmationBeforeSave.js":function(){var e=t.useCallback((function(e){return new(L())((function(n,a){return setTimeout((function(){var t;""===(null===(t=e.name)||void 0===t?void 0:t.trim())?a():n(e)}),200)}))}),[]),n=t.useRef(null),a=t.useState(null),o=(0,g.Z)(a,2),s=o[0],d=o[1],l=t.useState(null),c=(0,g.Z)(l,2),p=c[0],u=c[1],h=function(){return u(null)},f=t.useCallback((function(e,n){return new(L())((function(a,t){J(e,n)?d({resolve:a,reject:t,newRow:e,oldRow:n}):a(n)}))}),[]),w=function(){var e=s.oldRow;(0,s.resolve)(e),d(null)},C=function(){var n=(0,M.Z)((0,E.Z)().mark((function n(){var a,t,o,r,i;return(0,E.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=s.newRow,t=s.oldRow,o=s.reject,r=s.resolve,n.prev=1,n.next=4,e(a);case 4:i=n.sent,u({children:"User successfully saved",severity:"success"}),r(i),d(null),n.next=15;break;case 10:n.prev=10,n.t0=n.catch(1),u({children:"Name can't be empty",severity:"error"}),o(t),d(null);case 15:case"end":return n.stop()}}),n,null,[[1,10]])})));return function(){return n.apply(this,arguments)}}(),k=function(){};return(0,i.jsxs)("div",{style:{height:400,width:"100%"},children:[function(){if(!s)return null;var e=J(s.newRow,s.oldRow);return(0,i.jsxs)(z.Z,{maxWidth:"xs",TransitionProps:{onEntered:k},open:!!s,children:[(0,i.jsx)(K.Z,{children:"Are you sure?"}),(0,i.jsx)(Y.Z,{dividers:!0,children:"Pressing 'Yes' will change ".concat(e,".")}),(0,i.jsxs)(W.Z,{children:[(0,i.jsx)(b.Z,{ref:n,onClick:w,children:"No"}),(0,i.jsx)(b.Z,{onClick:C,children:"Yes"})]})]})}(),(0,i.jsx)(r._,{rows:Q,columns:X,processRowUpdate:f,experimentalFeatures:{newEditingApi:!0}}),!!p&&(0,i.jsx)(B.Z,{open:!0,onClose:h,autoHideDuration:6e3,children:(0,i.jsx)(H.Z,(0,m.Z)((0,m.Z)({},p),{},{onClose:h}))})]})},"./CustomEditComponent.js":function(){return(0,i.jsx)("div",{style:{height:250,width:"100%"},children:(0,i.jsx)(r._,{rows:oe,columns:te,experimentalFeatures:{newEditingApi:!0}})})},"./BasicRowEditingGrid.js":function(){return(0,i.jsx)("div",{style:{height:300,width:"100%"},children:(0,i.jsx)(r._,{editMode:"row",rows:se,columns:re,experimentalFeatures:{newEditingApi:!0}})})},"./AutoStopEditComponent.js":function(){return(0,i.jsx)("div",{style:{height:300,width:"100%"},children:(0,i.jsx)(r._,{rows:ce,columns:le,experimentalFeatures:{newEditingApi:!0}})})},"./FullFeaturedCrudGrid.js":function(){var e=t.useState(ve),n=(0,g.Z)(e,2),a=n[0],o=n[1],r=t.useState({}),s=(0,g.Z)(r,2),d=s[0],l=s[1],p=function(e){return function(){l((0,m.Z)((0,m.Z)({},d),{},(0,v.Z)({},e,{mode:we.GridRowModes.Edit})))}},u=function(e){return function(){l((0,m.Z)((0,m.Z)({},d),{},(0,v.Z)({},e,{mode:we.GridRowModes.View})))}},h=function(e){return function(){o(a.filter((function(n){return n.id!==e})))}},f=function(e){return function(){l((0,m.Z)((0,m.Z)({},d),{},(0,v.Z)({},e,{mode:we.GridRowModes.View,ignoreModifications:!0}))),a.find((function(n){return n.id===e})).isNew&&o(a.filter((function(n){return n.id!==e})))}},w=[{field:"name",headerName:"Name",width:180,editable:!0},{field:"age",headerName:"Age",type:"number",editable:!0},{field:"dateCreated",headerName:"Date Created",type:"date",width:180,editable:!0},{field:"lastLogin",headerName:"Last Login",type:"dateTime",width:220,editable:!0},{field:"actions",type:"actions",headerName:"Actions",width:100,cellClassName:"actions",getActions:function(e){var n,a=e.id;return(null===(n=d[a])||void 0===n?void 0:n.mode)===we.GridRowModes.Edit?[(0,i.jsx)(ke.u,{icon:(0,i.jsx)(he.Z,{}),label:"Save",onClick:u(a)}),(0,i.jsx)(ke.u,{icon:(0,i.jsx)(fe.Z,{}),label:"Cancel",className:"textPrimary",onClick:f(a),color:"inherit"})]:[(0,i.jsx)(ke.u,{icon:(0,i.jsx)(me.Z,{}),label:"Edit",className:"textPrimary",onClick:p(a),color:"inherit"}),(0,i.jsx)(ke.u,{icon:(0,i.jsx)(ge.Z,{}),label:"Delete",onClick:h(a),color:"inherit"})]}}];return(0,i.jsx)(c.Z,{sx:{height:500,width:"100%","& .actions":{color:"text.secondary"},"& .textPrimary":{color:"text.primary"}},children:(0,i.jsx)(A.s,{rows:a,columns:w,editMode:"row",rowModesModel:d,onRowModesModelChange:function(e){return l(e)},onRowEditStart:function(e,n){n.defaultMuiPrevented=!0},onRowEditStop:function(e,n){n.defaultMuiPrevented=!0},processRowUpdate:function(e){var n=(0,m.Z)((0,m.Z)({},e),{},{isNew:!1});return o(a.map((function(a){return a.id===e.id?n:a}))),n},components:{Toolbar:be},componentsProps:{toolbar:{setRows:o,setRowModesModel:l}},experimentalFeatures:{newEditingApi:!0}})})},"./EditApiNoSnap.js":function(){return(0,i.jsx)(Re.Z,{api:Se})}};function Me(){return(0,i.jsx)(o.Z,{demos:De,docs:ye,demoComponents:Ee})}},91424:function(){},28955:function(e,n,a){"use strict";var t=a(91424);a.o(t,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return t.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(t,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return t.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(t,"GridEditModes")&&a.d(n,{GridEditModes:function(){return t.GridEditModes}}),a.o(t,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return t.gridColumnLookupSelector}}),a.o(t,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return t.gridColumnVisibilityModelSelector}}),a.o(t,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return t.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(t,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return t.gridFilteredDescendantCountLookupSelector}}),a.o(t,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return t.gridFilteredRowsLookupSelector}}),a.o(t,"gridFilteredSortedRowIdsSelector")&&a.d(n,{gridFilteredSortedRowIdsSelector:function(){return t.gridFilteredSortedRowIdsSelector}}),a.o(t,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return t.gridPageCountSelector}}),a.o(t,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return t.gridPageSelector}}),a.o(t,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return t.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(t,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return t.gridRowIdsSelector}}),a.o(t,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return t.gridRowTreeSelector}}),a.o(t,"gridStringOrNumberComparator")&&a.d(n,{gridStringOrNumberComparator:function(){return t.gridStringOrNumberComparator}}),a.o(t,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return t.gridVisibleColumnDefinitionsSelector}}),a.o(t,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return t.gridVisibleRowCountSelector}}),a.o(t,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return t.gridVisibleSortedRowIdsSelector}})},6731:function(e,n,a){"use strict";a.d(n,{Z3:function(){return o.Z3},aP:function(){return t.a},u9:function(){return t.u}});var t=a(72076),o=a(38253)},21401:function(e,n,a){"use strict";a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return o.aP},GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return o.u9},gridDetailPanelExpandedRowsContentCacheSelector:function(){return o.Z3}});var t=a(28955);a.o(t,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return t.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(t,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return t.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(t,"GridEditModes")&&a.d(n,{GridEditModes:function(){return t.GridEditModes}}),a.o(t,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return t.gridColumnLookupSelector}}),a.o(t,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return t.gridColumnVisibilityModelSelector}}),a.o(t,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return t.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(t,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return t.gridFilteredDescendantCountLookupSelector}}),a.o(t,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return t.gridFilteredRowsLookupSelector}}),a.o(t,"gridFilteredSortedRowIdsSelector")&&a.d(n,{gridFilteredSortedRowIdsSelector:function(){return t.gridFilteredSortedRowIdsSelector}}),a.o(t,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return t.gridPageCountSelector}}),a.o(t,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return t.gridPageSelector}}),a.o(t,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return t.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(t,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return t.gridRowIdsSelector}}),a.o(t,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return t.gridRowTreeSelector}}),a.o(t,"gridStringOrNumberComparator")&&a.d(n,{gridStringOrNumberComparator:function(){return t.gridStringOrNumberComparator}}),a.o(t,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return t.gridVisibleColumnDefinitionsSelector}}),a.o(t,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return t.gridVisibleRowCountSelector}}),a.o(t,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return t.gridVisibleSortedRowIdsSelector}});var o=a(6731)},33917:function(e,n,a){"use strict";a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return t.GRID_DETAIL_PANEL_TOGGLE_COL_DEF},GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return t.GRID_DETAIL_PANEL_TOGGLE_FIELD},gridDetailPanelExpandedRowsContentCacheSelector:function(){return t.gridDetailPanelExpandedRowsContentCacheSelector}});var t=a(21401);a.o(t,"GridEditModes")&&a.d(n,{GridEditModes:function(){return t.GridEditModes}}),a.o(t,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return t.gridColumnLookupSelector}}),a.o(t,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return t.gridColumnVisibilityModelSelector}}),a.o(t,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return t.gridFilteredDescendantCountLookupSelector}}),a.o(t,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return t.gridFilteredRowsLookupSelector}}),a.o(t,"gridFilteredSortedRowIdsSelector")&&a.d(n,{gridFilteredSortedRowIdsSelector:function(){return t.gridFilteredSortedRowIdsSelector}}),a.o(t,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return t.gridPageCountSelector}}),a.o(t,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return t.gridPageSelector}}),a.o(t,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return t.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(t,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return t.gridRowIdsSelector}}),a.o(t,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return t.gridRowTreeSelector}}),a.o(t,"gridStringOrNumberComparator")&&a.d(n,{gridStringOrNumberComparator:function(){return t.gridStringOrNumberComparator}}),a.o(t,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return t.gridVisibleColumnDefinitionsSelector}}),a.o(t,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return t.gridVisibleRowCountSelector}}),a.o(t,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return t.gridVisibleSortedRowIdsSelector}})},59404:function(e,n,a){"use strict";a.d(n,{GridEvents:function(){return o.GridEvents},GridLinkOperator:function(){return o.GridLinkOperator},GridRowModes:function(){return o.GridRowModes}});var t=a(1489);a.o(t,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return t.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(t,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return t.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(t,"GridEvents")&&a.d(n,{GridEvents:function(){return t.GridEvents}}),a.o(t,"GridLinkOperator")&&a.d(n,{GridLinkOperator:function(){return t.GridLinkOperator}}),a.o(t,"GridRowModes")&&a.d(n,{GridRowModes:function(){return t.GridRowModes}}),a.o(t,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return t.gridColumnLookupSelector}}),a.o(t,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return t.gridColumnVisibilityModelSelector}}),a.o(t,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return t.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(t,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return t.gridFilteredDescendantCountLookupSelector}}),a.o(t,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return t.gridFilteredRowsLookupSelector}}),a.o(t,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return t.gridPageCountSelector}}),a.o(t,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return t.gridPageSelector}}),a.o(t,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return t.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(t,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return t.gridRowIdsSelector}}),a.o(t,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return t.gridRowTreeSelector}}),a.o(t,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return t.gridVisibleColumnDefinitionsSelector}}),a.o(t,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return t.gridVisibleRowCountSelector}}),a.o(t,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return t.gridVisibleSortedRowIdsSelector}});var o=a(53418);a.o(o,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return o.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(o,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return o.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(o,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return o.gridColumnLookupSelector}}),a.o(o,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return o.gridColumnVisibilityModelSelector}}),a.o(o,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return o.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(o,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return o.gridFilteredDescendantCountLookupSelector}}),a.o(o,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return o.gridFilteredRowsLookupSelector}}),a.o(o,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return o.gridPageCountSelector}}),a.o(o,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return o.gridPageSelector}}),a.o(o,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return o.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(o,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return o.gridRowIdsSelector}}),a.o(o,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return o.gridRowTreeSelector}}),a.o(o,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return o.gridVisibleColumnDefinitionsSelector}}),a.o(o,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return o.gridVisibleRowCountSelector}}),a.o(o,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return o.gridVisibleSortedRowIdsSelector}});var r=a(20782);a.o(r,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return r.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(r,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return r.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(r,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return r.gridColumnLookupSelector}}),a.o(r,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return r.gridColumnVisibilityModelSelector}}),a.o(r,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return r.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(r,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return r.gridFilteredDescendantCountLookupSelector}}),a.o(r,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return r.gridFilteredRowsLookupSelector}}),a.o(r,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return r.gridPageCountSelector}}),a.o(r,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return r.gridPageSelector}}),a.o(r,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return r.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(r,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return r.gridRowIdsSelector}}),a.o(r,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return r.gridRowTreeSelector}}),a.o(r,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return r.gridVisibleColumnDefinitionsSelector}}),a.o(r,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return r.gridVisibleRowCountSelector}}),a.o(r,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return r.gridVisibleSortedRowIdsSelector}});var s=a(33917);a.o(s,"GRID_DETAIL_PANEL_TOGGLE_COL_DEF")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_COL_DEF:function(){return s.GRID_DETAIL_PANEL_TOGGLE_COL_DEF}}),a.o(s,"GRID_DETAIL_PANEL_TOGGLE_FIELD")&&a.d(n,{GRID_DETAIL_PANEL_TOGGLE_FIELD:function(){return s.GRID_DETAIL_PANEL_TOGGLE_FIELD}}),a.o(s,"gridColumnLookupSelector")&&a.d(n,{gridColumnLookupSelector:function(){return s.gridColumnLookupSelector}}),a.o(s,"gridColumnVisibilityModelSelector")&&a.d(n,{gridColumnVisibilityModelSelector:function(){return s.gridColumnVisibilityModelSelector}}),a.o(s,"gridDetailPanelExpandedRowsContentCacheSelector")&&a.d(n,{gridDetailPanelExpandedRowsContentCacheSelector:function(){return s.gridDetailPanelExpandedRowsContentCacheSelector}}),a.o(s,"gridFilteredDescendantCountLookupSelector")&&a.d(n,{gridFilteredDescendantCountLookupSelector:function(){return s.gridFilteredDescendantCountLookupSelector}}),a.o(s,"gridFilteredRowsLookupSelector")&&a.d(n,{gridFilteredRowsLookupSelector:function(){return s.gridFilteredRowsLookupSelector}}),a.o(s,"gridPageCountSelector")&&a.d(n,{gridPageCountSelector:function(){return s.gridPageCountSelector}}),a.o(s,"gridPageSelector")&&a.d(n,{gridPageSelector:function(){return s.gridPageSelector}}),a.o(s,"gridPaginatedVisibleSortedGridRowIdsSelector")&&a.d(n,{gridPaginatedVisibleSortedGridRowIdsSelector:function(){return s.gridPaginatedVisibleSortedGridRowIdsSelector}}),a.o(s,"gridRowIdsSelector")&&a.d(n,{gridRowIdsSelector:function(){return s.gridRowIdsSelector}}),a.o(s,"gridRowTreeSelector")&&a.d(n,{gridRowTreeSelector:function(){return s.gridRowTreeSelector}}),a.o(s,"gridVisibleColumnDefinitionsSelector")&&a.d(n,{gridVisibleColumnDefinitionsSelector:function(){return s.gridVisibleColumnDefinitionsSelector}}),a.o(s,"gridVisibleRowCountSelector")&&a.d(n,{gridVisibleRowCountSelector:function(){return s.gridVisibleRowCountSelector}}),a.o(s,"gridVisibleSortedRowIdsSelector")&&a.d(n,{gridVisibleSortedRowIdsSelector:function(){return s.gridVisibleSortedRowIdsSelector}})},34570:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/x/react-data-grid/editing",function(){return a(7832)}])}},function(e){e.O(0,[7178,6047,6767,9332,5312,3397,1463,9007,3783,8496,6021,9774,2888,179],(function(){return n=34570,e(e.s=n);var n}));var n=e.O();_N_E=n}]);